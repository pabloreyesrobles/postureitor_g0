
postureitor_g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004964  08004964  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004964  08004964  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000074  080049e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080049e0  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a96  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001975  00000000  00000000  00027b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000294a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001548e  00000000  00000000  0002a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008768  00000000  00000000  0003f72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875b9  00000000  00000000  00047e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d04  00000000  00000000  000cf4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004820 	.word	0x08004820

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08004820 	.word	0x08004820

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 fb6d 	bl	8000900 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 faf9 	bl	8000828 <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 fb5f 	bl	8000900 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fb55 	bl	8000900 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fb05 	bl	8000874 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fafb 	bl	8000874 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f7ff fff0 	bl	8000278 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fe5d 	bl	8000f5c <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 fc93 	bl	8000bd4 <__aeabi_fsub>
 80002ae:	f000 fe55 	bl	8000f5c <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__aeabi_fadd>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	46c6      	mov	lr, r8
 80002c0:	0243      	lsls	r3, r0, #9
 80002c2:	0a5b      	lsrs	r3, r3, #9
 80002c4:	024e      	lsls	r6, r1, #9
 80002c6:	0045      	lsls	r5, r0, #1
 80002c8:	004f      	lsls	r7, r1, #1
 80002ca:	00da      	lsls	r2, r3, #3
 80002cc:	0fc4      	lsrs	r4, r0, #31
 80002ce:	469c      	mov	ip, r3
 80002d0:	0a70      	lsrs	r0, r6, #9
 80002d2:	4690      	mov	r8, r2
 80002d4:	b500      	push	{lr}
 80002d6:	0e2d      	lsrs	r5, r5, #24
 80002d8:	0e3f      	lsrs	r7, r7, #24
 80002da:	0fc9      	lsrs	r1, r1, #31
 80002dc:	09b6      	lsrs	r6, r6, #6
 80002de:	428c      	cmp	r4, r1
 80002e0:	d04b      	beq.n	800037a <__aeabi_fadd+0xbe>
 80002e2:	1bea      	subs	r2, r5, r7
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	dd36      	ble.n	8000356 <__aeabi_fadd+0x9a>
 80002e8:	2f00      	cmp	r7, #0
 80002ea:	d061      	beq.n	80003b0 <__aeabi_fadd+0xf4>
 80002ec:	2dff      	cmp	r5, #255	; 0xff
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0x36>
 80002f0:	e0ad      	b.n	800044e <__aeabi_fadd+0x192>
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	04db      	lsls	r3, r3, #19
 80002f6:	431e      	orrs	r6, r3
 80002f8:	2a1b      	cmp	r2, #27
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fadd+0x42>
 80002fc:	e0d3      	b.n	80004a6 <__aeabi_fadd+0x1ea>
 80002fe:	2001      	movs	r0, #1
 8000300:	4643      	mov	r3, r8
 8000302:	1a18      	subs	r0, r3, r0
 8000304:	0143      	lsls	r3, r0, #5
 8000306:	d400      	bmi.n	800030a <__aeabi_fadd+0x4e>
 8000308:	e08c      	b.n	8000424 <__aeabi_fadd+0x168>
 800030a:	0180      	lsls	r0, r0, #6
 800030c:	0987      	lsrs	r7, r0, #6
 800030e:	0038      	movs	r0, r7
 8000310:	f000 fed4 	bl	80010bc <__clzsi2>
 8000314:	3805      	subs	r0, #5
 8000316:	4087      	lsls	r7, r0
 8000318:	4285      	cmp	r5, r0
 800031a:	dc00      	bgt.n	800031e <__aeabi_fadd+0x62>
 800031c:	e0b6      	b.n	800048c <__aeabi_fadd+0x1d0>
 800031e:	1a2d      	subs	r5, r5, r0
 8000320:	48b3      	ldr	r0, [pc, #716]	; (80005f0 <__aeabi_fadd+0x334>)
 8000322:	4038      	ands	r0, r7
 8000324:	0743      	lsls	r3, r0, #29
 8000326:	d004      	beq.n	8000332 <__aeabi_fadd+0x76>
 8000328:	230f      	movs	r3, #15
 800032a:	4003      	ands	r3, r0
 800032c:	2b04      	cmp	r3, #4
 800032e:	d000      	beq.n	8000332 <__aeabi_fadd+0x76>
 8000330:	3004      	adds	r0, #4
 8000332:	0143      	lsls	r3, r0, #5
 8000334:	d400      	bmi.n	8000338 <__aeabi_fadd+0x7c>
 8000336:	e078      	b.n	800042a <__aeabi_fadd+0x16e>
 8000338:	1c6a      	adds	r2, r5, #1
 800033a:	2dfe      	cmp	r5, #254	; 0xfe
 800033c:	d065      	beq.n	800040a <__aeabi_fadd+0x14e>
 800033e:	0180      	lsls	r0, r0, #6
 8000340:	0a43      	lsrs	r3, r0, #9
 8000342:	469c      	mov	ip, r3
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	4663      	mov	r3, ip
 8000348:	05d0      	lsls	r0, r2, #23
 800034a:	4318      	orrs	r0, r3
 800034c:	07e4      	lsls	r4, r4, #31
 800034e:	4320      	orrs	r0, r4
 8000350:	bc80      	pop	{r7}
 8000352:	46b8      	mov	r8, r7
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2a00      	cmp	r2, #0
 8000358:	d035      	beq.n	80003c6 <__aeabi_fadd+0x10a>
 800035a:	1b7a      	subs	r2, r7, r5
 800035c:	2d00      	cmp	r5, #0
 800035e:	d000      	beq.n	8000362 <__aeabi_fadd+0xa6>
 8000360:	e0af      	b.n	80004c2 <__aeabi_fadd+0x206>
 8000362:	4643      	mov	r3, r8
 8000364:	2b00      	cmp	r3, #0
 8000366:	d100      	bne.n	800036a <__aeabi_fadd+0xae>
 8000368:	e0a7      	b.n	80004ba <__aeabi_fadd+0x1fe>
 800036a:	1e53      	subs	r3, r2, #1
 800036c:	2a01      	cmp	r2, #1
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0xb6>
 8000370:	e12f      	b.n	80005d2 <__aeabi_fadd+0x316>
 8000372:	2aff      	cmp	r2, #255	; 0xff
 8000374:	d069      	beq.n	800044a <__aeabi_fadd+0x18e>
 8000376:	001a      	movs	r2, r3
 8000378:	e0aa      	b.n	80004d0 <__aeabi_fadd+0x214>
 800037a:	1be9      	subs	r1, r5, r7
 800037c:	2900      	cmp	r1, #0
 800037e:	dd70      	ble.n	8000462 <__aeabi_fadd+0x1a6>
 8000380:	2f00      	cmp	r7, #0
 8000382:	d037      	beq.n	80003f4 <__aeabi_fadd+0x138>
 8000384:	2dff      	cmp	r5, #255	; 0xff
 8000386:	d062      	beq.n	800044e <__aeabi_fadd+0x192>
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	04db      	lsls	r3, r3, #19
 800038c:	431e      	orrs	r6, r3
 800038e:	291b      	cmp	r1, #27
 8000390:	dc00      	bgt.n	8000394 <__aeabi_fadd+0xd8>
 8000392:	e0b0      	b.n	80004f6 <__aeabi_fadd+0x23a>
 8000394:	2001      	movs	r0, #1
 8000396:	4440      	add	r0, r8
 8000398:	0143      	lsls	r3, r0, #5
 800039a:	d543      	bpl.n	8000424 <__aeabi_fadd+0x168>
 800039c:	3501      	adds	r5, #1
 800039e:	2dff      	cmp	r5, #255	; 0xff
 80003a0:	d033      	beq.n	800040a <__aeabi_fadd+0x14e>
 80003a2:	2301      	movs	r3, #1
 80003a4:	4a93      	ldr	r2, [pc, #588]	; (80005f4 <__aeabi_fadd+0x338>)
 80003a6:	4003      	ands	r3, r0
 80003a8:	0840      	lsrs	r0, r0, #1
 80003aa:	4010      	ands	r0, r2
 80003ac:	4318      	orrs	r0, r3
 80003ae:	e7b9      	b.n	8000324 <__aeabi_fadd+0x68>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d100      	bne.n	80003b6 <__aeabi_fadd+0xfa>
 80003b4:	e083      	b.n	80004be <__aeabi_fadd+0x202>
 80003b6:	1e51      	subs	r1, r2, #1
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0x102>
 80003bc:	e0d8      	b.n	8000570 <__aeabi_fadd+0x2b4>
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d045      	beq.n	800044e <__aeabi_fadd+0x192>
 80003c2:	000a      	movs	r2, r1
 80003c4:	e798      	b.n	80002f8 <__aeabi_fadd+0x3c>
 80003c6:	27fe      	movs	r7, #254	; 0xfe
 80003c8:	1c6a      	adds	r2, r5, #1
 80003ca:	4217      	tst	r7, r2
 80003cc:	d000      	beq.n	80003d0 <__aeabi_fadd+0x114>
 80003ce:	e086      	b.n	80004de <__aeabi_fadd+0x222>
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	d000      	beq.n	80003d6 <__aeabi_fadd+0x11a>
 80003d4:	e0b7      	b.n	8000546 <__aeabi_fadd+0x28a>
 80003d6:	4643      	mov	r3, r8
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d100      	bne.n	80003de <__aeabi_fadd+0x122>
 80003dc:	e0f3      	b.n	80005c6 <__aeabi_fadd+0x30a>
 80003de:	2200      	movs	r2, #0
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0b0      	beq.n	8000346 <__aeabi_fadd+0x8a>
 80003e4:	1b98      	subs	r0, r3, r6
 80003e6:	0143      	lsls	r3, r0, #5
 80003e8:	d400      	bmi.n	80003ec <__aeabi_fadd+0x130>
 80003ea:	e0fa      	b.n	80005e2 <__aeabi_fadd+0x326>
 80003ec:	4643      	mov	r3, r8
 80003ee:	000c      	movs	r4, r1
 80003f0:	1af0      	subs	r0, r6, r3
 80003f2:	e797      	b.n	8000324 <__aeabi_fadd+0x68>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_fadd+0x13e>
 80003f8:	e0c8      	b.n	800058c <__aeabi_fadd+0x2d0>
 80003fa:	1e4a      	subs	r2, r1, #1
 80003fc:	2901      	cmp	r1, #1
 80003fe:	d100      	bne.n	8000402 <__aeabi_fadd+0x146>
 8000400:	e0ae      	b.n	8000560 <__aeabi_fadd+0x2a4>
 8000402:	29ff      	cmp	r1, #255	; 0xff
 8000404:	d023      	beq.n	800044e <__aeabi_fadd+0x192>
 8000406:	0011      	movs	r1, r2
 8000408:	e7c1      	b.n	800038e <__aeabi_fadd+0xd2>
 800040a:	2300      	movs	r3, #0
 800040c:	22ff      	movs	r2, #255	; 0xff
 800040e:	469c      	mov	ip, r3
 8000410:	e799      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000412:	21fe      	movs	r1, #254	; 0xfe
 8000414:	1c6a      	adds	r2, r5, #1
 8000416:	4211      	tst	r1, r2
 8000418:	d077      	beq.n	800050a <__aeabi_fadd+0x24e>
 800041a:	2aff      	cmp	r2, #255	; 0xff
 800041c:	d0f5      	beq.n	800040a <__aeabi_fadd+0x14e>
 800041e:	0015      	movs	r5, r2
 8000420:	4446      	add	r6, r8
 8000422:	0870      	lsrs	r0, r6, #1
 8000424:	0743      	lsls	r3, r0, #29
 8000426:	d000      	beq.n	800042a <__aeabi_fadd+0x16e>
 8000428:	e77e      	b.n	8000328 <__aeabi_fadd+0x6c>
 800042a:	08c3      	lsrs	r3, r0, #3
 800042c:	2dff      	cmp	r5, #255	; 0xff
 800042e:	d00e      	beq.n	800044e <__aeabi_fadd+0x192>
 8000430:	025b      	lsls	r3, r3, #9
 8000432:	0a5b      	lsrs	r3, r3, #9
 8000434:	469c      	mov	ip, r3
 8000436:	b2ea      	uxtb	r2, r5
 8000438:	e785      	b.n	8000346 <__aeabi_fadd+0x8a>
 800043a:	2e00      	cmp	r6, #0
 800043c:	d007      	beq.n	800044e <__aeabi_fadd+0x192>
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	03d2      	lsls	r2, r2, #15
 8000442:	4213      	tst	r3, r2
 8000444:	d003      	beq.n	800044e <__aeabi_fadd+0x192>
 8000446:	4210      	tst	r0, r2
 8000448:	d101      	bne.n	800044e <__aeabi_fadd+0x192>
 800044a:	000c      	movs	r4, r1
 800044c:	0003      	movs	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0db      	beq.n	800040a <__aeabi_fadd+0x14e>
 8000452:	2080      	movs	r0, #128	; 0x80
 8000454:	03c0      	lsls	r0, r0, #15
 8000456:	4318      	orrs	r0, r3
 8000458:	0240      	lsls	r0, r0, #9
 800045a:	0a43      	lsrs	r3, r0, #9
 800045c:	469c      	mov	ip, r3
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	e771      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000462:	2900      	cmp	r1, #0
 8000464:	d0d5      	beq.n	8000412 <__aeabi_fadd+0x156>
 8000466:	1b7a      	subs	r2, r7, r5
 8000468:	2d00      	cmp	r5, #0
 800046a:	d160      	bne.n	800052e <__aeabi_fadd+0x272>
 800046c:	4643      	mov	r3, r8
 800046e:	2b00      	cmp	r3, #0
 8000470:	d024      	beq.n	80004bc <__aeabi_fadd+0x200>
 8000472:	1e53      	subs	r3, r2, #1
 8000474:	2a01      	cmp	r2, #1
 8000476:	d073      	beq.n	8000560 <__aeabi_fadd+0x2a4>
 8000478:	2aff      	cmp	r2, #255	; 0xff
 800047a:	d0e7      	beq.n	800044c <__aeabi_fadd+0x190>
 800047c:	001a      	movs	r2, r3
 800047e:	2a1b      	cmp	r2, #27
 8000480:	dc00      	bgt.n	8000484 <__aeabi_fadd+0x1c8>
 8000482:	e085      	b.n	8000590 <__aeabi_fadd+0x2d4>
 8000484:	2001      	movs	r0, #1
 8000486:	003d      	movs	r5, r7
 8000488:	1980      	adds	r0, r0, r6
 800048a:	e785      	b.n	8000398 <__aeabi_fadd+0xdc>
 800048c:	2320      	movs	r3, #32
 800048e:	003a      	movs	r2, r7
 8000490:	1b45      	subs	r5, r0, r5
 8000492:	0038      	movs	r0, r7
 8000494:	3501      	adds	r5, #1
 8000496:	40ea      	lsrs	r2, r5
 8000498:	1b5d      	subs	r5, r3, r5
 800049a:	40a8      	lsls	r0, r5
 800049c:	1e43      	subs	r3, r0, #1
 800049e:	4198      	sbcs	r0, r3
 80004a0:	2500      	movs	r5, #0
 80004a2:	4310      	orrs	r0, r2
 80004a4:	e73e      	b.n	8000324 <__aeabi_fadd+0x68>
 80004a6:	2320      	movs	r3, #32
 80004a8:	0030      	movs	r0, r6
 80004aa:	1a9b      	subs	r3, r3, r2
 80004ac:	0031      	movs	r1, r6
 80004ae:	4098      	lsls	r0, r3
 80004b0:	40d1      	lsrs	r1, r2
 80004b2:	1e43      	subs	r3, r0, #1
 80004b4:	4198      	sbcs	r0, r3
 80004b6:	4308      	orrs	r0, r1
 80004b8:	e722      	b.n	8000300 <__aeabi_fadd+0x44>
 80004ba:	000c      	movs	r4, r1
 80004bc:	0003      	movs	r3, r0
 80004be:	0015      	movs	r5, r2
 80004c0:	e7b4      	b.n	800042c <__aeabi_fadd+0x170>
 80004c2:	2fff      	cmp	r7, #255	; 0xff
 80004c4:	d0c1      	beq.n	800044a <__aeabi_fadd+0x18e>
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	4640      	mov	r0, r8
 80004ca:	04db      	lsls	r3, r3, #19
 80004cc:	4318      	orrs	r0, r3
 80004ce:	4680      	mov	r8, r0
 80004d0:	2a1b      	cmp	r2, #27
 80004d2:	dd51      	ble.n	8000578 <__aeabi_fadd+0x2bc>
 80004d4:	2001      	movs	r0, #1
 80004d6:	000c      	movs	r4, r1
 80004d8:	003d      	movs	r5, r7
 80004da:	1a30      	subs	r0, r6, r0
 80004dc:	e712      	b.n	8000304 <__aeabi_fadd+0x48>
 80004de:	4643      	mov	r3, r8
 80004e0:	1b9f      	subs	r7, r3, r6
 80004e2:	017b      	lsls	r3, r7, #5
 80004e4:	d42b      	bmi.n	800053e <__aeabi_fadd+0x282>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d000      	beq.n	80004ec <__aeabi_fadd+0x230>
 80004ea:	e710      	b.n	800030e <__aeabi_fadd+0x52>
 80004ec:	2300      	movs	r3, #0
 80004ee:	2400      	movs	r4, #0
 80004f0:	2200      	movs	r2, #0
 80004f2:	469c      	mov	ip, r3
 80004f4:	e727      	b.n	8000346 <__aeabi_fadd+0x8a>
 80004f6:	2320      	movs	r3, #32
 80004f8:	0032      	movs	r2, r6
 80004fa:	0030      	movs	r0, r6
 80004fc:	40ca      	lsrs	r2, r1
 80004fe:	1a59      	subs	r1, r3, r1
 8000500:	4088      	lsls	r0, r1
 8000502:	1e43      	subs	r3, r0, #1
 8000504:	4198      	sbcs	r0, r3
 8000506:	4310      	orrs	r0, r2
 8000508:	e745      	b.n	8000396 <__aeabi_fadd+0xda>
 800050a:	2d00      	cmp	r5, #0
 800050c:	d14a      	bne.n	80005a4 <__aeabi_fadd+0x2e8>
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d063      	beq.n	80005dc <__aeabi_fadd+0x320>
 8000514:	2200      	movs	r2, #0
 8000516:	2e00      	cmp	r6, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x260>
 800051a:	e714      	b.n	8000346 <__aeabi_fadd+0x8a>
 800051c:	0030      	movs	r0, r6
 800051e:	4440      	add	r0, r8
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x26a>
 8000524:	e77e      	b.n	8000424 <__aeabi_fadd+0x168>
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <__aeabi_fadd+0x334>)
 8000528:	3501      	adds	r5, #1
 800052a:	4018      	ands	r0, r3
 800052c:	e77a      	b.n	8000424 <__aeabi_fadd+0x168>
 800052e:	2fff      	cmp	r7, #255	; 0xff
 8000530:	d08c      	beq.n	800044c <__aeabi_fadd+0x190>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	4641      	mov	r1, r8
 8000536:	04db      	lsls	r3, r3, #19
 8000538:	4319      	orrs	r1, r3
 800053a:	4688      	mov	r8, r1
 800053c:	e79f      	b.n	800047e <__aeabi_fadd+0x1c2>
 800053e:	4643      	mov	r3, r8
 8000540:	000c      	movs	r4, r1
 8000542:	1af7      	subs	r7, r6, r3
 8000544:	e6e3      	b.n	800030e <__aeabi_fadd+0x52>
 8000546:	4642      	mov	r2, r8
 8000548:	2a00      	cmp	r2, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x292>
 800054c:	e775      	b.n	800043a <__aeabi_fadd+0x17e>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x298>
 8000552:	e77a      	b.n	800044a <__aeabi_fadd+0x18e>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	03db      	lsls	r3, r3, #15
 8000558:	2400      	movs	r4, #0
 800055a:	469c      	mov	ip, r3
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	e6f2      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000560:	0030      	movs	r0, r6
 8000562:	4440      	add	r0, r8
 8000564:	2501      	movs	r5, #1
 8000566:	0143      	lsls	r3, r0, #5
 8000568:	d400      	bmi.n	800056c <__aeabi_fadd+0x2b0>
 800056a:	e75b      	b.n	8000424 <__aeabi_fadd+0x168>
 800056c:	2502      	movs	r5, #2
 800056e:	e718      	b.n	80003a2 <__aeabi_fadd+0xe6>
 8000570:	4643      	mov	r3, r8
 8000572:	2501      	movs	r5, #1
 8000574:	1b98      	subs	r0, r3, r6
 8000576:	e6c5      	b.n	8000304 <__aeabi_fadd+0x48>
 8000578:	2320      	movs	r3, #32
 800057a:	4644      	mov	r4, r8
 800057c:	4640      	mov	r0, r8
 800057e:	40d4      	lsrs	r4, r2
 8000580:	1a9a      	subs	r2, r3, r2
 8000582:	4090      	lsls	r0, r2
 8000584:	1e43      	subs	r3, r0, #1
 8000586:	4198      	sbcs	r0, r3
 8000588:	4320      	orrs	r0, r4
 800058a:	e7a4      	b.n	80004d6 <__aeabi_fadd+0x21a>
 800058c:	000d      	movs	r5, r1
 800058e:	e74d      	b.n	800042c <__aeabi_fadd+0x170>
 8000590:	2320      	movs	r3, #32
 8000592:	4641      	mov	r1, r8
 8000594:	4640      	mov	r0, r8
 8000596:	40d1      	lsrs	r1, r2
 8000598:	1a9a      	subs	r2, r3, r2
 800059a:	4090      	lsls	r0, r2
 800059c:	1e43      	subs	r3, r0, #1
 800059e:	4198      	sbcs	r0, r3
 80005a0:	4308      	orrs	r0, r1
 80005a2:	e770      	b.n	8000486 <__aeabi_fadd+0x1ca>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x2f0>
 80005aa:	e74f      	b.n	800044c <__aeabi_fadd+0x190>
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2f6>
 80005b0:	e74d      	b.n	800044e <__aeabi_fadd+0x192>
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	03d2      	lsls	r2, r2, #15
 80005b6:	4213      	tst	r3, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x300>
 80005ba:	e748      	b.n	800044e <__aeabi_fadd+0x192>
 80005bc:	4210      	tst	r0, r2
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x306>
 80005c0:	e745      	b.n	800044e <__aeabi_fadd+0x192>
 80005c2:	0003      	movs	r3, r0
 80005c4:	e743      	b.n	800044e <__aeabi_fadd+0x192>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d090      	beq.n	80004ec <__aeabi_fadd+0x230>
 80005ca:	000c      	movs	r4, r1
 80005cc:	4684      	mov	ip, r0
 80005ce:	2200      	movs	r2, #0
 80005d0:	e6b9      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005d2:	4643      	mov	r3, r8
 80005d4:	000c      	movs	r4, r1
 80005d6:	1af0      	subs	r0, r6, r3
 80005d8:	3501      	adds	r5, #1
 80005da:	e693      	b.n	8000304 <__aeabi_fadd+0x48>
 80005dc:	4684      	mov	ip, r0
 80005de:	2200      	movs	r2, #0
 80005e0:	e6b1      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x32c>
 80005e6:	e71d      	b.n	8000424 <__aeabi_fadd+0x168>
 80005e8:	2300      	movs	r3, #0
 80005ea:	2400      	movs	r4, #0
 80005ec:	469c      	mov	ip, r3
 80005ee:	e6aa      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005f0:	fbffffff 	.word	0xfbffffff
 80005f4:	7dffffff 	.word	0x7dffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	464f      	mov	r7, r9
 80005fc:	4646      	mov	r6, r8
 80005fe:	46d6      	mov	lr, sl
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	b5c0      	push	{r6, r7, lr}
 8000604:	0047      	lsls	r7, r0, #1
 8000606:	1c0c      	adds	r4, r1, #0
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	0e3f      	lsrs	r7, r7, #24
 800060c:	0fc6      	lsrs	r6, r0, #31
 800060e:	2f00      	cmp	r7, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fdiv+0x1c>
 8000612:	e070      	b.n	80006f6 <__aeabi_fdiv+0xfe>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d100      	bne.n	800061a <__aeabi_fdiv+0x22>
 8000618:	e075      	b.n	8000706 <__aeabi_fdiv+0x10e>
 800061a:	00eb      	lsls	r3, r5, #3
 800061c:	2580      	movs	r5, #128	; 0x80
 800061e:	04ed      	lsls	r5, r5, #19
 8000620:	431d      	orrs	r5, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4699      	mov	r9, r3
 8000626:	469a      	mov	sl, r3
 8000628:	3f7f      	subs	r7, #127	; 0x7f
 800062a:	0260      	lsls	r0, r4, #9
 800062c:	0a43      	lsrs	r3, r0, #9
 800062e:	4698      	mov	r8, r3
 8000630:	0063      	lsls	r3, r4, #1
 8000632:	0e1b      	lsrs	r3, r3, #24
 8000634:	0fe4      	lsrs	r4, r4, #31
 8000636:	2b00      	cmp	r3, #0
 8000638:	d04e      	beq.n	80006d8 <__aeabi_fdiv+0xe0>
 800063a:	2bff      	cmp	r3, #255	; 0xff
 800063c:	d046      	beq.n	80006cc <__aeabi_fdiv+0xd4>
 800063e:	4642      	mov	r2, r8
 8000640:	00d0      	lsls	r0, r2, #3
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4302      	orrs	r2, r0
 8000648:	4690      	mov	r8, r2
 800064a:	2200      	movs	r2, #0
 800064c:	3b7f      	subs	r3, #127	; 0x7f
 800064e:	0031      	movs	r1, r6
 8000650:	1aff      	subs	r7, r7, r3
 8000652:	464b      	mov	r3, r9
 8000654:	4061      	eors	r1, r4
 8000656:	b2c9      	uxtb	r1, r1
 8000658:	4313      	orrs	r3, r2
 800065a:	2b0f      	cmp	r3, #15
 800065c:	d900      	bls.n	8000660 <__aeabi_fdiv+0x68>
 800065e:	e0b5      	b.n	80007cc <__aeabi_fdiv+0x1d4>
 8000660:	486e      	ldr	r0, [pc, #440]	; (800081c <__aeabi_fdiv+0x224>)
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	58c3      	ldr	r3, [r0, r3]
 8000666:	469f      	mov	pc, r3
 8000668:	2300      	movs	r3, #0
 800066a:	4698      	mov	r8, r3
 800066c:	0026      	movs	r6, r4
 800066e:	4645      	mov	r5, r8
 8000670:	4692      	mov	sl, r2
 8000672:	4653      	mov	r3, sl
 8000674:	2b02      	cmp	r3, #2
 8000676:	d100      	bne.n	800067a <__aeabi_fdiv+0x82>
 8000678:	e089      	b.n	800078e <__aeabi_fdiv+0x196>
 800067a:	2b03      	cmp	r3, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e09e      	b.n	80007be <__aeabi_fdiv+0x1c6>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d018      	beq.n	80006b6 <__aeabi_fdiv+0xbe>
 8000684:	003b      	movs	r3, r7
 8000686:	337f      	adds	r3, #127	; 0x7f
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd69      	ble.n	8000760 <__aeabi_fdiv+0x168>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	4b60      	ldr	r3, [pc, #384]	; (8000820 <__aeabi_fdiv+0x228>)
 80006a0:	401d      	ands	r5, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	3380      	adds	r3, #128	; 0x80
 80006a6:	2bfe      	cmp	r3, #254	; 0xfe
 80006a8:	dd00      	ble.n	80006ac <__aeabi_fdiv+0xb4>
 80006aa:	e070      	b.n	800078e <__aeabi_fdiv+0x196>
 80006ac:	01ad      	lsls	r5, r5, #6
 80006ae:	0a6d      	lsrs	r5, r5, #9
 80006b0:	b2d8      	uxtb	r0, r3
 80006b2:	e002      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80006b4:	000e      	movs	r6, r1
 80006b6:	2000      	movs	r0, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	05c0      	lsls	r0, r0, #23
 80006bc:	4328      	orrs	r0, r5
 80006be:	07f6      	lsls	r6, r6, #31
 80006c0:	4330      	orrs	r0, r6
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4643      	mov	r3, r8
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d13f      	bne.n	8000752 <__aeabi_fdiv+0x15a>
 80006d2:	2202      	movs	r2, #2
 80006d4:	3fff      	subs	r7, #255	; 0xff
 80006d6:	e003      	b.n	80006e0 <__aeabi_fdiv+0xe8>
 80006d8:	4643      	mov	r3, r8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d12d      	bne.n	800073a <__aeabi_fdiv+0x142>
 80006de:	2201      	movs	r2, #1
 80006e0:	0031      	movs	r1, r6
 80006e2:	464b      	mov	r3, r9
 80006e4:	4061      	eors	r1, r4
 80006e6:	b2c9      	uxtb	r1, r1
 80006e8:	4313      	orrs	r3, r2
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d834      	bhi.n	8000758 <__aeabi_fdiv+0x160>
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <__aeabi_fdiv+0x22c>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	58c3      	ldr	r3, [r0, r3]
 80006f4:	469f      	mov	pc, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d113      	bne.n	8000722 <__aeabi_fdiv+0x12a>
 80006fa:	2304      	movs	r3, #4
 80006fc:	4699      	mov	r9, r3
 80006fe:	3b03      	subs	r3, #3
 8000700:	2700      	movs	r7, #0
 8000702:	469a      	mov	sl, r3
 8000704:	e791      	b.n	800062a <__aeabi_fdiv+0x32>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d105      	bne.n	8000716 <__aeabi_fdiv+0x11e>
 800070a:	2308      	movs	r3, #8
 800070c:	4699      	mov	r9, r3
 800070e:	3b06      	subs	r3, #6
 8000710:	27ff      	movs	r7, #255	; 0xff
 8000712:	469a      	mov	sl, r3
 8000714:	e789      	b.n	800062a <__aeabi_fdiv+0x32>
 8000716:	230c      	movs	r3, #12
 8000718:	4699      	mov	r9, r3
 800071a:	3b09      	subs	r3, #9
 800071c:	27ff      	movs	r7, #255	; 0xff
 800071e:	469a      	mov	sl, r3
 8000720:	e783      	b.n	800062a <__aeabi_fdiv+0x32>
 8000722:	0028      	movs	r0, r5
 8000724:	f000 fcca 	bl	80010bc <__clzsi2>
 8000728:	2776      	movs	r7, #118	; 0x76
 800072a:	1f43      	subs	r3, r0, #5
 800072c:	409d      	lsls	r5, r3
 800072e:	2300      	movs	r3, #0
 8000730:	427f      	negs	r7, r7
 8000732:	4699      	mov	r9, r3
 8000734:	469a      	mov	sl, r3
 8000736:	1a3f      	subs	r7, r7, r0
 8000738:	e777      	b.n	800062a <__aeabi_fdiv+0x32>
 800073a:	4640      	mov	r0, r8
 800073c:	f000 fcbe 	bl	80010bc <__clzsi2>
 8000740:	4642      	mov	r2, r8
 8000742:	1f43      	subs	r3, r0, #5
 8000744:	409a      	lsls	r2, r3
 8000746:	2376      	movs	r3, #118	; 0x76
 8000748:	425b      	negs	r3, r3
 800074a:	4690      	mov	r8, r2
 800074c:	1a1b      	subs	r3, r3, r0
 800074e:	2200      	movs	r2, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	2203      	movs	r2, #3
 8000756:	e77a      	b.n	800064e <__aeabi_fdiv+0x56>
 8000758:	000e      	movs	r6, r1
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	2500      	movs	r5, #0
 800075e:	e7ac      	b.n	80006ba <__aeabi_fdiv+0xc2>
 8000760:	2001      	movs	r0, #1
 8000762:	1ac0      	subs	r0, r0, r3
 8000764:	281b      	cmp	r0, #27
 8000766:	dca6      	bgt.n	80006b6 <__aeabi_fdiv+0xbe>
 8000768:	379e      	adds	r7, #158	; 0x9e
 800076a:	002a      	movs	r2, r5
 800076c:	40bd      	lsls	r5, r7
 800076e:	40c2      	lsrs	r2, r0
 8000770:	1e6b      	subs	r3, r5, #1
 8000772:	419d      	sbcs	r5, r3
 8000774:	4315      	orrs	r5, r2
 8000776:	076b      	lsls	r3, r5, #29
 8000778:	d004      	beq.n	8000784 <__aeabi_fdiv+0x18c>
 800077a:	230f      	movs	r3, #15
 800077c:	402b      	ands	r3, r5
 800077e:	2b04      	cmp	r3, #4
 8000780:	d000      	beq.n	8000784 <__aeabi_fdiv+0x18c>
 8000782:	3504      	adds	r5, #4
 8000784:	016b      	lsls	r3, r5, #5
 8000786:	d544      	bpl.n	8000812 <__aeabi_fdiv+0x21a>
 8000788:	2001      	movs	r0, #1
 800078a:	2500      	movs	r5, #0
 800078c:	e795      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	2500      	movs	r5, #0
 8000792:	e792      	b.n	80006ba <__aeabi_fdiv+0xc2>
 8000794:	2580      	movs	r5, #128	; 0x80
 8000796:	2600      	movs	r6, #0
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	03ed      	lsls	r5, r5, #15
 800079c:	e78d      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800079e:	2300      	movs	r3, #0
 80007a0:	4698      	mov	r8, r3
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	03c0      	lsls	r0, r0, #15
 80007a6:	4205      	tst	r5, r0
 80007a8:	d009      	beq.n	80007be <__aeabi_fdiv+0x1c6>
 80007aa:	4643      	mov	r3, r8
 80007ac:	4203      	tst	r3, r0
 80007ae:	d106      	bne.n	80007be <__aeabi_fdiv+0x1c6>
 80007b0:	4645      	mov	r5, r8
 80007b2:	4305      	orrs	r5, r0
 80007b4:	026d      	lsls	r5, r5, #9
 80007b6:	0026      	movs	r6, r4
 80007b8:	20ff      	movs	r0, #255	; 0xff
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	e77d      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80007be:	2080      	movs	r0, #128	; 0x80
 80007c0:	03c0      	lsls	r0, r0, #15
 80007c2:	4305      	orrs	r5, r0
 80007c4:	026d      	lsls	r5, r5, #9
 80007c6:	20ff      	movs	r0, #255	; 0xff
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	e776      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80007cc:	4642      	mov	r2, r8
 80007ce:	016b      	lsls	r3, r5, #5
 80007d0:	0150      	lsls	r0, r2, #5
 80007d2:	4283      	cmp	r3, r0
 80007d4:	d219      	bcs.n	800080a <__aeabi_fdiv+0x212>
 80007d6:	221b      	movs	r2, #27
 80007d8:	2500      	movs	r5, #0
 80007da:	3f01      	subs	r7, #1
 80007dc:	2601      	movs	r6, #1
 80007de:	001c      	movs	r4, r3
 80007e0:	006d      	lsls	r5, r5, #1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	db01      	blt.n	80007ec <__aeabi_fdiv+0x1f4>
 80007e8:	4298      	cmp	r0, r3
 80007ea:	d801      	bhi.n	80007f0 <__aeabi_fdiv+0x1f8>
 80007ec:	1a1b      	subs	r3, r3, r0
 80007ee:	4335      	orrs	r5, r6
 80007f0:	3a01      	subs	r2, #1
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d1f3      	bne.n	80007de <__aeabi_fdiv+0x1e6>
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4193      	sbcs	r3, r2
 80007fa:	431d      	orrs	r5, r3
 80007fc:	003b      	movs	r3, r7
 80007fe:	337f      	adds	r3, #127	; 0x7f
 8000800:	000e      	movs	r6, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd00      	ble.n	8000808 <__aeabi_fdiv+0x210>
 8000806:	e741      	b.n	800068c <__aeabi_fdiv+0x94>
 8000808:	e7aa      	b.n	8000760 <__aeabi_fdiv+0x168>
 800080a:	221a      	movs	r2, #26
 800080c:	2501      	movs	r5, #1
 800080e:	1a1b      	subs	r3, r3, r0
 8000810:	e7e4      	b.n	80007dc <__aeabi_fdiv+0x1e4>
 8000812:	01ad      	lsls	r5, r5, #6
 8000814:	2000      	movs	r0, #0
 8000816:	0a6d      	lsrs	r5, r5, #9
 8000818:	e74f      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	08004838 	.word	0x08004838
 8000820:	f7ffffff 	.word	0xf7ffffff
 8000824:	08004878 	.word	0x08004878

08000828 <__eqsf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	024e      	lsls	r6, r1, #9
 8000830:	004c      	lsls	r4, r1, #1
 8000832:	0fc3      	lsrs	r3, r0, #31
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	2001      	movs	r0, #1
 8000838:	0e12      	lsrs	r2, r2, #24
 800083a:	0a76      	lsrs	r6, r6, #9
 800083c:	0e24      	lsrs	r4, r4, #24
 800083e:	0fc9      	lsrs	r1, r1, #31
 8000840:	2aff      	cmp	r2, #255	; 0xff
 8000842:	d006      	beq.n	8000852 <__eqsf2+0x2a>
 8000844:	2cff      	cmp	r4, #255	; 0xff
 8000846:	d003      	beq.n	8000850 <__eqsf2+0x28>
 8000848:	42a2      	cmp	r2, r4
 800084a:	d101      	bne.n	8000850 <__eqsf2+0x28>
 800084c:	42b5      	cmp	r5, r6
 800084e:	d006      	beq.n	800085e <__eqsf2+0x36>
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	2d00      	cmp	r5, #0
 8000854:	d1fc      	bne.n	8000850 <__eqsf2+0x28>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d1fa      	bne.n	8000850 <__eqsf2+0x28>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d1f8      	bne.n	8000850 <__eqsf2+0x28>
 800085e:	428b      	cmp	r3, r1
 8000860:	d006      	beq.n	8000870 <__eqsf2+0x48>
 8000862:	2001      	movs	r0, #1
 8000864:	2a00      	cmp	r2, #0
 8000866:	d1f3      	bne.n	8000850 <__eqsf2+0x28>
 8000868:	0028      	movs	r0, r5
 800086a:	1e43      	subs	r3, r0, #1
 800086c:	4198      	sbcs	r0, r3
 800086e:	e7ef      	b.n	8000850 <__eqsf2+0x28>
 8000870:	2000      	movs	r0, #0
 8000872:	e7ed      	b.n	8000850 <__eqsf2+0x28>

08000874 <__gesf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	0042      	lsls	r2, r0, #1
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	024e      	lsls	r6, r1, #9
 800087c:	004c      	lsls	r4, r1, #1
 800087e:	0fc3      	lsrs	r3, r0, #31
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	0e12      	lsrs	r2, r2, #24
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e24      	lsrs	r4, r4, #24
 8000888:	0fc8      	lsrs	r0, r1, #31
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d01b      	beq.n	80008c6 <__gesf2+0x52>
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d00e      	beq.n	80008b0 <__gesf2+0x3c>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d11b      	bne.n	80008ce <__gesf2+0x5a>
 8000896:	2c00      	cmp	r4, #0
 8000898:	d101      	bne.n	800089e <__gesf2+0x2a>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d01c      	beq.n	80008d8 <__gesf2+0x64>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d00c      	beq.n	80008bc <__gesf2+0x48>
 80008a2:	4283      	cmp	r3, r0
 80008a4:	d01c      	beq.n	80008e0 <__gesf2+0x6c>
 80008a6:	2102      	movs	r1, #2
 80008a8:	1e58      	subs	r0, r3, #1
 80008aa:	4008      	ands	r0, r1
 80008ac:	3801      	subs	r0, #1
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d122      	bne.n	80008fa <__gesf2+0x86>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d1f4      	bne.n	80008a2 <__gesf2+0x2e>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d1f2      	bne.n	80008a2 <__gesf2+0x2e>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d1f6      	bne.n	80008ae <__gesf2+0x3a>
 80008c0:	2001      	movs	r0, #1
 80008c2:	4240      	negs	r0, r0
 80008c4:	e7f3      	b.n	80008ae <__gesf2+0x3a>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d117      	bne.n	80008fa <__gesf2+0x86>
 80008ca:	2cff      	cmp	r4, #255	; 0xff
 80008cc:	d0f0      	beq.n	80008b0 <__gesf2+0x3c>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d1e7      	bne.n	80008a2 <__gesf2+0x2e>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d1e5      	bne.n	80008a2 <__gesf2+0x2e>
 80008d6:	e7e6      	b.n	80008a6 <__gesf2+0x32>
 80008d8:	2000      	movs	r0, #0
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d0e7      	beq.n	80008ae <__gesf2+0x3a>
 80008de:	e7e2      	b.n	80008a6 <__gesf2+0x32>
 80008e0:	42a2      	cmp	r2, r4
 80008e2:	dc05      	bgt.n	80008f0 <__gesf2+0x7c>
 80008e4:	dbea      	blt.n	80008bc <__gesf2+0x48>
 80008e6:	42b5      	cmp	r5, r6
 80008e8:	d802      	bhi.n	80008f0 <__gesf2+0x7c>
 80008ea:	d3e7      	bcc.n	80008bc <__gesf2+0x48>
 80008ec:	2000      	movs	r0, #0
 80008ee:	e7de      	b.n	80008ae <__gesf2+0x3a>
 80008f0:	4243      	negs	r3, r0
 80008f2:	4158      	adcs	r0, r3
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	3801      	subs	r0, #1
 80008f8:	e7d9      	b.n	80008ae <__gesf2+0x3a>
 80008fa:	2002      	movs	r0, #2
 80008fc:	4240      	negs	r0, r0
 80008fe:	e7d6      	b.n	80008ae <__gesf2+0x3a>

08000900 <__lesf2>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	0042      	lsls	r2, r0, #1
 8000904:	0245      	lsls	r5, r0, #9
 8000906:	024e      	lsls	r6, r1, #9
 8000908:	004c      	lsls	r4, r1, #1
 800090a:	0fc3      	lsrs	r3, r0, #31
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e12      	lsrs	r2, r2, #24
 8000910:	0a76      	lsrs	r6, r6, #9
 8000912:	0e24      	lsrs	r4, r4, #24
 8000914:	0fc8      	lsrs	r0, r1, #31
 8000916:	2aff      	cmp	r2, #255	; 0xff
 8000918:	d00b      	beq.n	8000932 <__lesf2+0x32>
 800091a:	2cff      	cmp	r4, #255	; 0xff
 800091c:	d00d      	beq.n	800093a <__lesf2+0x3a>
 800091e:	2a00      	cmp	r2, #0
 8000920:	d11f      	bne.n	8000962 <__lesf2+0x62>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d116      	bne.n	8000954 <__lesf2+0x54>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d114      	bne.n	8000954 <__lesf2+0x54>
 800092a:	2000      	movs	r0, #0
 800092c:	2d00      	cmp	r5, #0
 800092e:	d010      	beq.n	8000952 <__lesf2+0x52>
 8000930:	e009      	b.n	8000946 <__lesf2+0x46>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d10c      	bne.n	8000950 <__lesf2+0x50>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d113      	bne.n	8000962 <__lesf2+0x62>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d108      	bne.n	8000950 <__lesf2+0x50>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d008      	beq.n	8000954 <__lesf2+0x54>
 8000942:	4283      	cmp	r3, r0
 8000944:	d012      	beq.n	800096c <__lesf2+0x6c>
 8000946:	2102      	movs	r1, #2
 8000948:	1e58      	subs	r0, r3, #1
 800094a:	4008      	ands	r0, r1
 800094c:	3801      	subs	r0, #1
 800094e:	e000      	b.n	8000952 <__lesf2+0x52>
 8000950:	2002      	movs	r0, #2
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	2d00      	cmp	r5, #0
 8000956:	d1f4      	bne.n	8000942 <__lesf2+0x42>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1fa      	bne.n	8000952 <__lesf2+0x52>
 800095c:	2001      	movs	r0, #1
 800095e:	4240      	negs	r0, r0
 8000960:	e7f7      	b.n	8000952 <__lesf2+0x52>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d1ed      	bne.n	8000942 <__lesf2+0x42>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d1eb      	bne.n	8000942 <__lesf2+0x42>
 800096a:	e7ec      	b.n	8000946 <__lesf2+0x46>
 800096c:	42a2      	cmp	r2, r4
 800096e:	dc05      	bgt.n	800097c <__lesf2+0x7c>
 8000970:	dbf2      	blt.n	8000958 <__lesf2+0x58>
 8000972:	42b5      	cmp	r5, r6
 8000974:	d802      	bhi.n	800097c <__lesf2+0x7c>
 8000976:	d3ef      	bcc.n	8000958 <__lesf2+0x58>
 8000978:	2000      	movs	r0, #0
 800097a:	e7ea      	b.n	8000952 <__lesf2+0x52>
 800097c:	4243      	negs	r3, r0
 800097e:	4158      	adcs	r0, r3
 8000980:	0040      	lsls	r0, r0, #1
 8000982:	3801      	subs	r0, #1
 8000984:	e7e5      	b.n	8000952 <__lesf2+0x52>
 8000986:	46c0      	nop			; (mov r8, r8)

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	0244      	lsls	r4, r0, #9
 8000992:	0045      	lsls	r5, r0, #1
 8000994:	b5c0      	push	{r6, r7, lr}
 8000996:	0a64      	lsrs	r4, r4, #9
 8000998:	1c0f      	adds	r7, r1, #0
 800099a:	0e2d      	lsrs	r5, r5, #24
 800099c:	0fc6      	lsrs	r6, r0, #31
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fmul+0x1c>
 80009a2:	e08d      	b.n	8000ac0 <__aeabi_fmul+0x138>
 80009a4:	2dff      	cmp	r5, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fmul+0x22>
 80009a8:	e092      	b.n	8000ad0 <__aeabi_fmul+0x148>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	4699      	mov	r9, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	00e4      	lsls	r4, r4, #3
 80009b4:	04c0      	lsls	r0, r0, #19
 80009b6:	4304      	orrs	r4, r0
 80009b8:	3d7f      	subs	r5, #127	; 0x7f
 80009ba:	0278      	lsls	r0, r7, #9
 80009bc:	0a43      	lsrs	r3, r0, #9
 80009be:	4698      	mov	r8, r3
 80009c0:	007b      	lsls	r3, r7, #1
 80009c2:	0e1b      	lsrs	r3, r3, #24
 80009c4:	0fff      	lsrs	r7, r7, #31
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x44>
 80009ca:	e070      	b.n	8000aae <__aeabi_fmul+0x126>
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fmul+0x4a>
 80009d0:	e086      	b.n	8000ae0 <__aeabi_fmul+0x158>
 80009d2:	4642      	mov	r2, r8
 80009d4:	00d0      	lsls	r0, r2, #3
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	3b7f      	subs	r3, #127	; 0x7f
 80009da:	18ed      	adds	r5, r5, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	04d2      	lsls	r2, r2, #19
 80009e0:	4302      	orrs	r2, r0
 80009e2:	4690      	mov	r8, r2
 80009e4:	469c      	mov	ip, r3
 80009e6:	0031      	movs	r1, r6
 80009e8:	464b      	mov	r3, r9
 80009ea:	4079      	eors	r1, r7
 80009ec:	1c68      	adds	r0, r5, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d81c      	bhi.n	8000a2c <__aeabi_fmul+0xa4>
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <__aeabi_fmul+0x244>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	0039      	movs	r1, r7
 80009fc:	4644      	mov	r4, r8
 80009fe:	46e2      	mov	sl, ip
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d00f      	beq.n	8000a26 <__aeabi_fmul+0x9e>
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fmul+0x84>
 8000a0a:	e0d7      	b.n	8000bbc <__aeabi_fmul+0x234>
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d137      	bne.n	8000a80 <__aeabi_fmul+0xf8>
 8000a10:	2000      	movs	r0, #0
 8000a12:	2400      	movs	r4, #0
 8000a14:	05c0      	lsls	r0, r0, #23
 8000a16:	4320      	orrs	r0, r4
 8000a18:	07c9      	lsls	r1, r1, #31
 8000a1a:	4308      	orrs	r0, r1
 8000a1c:	bce0      	pop	{r5, r6, r7}
 8000a1e:	46ba      	mov	sl, r7
 8000a20:	46b1      	mov	r9, r6
 8000a22:	46a8      	mov	r8, r5
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e7f3      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000a2c:	0c26      	lsrs	r6, r4, #16
 8000a2e:	0424      	lsls	r4, r4, #16
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	4644      	mov	r4, r8
 8000a34:	0424      	lsls	r4, r4, #16
 8000a36:	0c24      	lsrs	r4, r4, #16
 8000a38:	4643      	mov	r3, r8
 8000a3a:	0027      	movs	r7, r4
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	4357      	muls	r7, r2
 8000a40:	4374      	muls	r4, r6
 8000a42:	435a      	muls	r2, r3
 8000a44:	435e      	muls	r6, r3
 8000a46:	1912      	adds	r2, r2, r4
 8000a48:	0c3b      	lsrs	r3, r7, #16
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_fmul+0xd0>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4694      	mov	ip, r2
 8000a56:	4466      	add	r6, ip
 8000a58:	043f      	lsls	r7, r7, #16
 8000a5a:	041a      	lsls	r2, r3, #16
 8000a5c:	0c3f      	lsrs	r7, r7, #16
 8000a5e:	19d2      	adds	r2, r2, r7
 8000a60:	0194      	lsls	r4, r2, #6
 8000a62:	1e67      	subs	r7, r4, #1
 8000a64:	41bc      	sbcs	r4, r7
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	0e92      	lsrs	r2, r2, #26
 8000a6a:	199b      	adds	r3, r3, r6
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	019b      	lsls	r3, r3, #6
 8000a70:	431c      	orrs	r4, r3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	d400      	bmi.n	8000a78 <__aeabi_fmul+0xf0>
 8000a76:	e09b      	b.n	8000bb0 <__aeabi_fmul+0x228>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	0862      	lsrs	r2, r4, #1
 8000a7c:	401c      	ands	r4, r3
 8000a7e:	4314      	orrs	r4, r2
 8000a80:	0002      	movs	r2, r0
 8000a82:	327f      	adds	r2, #127	; 0x7f
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	dd64      	ble.n	8000b52 <__aeabi_fmul+0x1ca>
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0123      	lsls	r3, r4, #4
 8000a98:	d503      	bpl.n	8000aa2 <__aeabi_fmul+0x11a>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <__aeabi_fmul+0x248>)
 8000a9e:	3280      	adds	r2, #128	; 0x80
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	2afe      	cmp	r2, #254	; 0xfe
 8000aa4:	dcbf      	bgt.n	8000a26 <__aeabi_fmul+0x9e>
 8000aa6:	01a4      	lsls	r4, r4, #6
 8000aa8:	0a64      	lsrs	r4, r4, #9
 8000aaa:	b2d0      	uxtb	r0, r2
 8000aac:	e7b2      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d13d      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d129      	bne.n	8000b18 <__aeabi_fmul+0x190>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	2500      	movs	r5, #0
 8000acc:	469a      	mov	sl, r3
 8000ace:	e774      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11b      	bne.n	8000b0c <__aeabi_fmul+0x184>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	25ff      	movs	r5, #255	; 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e76c      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	35ff      	adds	r5, #255	; 0xff
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10b      	bne.n	8000b00 <__aeabi_fmul+0x178>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	464a      	mov	r2, r9
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	469c      	mov	ip, r3
 8000af2:	e778      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000af4:	4653      	mov	r3, sl
 8000af6:	0031      	movs	r1, r6
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d000      	beq.n	8000afe <__aeabi_fmul+0x176>
 8000afc:	e783      	b.n	8000a06 <__aeabi_fmul+0x7e>
 8000afe:	e792      	b.n	8000a26 <__aeabi_fmul+0x9e>
 8000b00:	2303      	movs	r3, #3
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	e76c      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	25ff      	movs	r5, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e750      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b18:	0020      	movs	r0, r4
 8000b1a:	f000 facf 	bl	80010bc <__clzsi2>
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	426d      	negs	r5, r5
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	e744      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b30:	4640      	mov	r0, r8
 8000b32:	f000 fac3 	bl	80010bc <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	4690      	mov	r8, r2
 8000b42:	469c      	mov	ip, r3
 8000b44:	3d76      	subs	r5, #118	; 0x76
 8000b46:	e74e      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b48:	2480      	movs	r4, #128	; 0x80
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	03e4      	lsls	r4, r4, #15
 8000b50:	e760      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b52:	2301      	movs	r3, #1
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	2b1b      	cmp	r3, #27
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_fmul+0x1d4>
 8000b5a:	e759      	b.n	8000a10 <__aeabi_fmul+0x88>
 8000b5c:	0022      	movs	r2, r4
 8000b5e:	309e      	adds	r0, #158	; 0x9e
 8000b60:	40da      	lsrs	r2, r3
 8000b62:	4084      	lsls	r4, r0
 8000b64:	0013      	movs	r3, r2
 8000b66:	1e62      	subs	r2, r4, #1
 8000b68:	4194      	sbcs	r4, r2
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	0763      	lsls	r3, r4, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b78:	3404      	adds	r4, #4
 8000b7a:	0163      	lsls	r3, r4, #5
 8000b7c:	d51a      	bpl.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2400      	movs	r4, #0
 8000b82:	e747      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	03c0      	lsls	r0, r0, #15
 8000b88:	4204      	tst	r4, r0
 8000b8a:	d009      	beq.n	8000ba0 <__aeabi_fmul+0x218>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4203      	tst	r3, r0
 8000b90:	d106      	bne.n	8000ba0 <__aeabi_fmul+0x218>
 8000b92:	4644      	mov	r4, r8
 8000b94:	4304      	orrs	r4, r0
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0039      	movs	r1, r7
 8000b9a:	20ff      	movs	r0, #255	; 0xff
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	e739      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	0264      	lsls	r4, r4, #9
 8000ba8:	0031      	movs	r1, r6
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	e731      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	e765      	b.n	8000a80 <__aeabi_fmul+0xf8>
 8000bb4:	01a4      	lsls	r4, r4, #6
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e72b      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	03c0      	lsls	r0, r0, #15
 8000bc0:	4304      	orrs	r4, r0
 8000bc2:	0264      	lsls	r4, r4, #9
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	0a64      	lsrs	r4, r4, #9
 8000bc8:	e724      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	080048b8 	.word	0x080048b8
 8000bd0:	f7ffffff 	.word	0xf7ffffff

08000bd4 <__aeabi_fsub>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	46ce      	mov	lr, r9
 8000bd8:	4647      	mov	r7, r8
 8000bda:	0243      	lsls	r3, r0, #9
 8000bdc:	0a5b      	lsrs	r3, r3, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	00da      	lsls	r2, r3, #3
 8000be2:	4694      	mov	ip, r2
 8000be4:	0a72      	lsrs	r2, r6, #9
 8000be6:	4691      	mov	r9, r2
 8000be8:	0045      	lsls	r5, r0, #1
 8000bea:	004a      	lsls	r2, r1, #1
 8000bec:	b580      	push	{r7, lr}
 8000bee:	0e2d      	lsrs	r5, r5, #24
 8000bf0:	001f      	movs	r7, r3
 8000bf2:	0fc4      	lsrs	r4, r0, #31
 8000bf4:	0e12      	lsrs	r2, r2, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	09b6      	lsrs	r6, r6, #6
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d05b      	beq.n	8000cb6 <__aeabi_fsub+0xe2>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4041      	eors	r1, r0
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d039      	beq.n	8000c7a <__aeabi_fsub+0xa6>
 8000c06:	1aa8      	subs	r0, r5, r2
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	dd5a      	ble.n	8000cc2 <__aeabi_fsub+0xee>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d06a      	beq.n	8000ce6 <__aeabi_fsub+0x112>
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x42>
 8000c14:	e0d9      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	04d2      	lsls	r2, r2, #19
 8000c1a:	4316      	orrs	r6, r2
 8000c1c:	281b      	cmp	r0, #27
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_fsub+0x4e>
 8000c20:	e0e9      	b.n	8000df6 <__aeabi_fsub+0x222>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4663      	mov	r3, ip
 8000c26:	1a18      	subs	r0, r3, r0
 8000c28:	0143      	lsls	r3, r0, #5
 8000c2a:	d400      	bmi.n	8000c2e <__aeabi_fsub+0x5a>
 8000c2c:	e0b4      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000c2e:	0180      	lsls	r0, r0, #6
 8000c30:	0987      	lsrs	r7, r0, #6
 8000c32:	0038      	movs	r0, r7
 8000c34:	f000 fa42 	bl	80010bc <__clzsi2>
 8000c38:	3805      	subs	r0, #5
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	4285      	cmp	r5, r0
 8000c3e:	dc00      	bgt.n	8000c42 <__aeabi_fsub+0x6e>
 8000c40:	e0cc      	b.n	8000ddc <__aeabi_fsub+0x208>
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	48b5      	ldr	r0, [pc, #724]	; (8000f1c <__aeabi_fsub+0x348>)
 8000c46:	4038      	ands	r0, r7
 8000c48:	0743      	lsls	r3, r0, #29
 8000c4a:	d004      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4003      	ands	r3, r0
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c54:	3004      	adds	r0, #4
 8000c56:	0143      	lsls	r3, r0, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x88>
 8000c5a:	e0a0      	b.n	8000d9e <__aeabi_fsub+0x1ca>
 8000c5c:	1c6a      	adds	r2, r5, #1
 8000c5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x90>
 8000c62:	e08d      	b.n	8000d80 <__aeabi_fsub+0x1ac>
 8000c64:	0180      	lsls	r0, r0, #6
 8000c66:	0a47      	lsrs	r7, r0, #9
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	05d0      	lsls	r0, r2, #23
 8000c6c:	4338      	orrs	r0, r7
 8000c6e:	07e4      	lsls	r4, r4, #31
 8000c70:	4320      	orrs	r0, r4
 8000c72:	bcc0      	pop	{r6, r7}
 8000c74:	46b9      	mov	r9, r7
 8000c76:	46b0      	mov	r8, r6
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	1aa8      	subs	r0, r5, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dd45      	ble.n	8000d0e <__aeabi_fsub+0x13a>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d070      	beq.n	8000d68 <__aeabi_fsub+0x194>
 8000c86:	2dff      	cmp	r5, #255	; 0xff
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0xb8>
 8000c8a:	e09e      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	04db      	lsls	r3, r3, #19
 8000c90:	431e      	orrs	r6, r3
 8000c92:	4643      	mov	r3, r8
 8000c94:	2b1b      	cmp	r3, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0xc6>
 8000c98:	e0d2      	b.n	8000e40 <__aeabi_fsub+0x26c>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	4460      	add	r0, ip
 8000c9e:	0143      	lsls	r3, r0, #5
 8000ca0:	d57a      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	2dff      	cmp	r5, #255	; 0xff
 8000ca6:	d06b      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <__aeabi_fsub+0x34c>)
 8000cac:	4003      	ands	r3, r0
 8000cae:	0840      	lsrs	r0, r0, #1
 8000cb0:	4010      	ands	r0, r2
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7c8      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d020      	beq.n	8000cfc <__aeabi_fsub+0x128>
 8000cba:	428c      	cmp	r4, r1
 8000cbc:	d023      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	38ff      	subs	r0, #255	; 0xff
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d039      	beq.n	8000d3a <__aeabi_fsub+0x166>
 8000cc6:	1b57      	subs	r7, r2, r5
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0xfa>
 8000ccc:	e09d      	b.n	8000e0a <__aeabi_fsub+0x236>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x102>
 8000cd4:	e0db      	b.n	8000e8e <__aeabi_fsub+0x2ba>
 8000cd6:	1e7b      	subs	r3, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x10a>
 8000cdc:	e10d      	b.n	8000efa <__aeabi_fsub+0x326>
 8000cde:	2fff      	cmp	r7, #255	; 0xff
 8000ce0:	d071      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	e098      	b.n	8000e18 <__aeabi_fsub+0x244>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x118>
 8000cea:	e0a7      	b.n	8000e3c <__aeabi_fsub+0x268>
 8000cec:	1e42      	subs	r2, r0, #1
 8000cee:	2801      	cmp	r0, #1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x120>
 8000cf2:	e0e6      	b.n	8000ec2 <__aeabi_fsub+0x2ee>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d068      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	e78f      	b.n	8000c1c <__aeabi_fsub+0x48>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4041      	eors	r1, r0
 8000d00:	42a1      	cmp	r1, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000d04:	e77f      	b.n	8000c06 <__aeabi_fsub+0x32>
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	4240      	negs	r0, r0
 8000d0a:	4680      	mov	r8, r0
 8000d0c:	44a8      	add	r8, r5
 8000d0e:	4640      	mov	r0, r8
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d038      	beq.n	8000d86 <__aeabi_fsub+0x1b2>
 8000d14:	1b51      	subs	r1, r2, r5
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x148>
 8000d1a:	e0ae      	b.n	8000e7a <__aeabi_fsub+0x2a6>
 8000d1c:	2aff      	cmp	r2, #255	; 0xff
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x14e>
 8000d20:	e0df      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	4660      	mov	r0, ip
 8000d26:	04db      	lsls	r3, r3, #19
 8000d28:	4318      	orrs	r0, r3
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	291b      	cmp	r1, #27
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_fsub+0x15e>
 8000d30:	e0d9      	b.n	8000ee6 <__aeabi_fsub+0x312>
 8000d32:	2001      	movs	r0, #1
 8000d34:	0015      	movs	r5, r2
 8000d36:	1980      	adds	r0, r0, r6
 8000d38:	e7b1      	b.n	8000c9e <__aeabi_fsub+0xca>
 8000d3a:	20fe      	movs	r0, #254	; 0xfe
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d171      	bne.n	8000e26 <__aeabi_fsub+0x252>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x174>
 8000d46:	e0a6      	b.n	8000e96 <__aeabi_fsub+0x2c2>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x17c>
 8000d4e:	e0d9      	b.n	8000f04 <__aeabi_fsub+0x330>
 8000d50:	2200      	movs	r2, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x184>
 8000d56:	e788      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d58:	1b98      	subs	r0, r3, r6
 8000d5a:	0143      	lsls	r3, r0, #5
 8000d5c:	d400      	bmi.n	8000d60 <__aeabi_fsub+0x18c>
 8000d5e:	e0e1      	b.n	8000f24 <__aeabi_fsub+0x350>
 8000d60:	4663      	mov	r3, ip
 8000d62:	000c      	movs	r4, r1
 8000d64:	1af0      	subs	r0, r6, r3
 8000d66:	e76f      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x19a>
 8000d6c:	e0b7      	b.n	8000ede <__aeabi_fsub+0x30a>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	2801      	cmp	r0, #1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1a4>
 8000d76:	e09c      	b.n	8000eb2 <__aeabi_fsub+0x2de>
 8000d78:	28ff      	cmp	r0, #255	; 0xff
 8000d7a:	d026      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	e788      	b.n	8000c92 <__aeabi_fsub+0xbe>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	2700      	movs	r7, #0
 8000d84:	e771      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d86:	20fe      	movs	r0, #254	; 0xfe
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	4210      	tst	r0, r2
 8000d8c:	d064      	beq.n	8000e58 <__aeabi_fsub+0x284>
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d0f6      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000d92:	0015      	movs	r5, r2
 8000d94:	4466      	add	r6, ip
 8000d96:	0870      	lsrs	r0, r6, #1
 8000d98:	0743      	lsls	r3, r0, #29
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fsub+0x1ca>
 8000d9c:	e756      	b.n	8000c4c <__aeabi_fsub+0x78>
 8000d9e:	08c3      	lsrs	r3, r0, #3
 8000da0:	2dff      	cmp	r5, #255	; 0xff
 8000da2:	d012      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	0a5f      	lsrs	r7, r3, #9
 8000da8:	b2ea      	uxtb	r2, r5
 8000daa:	e75e      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000dac:	4662      	mov	r2, ip
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000db2:	e096      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d008      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	03d2      	lsls	r2, r2, #15
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d004      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	4210      	tst	r0, r2
 8000dc4:	d101      	bne.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0d8      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000dce:	2780      	movs	r7, #128	; 0x80
 8000dd0:	03ff      	lsls	r7, r7, #15
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	027f      	lsls	r7, r7, #9
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	0a7f      	lsrs	r7, r7, #9
 8000dda:	e746      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000ddc:	2320      	movs	r3, #32
 8000dde:	003a      	movs	r2, r7
 8000de0:	1b45      	subs	r5, r0, r5
 8000de2:	0038      	movs	r0, r7
 8000de4:	3501      	adds	r5, #1
 8000de6:	40ea      	lsrs	r2, r5
 8000de8:	1b5d      	subs	r5, r3, r5
 8000dea:	40a8      	lsls	r0, r5
 8000dec:	1e43      	subs	r3, r0, #1
 8000dee:	4198      	sbcs	r0, r3
 8000df0:	2500      	movs	r5, #0
 8000df2:	4310      	orrs	r0, r2
 8000df4:	e728      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000df6:	2320      	movs	r3, #32
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	0032      	movs	r2, r6
 8000dfc:	409e      	lsls	r6, r3
 8000dfe:	40c2      	lsrs	r2, r0
 8000e00:	0030      	movs	r0, r6
 8000e02:	1e43      	subs	r3, r0, #1
 8000e04:	4198      	sbcs	r0, r3
 8000e06:	4310      	orrs	r0, r2
 8000e08:	e70c      	b.n	8000c24 <__aeabi_fsub+0x50>
 8000e0a:	2aff      	cmp	r2, #255	; 0xff
 8000e0c:	d0db      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	4660      	mov	r0, ip
 8000e12:	04db      	lsls	r3, r3, #19
 8000e14:	4318      	orrs	r0, r3
 8000e16:	4684      	mov	ip, r0
 8000e18:	2f1b      	cmp	r7, #27
 8000e1a:	dd56      	ble.n	8000eca <__aeabi_fsub+0x2f6>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0015      	movs	r5, r2
 8000e22:	1a30      	subs	r0, r6, r0
 8000e24:	e700      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000e26:	4663      	mov	r3, ip
 8000e28:	1b9f      	subs	r7, r3, r6
 8000e2a:	017b      	lsls	r3, r7, #5
 8000e2c:	d43d      	bmi.n	8000eaa <__aeabi_fsub+0x2d6>
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000e32:	e6fe      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000e34:	2400      	movs	r4, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e716      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e3c:	0005      	movs	r5, r0
 8000e3e:	e7af      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e40:	0032      	movs	r2, r6
 8000e42:	4643      	mov	r3, r8
 8000e44:	4641      	mov	r1, r8
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	2320      	movs	r3, #32
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	409e      	lsls	r6, r3
 8000e4e:	0030      	movs	r0, r6
 8000e50:	1e43      	subs	r3, r0, #1
 8000e52:	4198      	sbcs	r0, r3
 8000e54:	4310      	orrs	r0, r2
 8000e56:	e721      	b.n	8000c9c <__aeabi_fsub+0xc8>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d1a7      	bne.n	8000dac <__aeabi_fsub+0x1d8>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d059      	beq.n	8000f16 <__aeabi_fsub+0x342>
 8000e62:	2200      	movs	r2, #0
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x296>
 8000e68:	e6ff      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	4460      	add	r0, ip
 8000e6e:	0143      	lsls	r3, r0, #5
 8000e70:	d592      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <__aeabi_fsub+0x348>)
 8000e74:	3501      	adds	r5, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	e78e      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d047      	beq.n	8000f10 <__aeabi_fsub+0x33c>
 8000e80:	1e4b      	subs	r3, r1, #1
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d015      	beq.n	8000eb2 <__aeabi_fsub+0x2de>
 8000e86:	29ff      	cmp	r1, #255	; 0xff
 8000e88:	d02b      	beq.n	8000ee2 <__aeabi_fsub+0x30e>
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	e74e      	b.n	8000d2c <__aeabi_fsub+0x158>
 8000e8e:	000c      	movs	r4, r1
 8000e90:	464b      	mov	r3, r9
 8000e92:	003d      	movs	r5, r7
 8000e94:	e784      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e96:	4662      	mov	r2, ip
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d18b      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d192      	bne.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ea0:	2780      	movs	r7, #128	; 0x80
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	03ff      	lsls	r7, r7, #15
 8000ea8:	e6df      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	000c      	movs	r4, r1
 8000eae:	1af7      	subs	r7, r6, r3
 8000eb0:	e6bf      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	4460      	add	r0, ip
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x2ea>
 8000ebc:	e76c      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ebe:	2502      	movs	r5, #2
 8000ec0:	e6f2      	b.n	8000ca8 <__aeabi_fsub+0xd4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2501      	movs	r5, #1
 8000ec6:	1b98      	subs	r0, r3, r6
 8000ec8:	e6ae      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000eca:	2320      	movs	r3, #32
 8000ecc:	4664      	mov	r4, ip
 8000ece:	4660      	mov	r0, ip
 8000ed0:	40fc      	lsrs	r4, r7
 8000ed2:	1bdf      	subs	r7, r3, r7
 8000ed4:	40b8      	lsls	r0, r7
 8000ed6:	1e43      	subs	r3, r0, #1
 8000ed8:	4198      	sbcs	r0, r3
 8000eda:	4320      	orrs	r0, r4
 8000edc:	e79f      	b.n	8000e1e <__aeabi_fsub+0x24a>
 8000ede:	0005      	movs	r5, r0
 8000ee0:	e75e      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	e771      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	4665      	mov	r5, ip
 8000eea:	4660      	mov	r0, ip
 8000eec:	40cd      	lsrs	r5, r1
 8000eee:	1a59      	subs	r1, r3, r1
 8000ef0:	4088      	lsls	r0, r1
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	4328      	orrs	r0, r5
 8000ef8:	e71c      	b.n	8000d34 <__aeabi_fsub+0x160>
 8000efa:	4663      	mov	r3, ip
 8000efc:	000c      	movs	r4, r1
 8000efe:	2501      	movs	r5, #1
 8000f00:	1af0      	subs	r0, r6, r3
 8000f02:	e691      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d095      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000f08:	000c      	movs	r4, r1
 8000f0a:	464f      	mov	r7, r9
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	e6ac      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f10:	464b      	mov	r3, r9
 8000f12:	000d      	movs	r5, r1
 8000f14:	e744      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000f16:	464f      	mov	r7, r9
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f1c:	fbffffff 	.word	0xfbffffff
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x356>
 8000f28:	e736      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e69c      	b.n	8000c6a <__aeabi_fsub+0x96>

08000f30 <__aeabi_fcmpun>:
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	024a      	lsls	r2, r1, #9
 8000f34:	0040      	lsls	r0, r0, #1
 8000f36:	0049      	lsls	r1, r1, #1
 8000f38:	0a5b      	lsrs	r3, r3, #9
 8000f3a:	0a52      	lsrs	r2, r2, #9
 8000f3c:	0e09      	lsrs	r1, r1, #24
 8000f3e:	0e00      	lsrs	r0, r0, #24
 8000f40:	28ff      	cmp	r0, #255	; 0xff
 8000f42:	d006      	beq.n	8000f52 <__aeabi_fcmpun+0x22>
 8000f44:	2000      	movs	r0, #0
 8000f46:	29ff      	cmp	r1, #255	; 0xff
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	1e53      	subs	r3, r2, #1
 8000f4c:	419a      	sbcs	r2, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	4770      	bx	lr
 8000f52:	38fe      	subs	r0, #254	; 0xfe
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1fb      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f58:	e7f4      	b.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <__aeabi_f2iz>:
 8000f5c:	0241      	lsls	r1, r0, #9
 8000f5e:	0042      	lsls	r2, r0, #1
 8000f60:	0fc3      	lsrs	r3, r0, #31
 8000f62:	0a49      	lsrs	r1, r1, #9
 8000f64:	2000      	movs	r0, #0
 8000f66:	0e12      	lsrs	r2, r2, #24
 8000f68:	2a7e      	cmp	r2, #126	; 0x7e
 8000f6a:	dd03      	ble.n	8000f74 <__aeabi_f2iz+0x18>
 8000f6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f6e:	dd02      	ble.n	8000f76 <__aeabi_f2iz+0x1a>
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <__aeabi_f2iz+0x3c>)
 8000f72:	1898      	adds	r0, r3, r2
 8000f74:	4770      	bx	lr
 8000f76:	2080      	movs	r0, #128	; 0x80
 8000f78:	0400      	lsls	r0, r0, #16
 8000f7a:	4301      	orrs	r1, r0
 8000f7c:	2a95      	cmp	r2, #149	; 0x95
 8000f7e:	dc07      	bgt.n	8000f90 <__aeabi_f2iz+0x34>
 8000f80:	2096      	movs	r0, #150	; 0x96
 8000f82:	1a82      	subs	r2, r0, r2
 8000f84:	40d1      	lsrs	r1, r2
 8000f86:	4248      	negs	r0, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f3      	bne.n	8000f74 <__aeabi_f2iz+0x18>
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	e7f1      	b.n	8000f74 <__aeabi_f2iz+0x18>
 8000f90:	3a96      	subs	r2, #150	; 0x96
 8000f92:	4091      	lsls	r1, r2
 8000f94:	e7f7      	b.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	7fffffff 	.word	0x7fffffff

08000f9c <__aeabi_i2f>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d013      	beq.n	8000fca <__aeabi_i2f+0x2e>
 8000fa2:	17c3      	asrs	r3, r0, #31
 8000fa4:	18c6      	adds	r6, r0, r3
 8000fa6:	405e      	eors	r6, r3
 8000fa8:	0fc4      	lsrs	r4, r0, #31
 8000faa:	0030      	movs	r0, r6
 8000fac:	f000 f886 	bl	80010bc <__clzsi2>
 8000fb0:	239e      	movs	r3, #158	; 0x9e
 8000fb2:	0005      	movs	r5, r0
 8000fb4:	1a1b      	subs	r3, r3, r0
 8000fb6:	2b96      	cmp	r3, #150	; 0x96
 8000fb8:	dc0f      	bgt.n	8000fda <__aeabi_i2f+0x3e>
 8000fba:	2808      	cmp	r0, #8
 8000fbc:	dd01      	ble.n	8000fc2 <__aeabi_i2f+0x26>
 8000fbe:	3d08      	subs	r5, #8
 8000fc0:	40ae      	lsls	r6, r5
 8000fc2:	0276      	lsls	r6, r6, #9
 8000fc4:	0a76      	lsrs	r6, r6, #9
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	e002      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	2600      	movs	r6, #0
 8000fd0:	05c0      	lsls	r0, r0, #23
 8000fd2:	4330      	orrs	r0, r6
 8000fd4:	07e4      	lsls	r4, r4, #31
 8000fd6:	4320      	orrs	r0, r4
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fda:	2b99      	cmp	r3, #153	; 0x99
 8000fdc:	dd0c      	ble.n	8000ff8 <__aeabi_i2f+0x5c>
 8000fde:	2205      	movs	r2, #5
 8000fe0:	0031      	movs	r1, r6
 8000fe2:	1a12      	subs	r2, r2, r0
 8000fe4:	40d1      	lsrs	r1, r2
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	0001      	movs	r1, r0
 8000fea:	0030      	movs	r0, r6
 8000fec:	311b      	adds	r1, #27
 8000fee:	4088      	lsls	r0, r1
 8000ff0:	1e41      	subs	r1, r0, #1
 8000ff2:	4188      	sbcs	r0, r1
 8000ff4:	4302      	orrs	r2, r0
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	2d05      	cmp	r5, #5
 8000ffa:	dc12      	bgt.n	8001022 <__aeabi_i2f+0x86>
 8000ffc:	0031      	movs	r1, r6
 8000ffe:	4f0d      	ldr	r7, [pc, #52]	; (8001034 <__aeabi_i2f+0x98>)
 8001000:	4039      	ands	r1, r7
 8001002:	0772      	lsls	r2, r6, #29
 8001004:	d009      	beq.n	800101a <__aeabi_i2f+0x7e>
 8001006:	200f      	movs	r0, #15
 8001008:	4030      	ands	r0, r6
 800100a:	2804      	cmp	r0, #4
 800100c:	d005      	beq.n	800101a <__aeabi_i2f+0x7e>
 800100e:	3104      	adds	r1, #4
 8001010:	014a      	lsls	r2, r1, #5
 8001012:	d502      	bpl.n	800101a <__aeabi_i2f+0x7e>
 8001014:	239f      	movs	r3, #159	; 0x9f
 8001016:	4039      	ands	r1, r7
 8001018:	1b5b      	subs	r3, r3, r5
 800101a:	0189      	lsls	r1, r1, #6
 800101c:	0a4e      	lsrs	r6, r1, #9
 800101e:	b2d8      	uxtb	r0, r3
 8001020:	e7d6      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8001022:	1f6a      	subs	r2, r5, #5
 8001024:	4096      	lsls	r6, r2
 8001026:	0031      	movs	r1, r6
 8001028:	4f02      	ldr	r7, [pc, #8]	; (8001034 <__aeabi_i2f+0x98>)
 800102a:	4039      	ands	r1, r7
 800102c:	0772      	lsls	r2, r6, #29
 800102e:	d0f4      	beq.n	800101a <__aeabi_i2f+0x7e>
 8001030:	e7e9      	b.n	8001006 <__aeabi_i2f+0x6a>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	fbffffff 	.word	0xfbffffff

08001038 <__aeabi_ui2f>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	1e05      	subs	r5, r0, #0
 800103c:	d00e      	beq.n	800105c <__aeabi_ui2f+0x24>
 800103e:	f000 f83d 	bl	80010bc <__clzsi2>
 8001042:	239e      	movs	r3, #158	; 0x9e
 8001044:	0004      	movs	r4, r0
 8001046:	1a1b      	subs	r3, r3, r0
 8001048:	2b96      	cmp	r3, #150	; 0x96
 800104a:	dc0c      	bgt.n	8001066 <__aeabi_ui2f+0x2e>
 800104c:	2808      	cmp	r0, #8
 800104e:	dd01      	ble.n	8001054 <__aeabi_ui2f+0x1c>
 8001050:	3c08      	subs	r4, #8
 8001052:	40a5      	lsls	r5, r4
 8001054:	026d      	lsls	r5, r5, #9
 8001056:	0a6d      	lsrs	r5, r5, #9
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	e001      	b.n	8001060 <__aeabi_ui2f+0x28>
 800105c:	2000      	movs	r0, #0
 800105e:	2500      	movs	r5, #0
 8001060:	05c0      	lsls	r0, r0, #23
 8001062:	4328      	orrs	r0, r5
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	2b99      	cmp	r3, #153	; 0x99
 8001068:	dd09      	ble.n	800107e <__aeabi_ui2f+0x46>
 800106a:	0002      	movs	r2, r0
 800106c:	0029      	movs	r1, r5
 800106e:	321b      	adds	r2, #27
 8001070:	4091      	lsls	r1, r2
 8001072:	1e4a      	subs	r2, r1, #1
 8001074:	4191      	sbcs	r1, r2
 8001076:	2205      	movs	r2, #5
 8001078:	1a12      	subs	r2, r2, r0
 800107a:	40d5      	lsrs	r5, r2
 800107c:	430d      	orrs	r5, r1
 800107e:	2c05      	cmp	r4, #5
 8001080:	dc12      	bgt.n	80010a8 <__aeabi_ui2f+0x70>
 8001082:	0029      	movs	r1, r5
 8001084:	4e0c      	ldr	r6, [pc, #48]	; (80010b8 <__aeabi_ui2f+0x80>)
 8001086:	4031      	ands	r1, r6
 8001088:	076a      	lsls	r2, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 800108c:	200f      	movs	r0, #15
 800108e:	4028      	ands	r0, r5
 8001090:	2804      	cmp	r0, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 8001094:	3104      	adds	r1, #4
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_ui2f+0x68>
 800109a:	239f      	movs	r3, #159	; 0x9f
 800109c:	4031      	ands	r1, r6
 800109e:	1b1b      	subs	r3, r3, r4
 80010a0:	0189      	lsls	r1, r1, #6
 80010a2:	0a4d      	lsrs	r5, r1, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7db      	b.n	8001060 <__aeabi_ui2f+0x28>
 80010a8:	1f62      	subs	r2, r4, #5
 80010aa:	4095      	lsls	r5, r2
 80010ac:	0029      	movs	r1, r5
 80010ae:	4e02      	ldr	r6, [pc, #8]	; (80010b8 <__aeabi_ui2f+0x80>)
 80010b0:	4031      	ands	r1, r6
 80010b2:	076a      	lsls	r2, r5, #29
 80010b4:	d0f4      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 80010b6:	e7e9      	b.n	800108c <__aeabi_ui2f+0x54>
 80010b8:	fbffffff 	.word	0xfbffffff

080010bc <__clzsi2>:
 80010bc:	211c      	movs	r1, #28
 80010be:	2301      	movs	r3, #1
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d301      	bcc.n	80010ca <__clzsi2+0xe>
 80010c6:	0c00      	lsrs	r0, r0, #16
 80010c8:	3910      	subs	r1, #16
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	4298      	cmp	r0, r3
 80010ce:	d301      	bcc.n	80010d4 <__clzsi2+0x18>
 80010d0:	0a00      	lsrs	r0, r0, #8
 80010d2:	3908      	subs	r1, #8
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d301      	bcc.n	80010de <__clzsi2+0x22>
 80010da:	0900      	lsrs	r0, r0, #4
 80010dc:	3904      	subs	r1, #4
 80010de:	a202      	add	r2, pc, #8	; (adr r2, 80010e8 <__clzsi2+0x2c>)
 80010e0:	5c10      	ldrb	r0, [r2, r0]
 80010e2:	1840      	adds	r0, r0, r1
 80010e4:	4770      	bx	lr
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	02020304 	.word	0x02020304
 80010ec:	01010101 	.word	0x01010101
	...

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fe35 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 fa6d 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 fbad 	bl	8001864 <MX_GPIO_Init>
  MX_ADC1_Init();
 800110a:	f000 fabd 	bl	8001688 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800110e:	4bd4      	ldr	r3, [pc, #848]	; (8001460 <main+0x368>)
 8001110:	0018      	movs	r0, r3
 8001112:	f001 f9d5 	bl	80024c0 <HAL_ADC_Start_IT>
  HAL_Delay(5);
 8001116:	2005      	movs	r0, #5
 8001118:	f000 feae 	bl	8001e78 <HAL_Delay>
  Sensor_SaveProfile();
 800111c:	f000 fce4 	bl	8001ae8 <Sensor_SaveProfile>

  uint32_t sensor_dist = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  uint32_t sensor_int_dist = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  uint32_t alarm_timestamp = HAL_GetTick();
 8001128:	f000 fe9c 	bl	8001e64 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t click = 0;
 8001130:	2323      	movs	r3, #35	; 0x23
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
  uint8_t under_pressure = 0;
 8001138:	2322      	movs	r3, #34	; 0x22
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  GPIO_PinState btn_state;
  uint8_t btn_start = 0;
 8001140:	2321      	movs	r3, #33	; 0x21
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
  uint32_t btn_timestamp;
  
  uint8_t config_flag = 0;
 8001148:	231b      	movs	r3, #27
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  uint8_t blink = 0;
 8001150:	231a      	movs	r3, #26
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

  uint8_t motor_state = 0, motor_transition = 0;
 8001158:	2319      	movs	r3, #25
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	2318      	movs	r3, #24
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_IT(&hadc1);
 8001168:	4bbd      	ldr	r3, [pc, #756]	; (8001460 <main+0x368>)
 800116a:	0018      	movs	r0, r3
 800116c:	f001 f9a8 	bl	80024c0 <HAL_ADC_Start_IT>
    HAL_Delay(5); // Cambiar delay por flag
 8001170:	2005      	movs	r0, #5
 8001172:	f000 fe81 	bl	8001e78 <HAL_Delay>

    if (Get_SensorDist(sensor_val, (uint32_t *)sensor_sav) > tolerance) {
 8001176:	4abb      	ldr	r2, [pc, #748]	; (8001464 <main+0x36c>)
 8001178:	4bbb      	ldr	r3, [pc, #748]	; (8001468 <main+0x370>)
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fbf9 	bl	8001974 <Get_SensorDist>
 8001182:	0002      	movs	r2, r0
 8001184:	4bb9      	ldr	r3, [pc, #740]	; (800146c <main+0x374>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d907      	bls.n	800119c <main+0xa4>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	48b7      	ldr	r0, [pc, #732]	; (8001470 <main+0x378>)
 8001192:	2201      	movs	r2, #1
 8001194:	0019      	movs	r1, r3
 8001196:	f002 f830 	bl	80031fa <HAL_GPIO_WritePin>
 800119a:	e006      	b.n	80011aa <main+0xb2>
    }
    else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	48b3      	ldr	r0, [pc, #716]	; (8001470 <main+0x378>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	0019      	movs	r1, r3
 80011a6:	f002 f828 	bl	80031fa <HAL_GPIO_WritePin>
    // Leer botones
    // Medir tiempo con HAL_GetTick(). Si el tiempo de presión está entre un rango acotado: click
    // Si el tiempo de presión supera una cantidad: presión extendida
    // Estando dentro de CONFIG, no salir hasta que se suelte el botón

    btn_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80011aa:	250b      	movs	r5, #11
 80011ac:	197c      	adds	r4, r7, r5
 80011ae:	4bb1      	ldr	r3, [pc, #708]	; (8001474 <main+0x37c>)
 80011b0:	2108      	movs	r1, #8
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 f804 	bl	80031c0 <HAL_GPIO_ReadPin>
 80011b8:	0003      	movs	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]

    if (btn_state == GPIO_PIN_RESET) {
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d119      	bne.n	80011f8 <main+0x100>
      if (btn_start == 0) {
 80011c4:	2221      	movs	r2, #33	; 0x21
 80011c6:	18bb      	adds	r3, r7, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <main+0xe4>
        btn_start = 1;
 80011ce:	18bb      	adds	r3, r7, r2
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
        btn_timestamp = HAL_GetTick();
 80011d4:	f000 fe46 	bl	8001e64 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61fb      	str	r3, [r7, #28]
      }

      if (HAL_GetTick() - btn_timestamp > UNDER_PRESS_SEC) {
 80011dc:	f000 fe42 	bl	8001e64 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	1ad2      	subs	r2, r2, r3
 80011e6:	23fa      	movs	r3, #250	; 0xfa
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d927      	bls.n	800123e <main+0x146>
        under_pressure = 1;
 80011ee:	2322      	movs	r3, #34	; 0x22
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e022      	b.n	800123e <main+0x146>
      }
    }
    else {
      if (btn_start == 1) {
 80011f8:	2221      	movs	r2, #33	; 0x21
 80011fa:	18bb      	adds	r3, r7, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d119      	bne.n	8001236 <main+0x13e>
        btn_start = 0;
 8001202:	18bb      	adds	r3, r7, r2
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
        uint32_t time_pressed = HAL_GetTick() - btn_timestamp;
 8001208:	f000 fe2c 	bl	8001e64 <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	607b      	str	r3, [r7, #4]
        if (time_pressed > CLICK_MIN_SEC && time_pressed < CLICK_MAX_SEC) { 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b32      	cmp	r3, #50	; 0x32
 8001218:	d908      	bls.n	800122c <main+0x134>
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	23fa      	movs	r3, #250	; 0xfa
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d203      	bcs.n	800122c <main+0x134>
          click = 1;
 8001224:	2323      	movs	r3, #35	; 0x23
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
        }

        under_pressure = 0;
 800122c:	2322      	movs	r3, #34	; 0x22
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e003      	b.n	800123e <main+0x146>
      }
      else {
        click = 0;
 8001236:	2323      	movs	r3, #35	; 0x23
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
      }
    }

    // FSM
    switch (state)
 800123e:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <main+0x380>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b04      	cmp	r3, #4
 8001244:	d900      	bls.n	8001248 <main+0x150>
 8001246:	e1ba      	b.n	80015be <main+0x4c6>
 8001248:	009a      	lsls	r2, r3, #2
 800124a:	4b8c      	ldr	r3, [pc, #560]	; (800147c <main+0x384>)
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	469f      	mov	pc, r3
    {
    case IDLE:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <main+0x37c>)
 8001254:	2200      	movs	r2, #0
 8001256:	2120      	movs	r1, #32
 8001258:	0018      	movs	r0, r3
 800125a:	f001 ffce 	bl	80031fa <HAL_GPIO_WritePin>
      if (click) {
 800125e:	2323      	movs	r3, #35	; 0x23
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <main+0x17e>

        prev_state = IDLE;
 8001268:	4b85      	ldr	r3, [pc, #532]	; (8001480 <main+0x388>)
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
        state = ON;
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <main+0x380>)
 8001270:	2201      	movs	r2, #1
 8001272:	801a      	strh	r2, [r3, #0]
      else if (under_pressure) {
        prev_state = IDLE;
        state = CONFIG;
      }
      
      break;
 8001274:	e19a      	b.n	80015ac <main+0x4b4>
      else if (under_pressure) {
 8001276:	2322      	movs	r3, #34	; 0x22
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d100      	bne.n	8001282 <main+0x18a>
 8001280:	e194      	b.n	80015ac <main+0x4b4>
        prev_state = IDLE;
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <main+0x388>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
        state = CONFIG;
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <main+0x380>)
 800128a:	2203      	movs	r2, #3
 800128c:	801a      	strh	r2, [r3, #0]
      break;
 800128e:	e18d      	b.n	80015ac <main+0x4b4>

    case ON:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001290:	4b78      	ldr	r3, [pc, #480]	; (8001474 <main+0x37c>)
 8001292:	2201      	movs	r2, #1
 8001294:	2120      	movs	r1, #32
 8001296:	0018      	movs	r0, r3
 8001298:	f001 ffaf 	bl	80031fa <HAL_GPIO_WritePin>
      
      sensor_dist = Get_SensorDist(sensor_val, (uint32_t *)sensor_sav);
 800129c:	4a71      	ldr	r2, [pc, #452]	; (8001464 <main+0x36c>)
 800129e:	4b72      	ldr	r3, [pc, #456]	; (8001468 <main+0x370>)
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fb66 	bl	8001974 <Get_SensorDist>
 80012a8:	0003      	movs	r3, r0
 80012aa:	613b      	str	r3, [r7, #16]
      sensor_int_dist = Get_InternalDist(sensor_val);
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <main+0x370>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 fbac 	bl	8001a0c <Get_InternalDist>
 80012b4:	0003      	movs	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]

      if (sensor_dist > tolerance && sensor_int_dist >= INTERNAL_DIST_THR) {
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <main+0x374>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d90c      	bls.n	80012dc <main+0x1e4>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b13      	cmp	r3, #19
 80012c6:	d909      	bls.n	80012dc <main+0x1e4>
        prev_state = ON;
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <main+0x388>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	801a      	strh	r2, [r3, #0]
        alarm_timestamp = HAL_GetTick();
 80012ce:	f000 fdc9 	bl	8001e64 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
        state = DIST_ALERT;
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <main+0x380>)
 80012d8:	2202      	movs	r2, #2
 80012da:	801a      	strh	r2, [r3, #0]
      }

      if (click) {
 80012dc:	2323      	movs	r3, #35	; 0x23
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <main+0x1fc>
        prev_state = ON;
 80012e6:	4b66      	ldr	r3, [pc, #408]	; (8001480 <main+0x388>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	801a      	strh	r2, [r3, #0]
        state = IDLE;
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <main+0x380>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	801a      	strh	r2, [r3, #0]
      }
      else if (under_pressure) {
        prev_state = ON;
        state = CONFIG;
      }
      break;
 80012f2:	e15d      	b.n	80015b0 <main+0x4b8>
      else if (under_pressure) {
 80012f4:	2322      	movs	r3, #34	; 0x22
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d100      	bne.n	8001300 <main+0x208>
 80012fe:	e157      	b.n	80015b0 <main+0x4b8>
        prev_state = ON;
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <main+0x388>)
 8001302:	2201      	movs	r2, #1
 8001304:	801a      	strh	r2, [r3, #0]
        state = CONFIG;
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <main+0x380>)
 8001308:	2203      	movs	r2, #3
 800130a:	801a      	strh	r2, [r3, #0]
      break;
 800130c:	e150      	b.n	80015b0 <main+0x4b8>

    case DIST_ALERT:
      if (HAL_GetTick() - alarm_timestamp > ALERT_TIMEOUT) {
 800130e:	f000 fda9 	bl	8001e64 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <main+0x38c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d909      	bls.n	8001332 <main+0x23a>
        state = ALARM;
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <main+0x380>)
 8001320:	2204      	movs	r2, #4
 8001322:	801a      	strh	r2, [r3, #0]
        prev_state = DIST_ALERT;
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <main+0x388>)
 8001326:	2202      	movs	r2, #2
 8001328:	801a      	strh	r2, [r3, #0]
        motor_transition = 1;
 800132a:	2318      	movs	r3, #24
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
      }

      sensor_dist = Get_SensorDist(sensor_val, (uint32_t *)sensor_sav);
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <main+0x36c>)
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <main+0x370>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f000 fb1b 	bl	8001974 <Get_SensorDist>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]
      sensor_int_dist = Get_InternalDist(sensor_val);
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <main+0x370>)
 8001344:	0018      	movs	r0, r3
 8001346:	f000 fb61 	bl	8001a0c <Get_InternalDist>
 800134a:	0003      	movs	r3, r0
 800134c:	60fb      	str	r3, [r7, #12]
      if (sensor_dist <= tolerance || sensor_int_dist < INTERNAL_DIST_THR) {
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <main+0x374>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d902      	bls.n	800135e <main+0x266>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b13      	cmp	r3, #19
 800135c:	d805      	bhi.n	800136a <main+0x272>
        state = ON;
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <main+0x380>)
 8001360:	2201      	movs	r2, #1
 8001362:	801a      	strh	r2, [r3, #0]
        prev_state = DIST_ALERT;
 8001364:	4b46      	ldr	r3, [pc, #280]	; (8001480 <main+0x388>)
 8001366:	2202      	movs	r2, #2
 8001368:	801a      	strh	r2, [r3, #0]
      }

      if (click) {
 800136a:	2323      	movs	r3, #35	; 0x23
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d100      	bne.n	8001376 <main+0x27e>
 8001374:	e11e      	b.n	80015b4 <main+0x4bc>
        prev_state = DIST_ALERT;
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <main+0x388>)
 8001378:	2202      	movs	r2, #2
 800137a:	801a      	strh	r2, [r3, #0]
        state = IDLE;
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <main+0x380>)
 800137e:	2200      	movs	r2, #0
 8001380:	801a      	strh	r2, [r3, #0]
      }
      break;
 8001382:	e117      	b.n	80015b4 <main+0x4bc>

    case CONFIG:
      if (!under_pressure) {
 8001384:	2322      	movs	r3, #34	; 0x22
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <main+0x2b6>
        state = prev_state;
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <main+0x388>)
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <main+0x380>)
 8001394:	801a      	strh	r2, [r3, #0]
        prev_state = CONFIG;
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <main+0x388>)
 8001398:	2203      	movs	r2, #3
 800139a:	801a      	strh	r2, [r3, #0]
        config_flag = 0;
 800139c:	231b      	movs	r3, #27
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
        blink = 0;
 80013a4:	231a      	movs	r3, #26
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
            blink = 1;
          }
        }
      }
      break;
 80013ac:	e104      	b.n	80015b8 <main+0x4c0>
        if (config_flag == 0) {          
 80013ae:	241b      	movs	r4, #27
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10c      	bne.n	80013d2 <main+0x2da>
          HAL_ADC_Start_IT(&hadc1);
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <main+0x368>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 f880 	bl	80024c0 <HAL_ADC_Start_IT>
          HAL_Delay(5);
 80013c0:	2005      	movs	r0, #5
 80013c2:	f000 fd59 	bl	8001e78 <HAL_Delay>
          Sensor_SaveProfile();
 80013c6:	f000 fb8f 	bl	8001ae8 <Sensor_SaveProfile>
          config_flag = 1;
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
      break;
 80013d0:	e0f2      	b.n	80015b8 <main+0x4c0>
          if (!blink) {
 80013d2:	241a      	movs	r4, #26
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d000      	beq.n	80013de <main+0x2e6>
 80013dc:	e0ec      	b.n	80015b8 <main+0x4c0>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <main+0x37c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	2120      	movs	r1, #32
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 ff08 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 80013ea:	2064      	movs	r0, #100	; 0x64
 80013ec:	f000 fd44 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x37c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	2120      	movs	r1, #32
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 feff 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f000 fd3b 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <main+0x37c>)
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	0018      	movs	r0, r3
 800140a:	f001 fef6 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 800140e:	2064      	movs	r0, #100	; 0x64
 8001410:	f000 fd32 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <main+0x37c>)
 8001416:	2201      	movs	r2, #1
 8001418:	2120      	movs	r1, #32
 800141a:	0018      	movs	r0, r3
 800141c:	f001 feed 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f000 fd29 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <main+0x37c>)
 8001428:	2200      	movs	r2, #0
 800142a:	2120      	movs	r1, #32
 800142c:	0018      	movs	r0, r3
 800142e:	f001 fee4 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f000 fd20 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <main+0x37c>)
 800143a:	2201      	movs	r2, #1
 800143c:	2120      	movs	r1, #32
 800143e:	0018      	movs	r0, r3
 8001440:	f001 fedb 	bl	80031fa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8001444:	2064      	movs	r0, #100	; 0x64
 8001446:	f000 fd17 	bl	8001e78 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <main+0x37c>)
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fed2 	bl	80031fa <HAL_GPIO_WritePin>
            blink = 1;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
      break;
 800145c:	e0ac      	b.n	80015b8 <main+0x4c0>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20000090 	.word	0x20000090
 8001464:	200000f4 	.word	0x200000f4
 8001468:	2000011c 	.word	0x2000011c
 800146c:	20000000 	.word	0x20000000
 8001470:	50000800 	.word	0x50000800
 8001474:	50000400 	.word	0x50000400
 8001478:	20000144 	.word	0x20000144
 800147c:	080048f8 	.word	0x080048f8
 8001480:	20000146 	.word	0x20000146
 8001484:	00000bb8 	.word	0x00000bb8

    case ALARM:
      // ENCENDER
      if (motor_transition) {
 8001488:	2218      	movs	r2, #24
 800148a:	18bb      	adds	r3, r7, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <main+0x3a8>
        motor_transition = 0;
 8001492:	18bb      	adds	r3, r7, r2
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
        motor_timestamp = HAL_GetTick();
 8001498:	f000 fce4 	bl	8001e64 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	617b      	str	r3, [r7, #20]
      }

      if (HAL_GetTick() - motor_timestamp > MOTOR_TOGGLE_TIME) {
 80014a0:	f000 fce0 	bl	8001e64 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d92c      	bls.n	800150c <main+0x414>
        if (motor_state) {
 80014b2:	2419      	movs	r4, #25
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <main+0x3ec>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <main+0x4d0>)
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fe99 	bl	80031fa <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <main+0x4d0>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fe93 	bl	80031fa <HAL_GPIO_WritePin>
          motor_transition = 1;
 80014d4:	2318      	movs	r3, #24
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
          motor_state = 0;
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e013      	b.n	800150c <main+0x414>
        }
        else {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <main+0x4d0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fe85 	bl	80031fa <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <main+0x4d0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0018      	movs	r0, r3
 80014f8:	f001 fe7f 	bl	80031fa <HAL_GPIO_WritePin>
          motor_transition = 1;
 80014fc:	2318      	movs	r3, #24
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
          motor_state = 1;
 8001504:	2319      	movs	r3, #25
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
        }
      }

      sensor_dist = Get_SensorDist(sensor_val, (uint32_t *)sensor_sav);
 800150c:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <main+0x4d4>)
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <main+0x4d8>)
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fa2e 	bl	8001974 <Get_SensorDist>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]
      sensor_int_dist = Get_InternalDist(sensor_val);
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <main+0x4d8>)
 800151e:	0018      	movs	r0, r3
 8001520:	f000 fa74 	bl	8001a0c <Get_InternalDist>
 8001524:	0003      	movs	r3, r0
 8001526:	60fb      	str	r3, [r7, #12]
      if (sensor_dist <= tolerance || sensor_int_dist < INTERNAL_DIST_THR) {
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <main+0x4dc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	429a      	cmp	r2, r3
 8001530:	d902      	bls.n	8001538 <main+0x440>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b13      	cmp	r3, #19
 8001536:	d819      	bhi.n	800156c <main+0x474>
        state = ON;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <main+0x4e0>)
 800153a:	2201      	movs	r2, #1
 800153c:	801a      	strh	r2, [r3, #0]
        prev_state = ALARM;
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <main+0x4e4>)
 8001540:	2204      	movs	r2, #4
 8001542:	801a      	strh	r2, [r3, #0]
        // Apagar motores
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <main+0x4d0>)
 8001546:	2200      	movs	r2, #0
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	0018      	movs	r0, r3
 800154c:	f001 fe55 	bl	80031fa <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <main+0x4d0>)
 8001552:	2200      	movs	r2, #0
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	0018      	movs	r0, r3
 8001558:	f001 fe4f 	bl	80031fa <HAL_GPIO_WritePin>
        motor_state = 0;
 800155c:	2319      	movs	r3, #25
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
        motor_transition = 0;
 8001564:	2318      	movs	r3, #24
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
      }

      if (click) {
 800156c:	2323      	movs	r3, #35	; 0x23
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d022      	beq.n	80015bc <main+0x4c4>
        motor_state = 0;
 8001576:	2319      	movs	r3, #25
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
        motor_transition = 0;
 800157e:	2318      	movs	r3, #24
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
        prev_state = ALARM;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <main+0x4e4>)
 8001588:	2204      	movs	r2, #4
 800158a:	801a      	strh	r2, [r3, #0]
        state = IDLE;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <main+0x4e0>)
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <main+0x4d0>)
 8001594:	2200      	movs	r2, #0
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	0018      	movs	r0, r3
 800159a:	f001 fe2e 	bl	80031fa <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <main+0x4d0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 fe28 	bl	80031fa <HAL_GPIO_WritePin>
      }
      break;
 80015aa:	e007      	b.n	80015bc <main+0x4c4>
      break;
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	e006      	b.n	80015be <main+0x4c6>
      break;
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	e004      	b.n	80015be <main+0x4c6>
      break;
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	e002      	b.n	80015be <main+0x4c6>
      break;
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	e000      	b.n	80015be <main+0x4c6>
      break;
 80015bc:	46c0      	nop			; (mov r8, r8)
    }

    HAL_Delay(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 fc5a 	bl	8001e78 <HAL_Delay>
    HAL_ADC_Start_IT(&hadc1);
 80015c4:	e5d0      	b.n	8001168 <main+0x70>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	50000800 	.word	0x50000800
 80015cc:	200000f4 	.word	0x200000f4
 80015d0:	2000011c 	.word	0x2000011c
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000144 	.word	0x20000144
 80015dc:	20000146 	.word	0x20000146

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b093      	sub	sp, #76	; 0x4c
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	2414      	movs	r4, #20
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	0018      	movs	r0, r3
 80015ec:	2334      	movs	r3, #52	; 0x34
 80015ee:	001a      	movs	r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	f002 fc57 	bl	8003ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	0018      	movs	r0, r3
 80015fa:	2310      	movs	r3, #16
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f002 fc50 	bl	8003ea4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	0018      	movs	r0, r3
 800160a:	f001 fe13 	bl	8003234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	0252      	lsls	r2, r2, #9
 800161a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161c:	0021      	movs	r1, r4
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2202      	movs	r2, #2
 8001622:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2203      	movs	r2, #3
 8001628:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2210      	movs	r2, #16
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0292      	lsls	r2, r2, #10
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0592      	lsls	r2, r2, #22
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	187b      	adds	r3, r7, r1
 8001648:	0018      	movs	r0, r3
 800164a:	f001 fe33 	bl	80032b4 <HAL_RCC_OscConfig>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001652:	f000 fa6d 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2202      	movs	r2, #2
 8001660:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2102      	movs	r1, #2
 8001672:	0018      	movs	r0, r3
 8001674:	f002 f92e 	bl	80038d4 <HAL_RCC_ClockConfig>
 8001678:	1e03      	subs	r3, r0, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800167c:	f000 fa58 	bl	8001b30 <Error_Handler>
  }
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b013      	add	sp, #76	; 0x4c
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	0018      	movs	r0, r3
 8001692:	230c      	movs	r3, #12
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f002 fc04 	bl	8003ea4 <memset>
  
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <MX_ADC1_Init+0x1ac>)
 800169e:	4a66      	ldr	r2, [pc, #408]	; (8001838 <MX_ADC1_Init+0x1b0>)
 80016a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	0352      	lsls	r2, r2, #13
 80016a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	0612      	lsls	r2, r2, #24
 80016bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016c0:	2204      	movs	r2, #4
 80016c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016ca:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016d8:	2201      	movs	r2, #1
 80016da:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016dc:	4b55      	ldr	r3, [pc, #340]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e8:	4b52      	ldr	r3, [pc, #328]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016ea:	222c      	movs	r2, #44	; 0x2c
 80016ec:	2100      	movs	r1, #0
 80016ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80016f6:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80016fe:	223c      	movs	r2, #60	; 0x3c
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <MX_ADC1_Init+0x1ac>)
 8001706:	2200      	movs	r2, #0
 8001708:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <MX_ADC1_Init+0x1ac>)
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fd2f 	bl	8002170 <HAL_ADC_Init>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001716:	f000 fa0b 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2201      	movs	r2, #1
 8001724:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001726:	1d3a      	adds	r2, r7, #4
 8001728:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_ADC1_Init+0x1ac>)
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f001 f87b 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001736:	f000 f9fb 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4a3f      	ldr	r2, [pc, #252]	; (800183c <MX_ADC1_Init+0x1b4>)
 800173e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	1d3a      	adds	r2, r7, #4
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <MX_ADC1_Init+0x1ac>)
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f001 f86e 	bl	8002828 <HAL_ADC_ConfigChannel>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001750:	f000 f9ee 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <MX_ADC1_Init+0x1b8>)
 8001758:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175a:	1d3a      	adds	r2, r7, #4
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_ADC1_Init+0x1ac>)
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f001 f861 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800176a:	f000 f9e1 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4a34      	ldr	r2, [pc, #208]	; (8001844 <MX_ADC1_Init+0x1bc>)
 8001772:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	1d3a      	adds	r2, r7, #4
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_ADC1_Init+0x1ac>)
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f001 f854 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001784:	f000 f9d4 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <MX_ADC1_Init+0x1c0>)
 800178c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	1d3a      	adds	r2, r7, #4
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_ADC1_Init+0x1ac>)
 8001792:	0011      	movs	r1, r2
 8001794:	0018      	movs	r0, r3
 8001796:	f001 f847 	bl	8002828 <HAL_ADC_ConfigChannel>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800179e:	f000 f9c7 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <MX_ADC1_Init+0x1c4>)
 80017a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	1d3a      	adds	r2, r7, #4
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80017ac:	0011      	movs	r1, r2
 80017ae:	0018      	movs	r0, r3
 80017b0:	f001 f83a 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80017b8:	f000 f9ba 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <MX_ADC1_Init+0x1c8>)
 80017c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c2:	1d3a      	adds	r2, r7, #4
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 f82d 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80017d2:	f000 f9ad 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <MX_ADC1_Init+0x1cc>)
 80017da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f001 f820 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 80017ec:	f000 f9a0 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <MX_ADC1_Init+0x1d0>)
 80017f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f6:	1d3a      	adds	r2, r7, #4
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_ADC1_Init+0x1ac>)
 80017fa:	0011      	movs	r1, r2
 80017fc:	0018      	movs	r0, r3
 80017fe:	f001 f813 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8001806:	f000 f993 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <MX_ADC1_Init+0x1d4>)
 800180e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001810:	1d3a      	adds	r2, r7, #4
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_ADC1_Init+0x1ac>)
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f001 f806 	bl	8002828 <HAL_ADC_ConfigChannel>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001820:	f000 f986 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  gConfig = sConfig;
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_ADC1_Init+0x1d8>)
 8001826:	1d3a      	adds	r2, r7, #4
 8001828:	ca13      	ldmia	r2!, {r0, r1, r4}
 800182a:	c313      	stmia	r3!, {r0, r1, r4}
  /* USER CODE END ADC1_Init 2 */

}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b005      	add	sp, #20
 8001832:	bd90      	pop	{r4, r7, pc}
 8001834:	20000090 	.word	0x20000090
 8001838:	40012400 	.word	0x40012400
 800183c:	04000002 	.word	0x04000002
 8001840:	08000004 	.word	0x08000004
 8001844:	0c000008 	.word	0x0c000008
 8001848:	10000010 	.word	0x10000010
 800184c:	14000020 	.word	0x14000020
 8001850:	18000040 	.word	0x18000040
 8001854:	1c000080 	.word	0x1c000080
 8001858:	44020000 	.word	0x44020000
 800185c:	48040000 	.word	0x48040000
 8001860:	20000148 	.word	0x20000148

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	2414      	movs	r4, #20
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2314      	movs	r3, #20
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f002 fb15 	bl	8003ea4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <MX_GPIO_Init+0x104>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <MX_GPIO_Init+0x104>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <MX_GPIO_Init+0x104>)
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <MX_GPIO_Init+0x104>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <MX_GPIO_Init+0x104>)
 8001898:	2120      	movs	r1, #32
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <MX_GPIO_Init+0x104>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2220      	movs	r2, #32
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <MX_GPIO_Init+0x104>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <MX_GPIO_Init+0x104>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <MX_GPIO_Init+0x104>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <MX_GPIO_Init+0x104>)
 80018c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <MX_GPIO_Init+0x104>)
 80018c8:	2102      	movs	r1, #2
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <MX_GPIO_Init+0x104>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80018da:	23e0      	movs	r3, #224	; 0xe0
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4823      	ldr	r0, [pc, #140]	; (800196c <MX_GPIO_Init+0x108>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	0019      	movs	r1, r3
 80018e4:	f001 fc89 	bl	80031fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <MX_GPIO_Init+0x10c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	21a0      	movs	r1, #160	; 0xa0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f001 fc83 	bl	80031fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	22e0      	movs	r2, #224	; 0xe0
 80018f8:	0052      	lsls	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	2201      	movs	r2, #1
 8001900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	193b      	adds	r3, r7, r4
 8001910:	4a16      	ldr	r2, [pc, #88]	; (800196c <MX_GPIO_Init+0x108>)
 8001912:	0019      	movs	r1, r3
 8001914:	0010      	movs	r0, r2
 8001916:	f001 faef 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	2208      	movs	r2, #8
 800191e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	193b      	adds	r3, r7, r4
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	193b      	adds	r3, r7, r4
 8001928:	2201      	movs	r2, #1
 800192a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	193b      	adds	r3, r7, r4
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <MX_GPIO_Init+0x10c>)
 8001930:	0019      	movs	r1, r3
 8001932:	0010      	movs	r0, r2
 8001934:	f001 fae0 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001938:	0021      	movs	r1, r4
 800193a:	187b      	adds	r3, r7, r1
 800193c:	22a0      	movs	r2, #160	; 0xa0
 800193e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2201      	movs	r2, #1
 8001944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	187b      	adds	r3, r7, r1
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <MX_GPIO_Init+0x10c>)
 8001956:	0019      	movs	r1, r3
 8001958:	0010      	movs	r0, r2
 800195a:	f001 facd 	bl	8002ef8 <HAL_GPIO_Init>

}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b00b      	add	sp, #44	; 0x2c
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000
 800196c:	50000800 	.word	0x50000800
 8001970:	50000400 	.word	0x50000400

08001974 <Get_SensorDist>:
  }

  return 0;
}

uint32_t Get_SensorDist(volatile uint32_t values[NUM_SENSORS], uint32_t save[NUM_SENSORS]) {
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  float dist = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001982:	230b      	movs	r3, #11
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e02c      	b.n	80019e6 <Get_SensorDist+0x72>
    dist += powf((float)values[i] - (float)save[i], 2);
 800198c:	250b      	movs	r5, #11
 800198e:	197b      	adds	r3, r7, r5
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	18d3      	adds	r3, r2, r3
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff fb4c 	bl	8001038 <__aeabi_ui2f>
 80019a0:	1c04      	adds	r4, r0, #0
 80019a2:	197b      	adds	r3, r7, r5
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff fb42 	bl	8001038 <__aeabi_ui2f>
 80019b4:	1c03      	adds	r3, r0, #0
 80019b6:	1c19      	adds	r1, r3, #0
 80019b8:	1c20      	adds	r0, r4, #0
 80019ba:	f7ff f90b 	bl	8000bd4 <__aeabi_fsub>
 80019be:	1c03      	adds	r3, r0, #0
 80019c0:	1c1a      	adds	r2, r3, #0
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	1c19      	adds	r1, r3, #0
 80019c8:	1c10      	adds	r0, r2, #0
 80019ca:	f002 fa73 	bl	8003eb4 <powf>
 80019ce:	1c03      	adds	r3, r0, #0
 80019d0:	1c19      	adds	r1, r3, #0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7fe fc72 	bl	80002bc <__aeabi_fadd>
 80019d8:	1c03      	adds	r3, r0, #0
 80019da:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 80019dc:	197b      	adds	r3, r7, r5
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	197b      	adds	r3, r7, r5
 80019e2:	3201      	adds	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	230b      	movs	r3, #11
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d9cd      	bls.n	800198c <Get_SensorDist+0x18>
  }

  return (uint32_t)sqrtf(dist);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1c18      	adds	r0, r3, #0
 80019f4:	f002 fab2 	bl	8003f5c <sqrtf>
 80019f8:	1c03      	adds	r3, r0, #0
 80019fa:	1c18      	adds	r0, r3, #0
 80019fc:	f7fe fc46 	bl	800028c <__aeabi_f2uiz>
 8001a00:	0003      	movs	r3, r0
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a0c <Get_InternalDist>:

uint32_t Get_InternalDist(volatile uint32_t values[NUM_SENSORS]) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  float mean, sum = 0.0, std = 0.0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001a1c:	2313      	movs	r3, #19
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e015      	b.n	8001a52 <Get_InternalDist+0x46>
    sum += (float)values[i];
 8001a26:	2413      	movs	r4, #19
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff faff 	bl	8001038 <__aeabi_ui2f>
 8001a3a:	1c03      	adds	r3, r0, #0
 8001a3c:	1c19      	adds	r1, r3, #0
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7fe fc3c 	bl	80002bc <__aeabi_fadd>
 8001a44:	1c03      	adds	r3, r0, #0
 8001a46:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	3201      	adds	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	2313      	movs	r3, #19
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d9e4      	bls.n	8001a26 <Get_InternalDist+0x1a>
  }
  mean = sum / NUM_SENSORS;
 8001a5c:	4921      	ldr	r1, [pc, #132]	; (8001ae4 <Get_InternalDist+0xd8>)
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_fdiv>
 8001a64:	1c03      	adds	r3, r0, #0
 8001a66:	60bb      	str	r3, [r7, #8]

  sum = 0.0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e022      	b.n	8001abc <Get_InternalDist+0xb0>
    sum += powf((float)values[i] - mean, 2);
 8001a76:	2412      	movs	r4, #18
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	18d3      	adds	r3, r2, r3
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fad7 	bl	8001038 <__aeabi_ui2f>
 8001a8a:	1c03      	adds	r3, r0, #0
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	1c18      	adds	r0, r3, #0
 8001a90:	f7ff f8a0 	bl	8000bd4 <__aeabi_fsub>
 8001a94:	1c03      	adds	r3, r0, #0
 8001a96:	1c1a      	adds	r2, r3, #0
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	05db      	lsls	r3, r3, #23
 8001a9c:	1c19      	adds	r1, r3, #0
 8001a9e:	1c10      	adds	r0, r2, #0
 8001aa0:	f002 fa08 	bl	8003eb4 <powf>
 8001aa4:	1c03      	adds	r3, r0, #0
 8001aa6:	1c19      	adds	r1, r3, #0
 8001aa8:	6978      	ldr	r0, [r7, #20]
 8001aaa:	f7fe fc07 	bl	80002bc <__aeabi_fadd>
 8001aae:	1c03      	adds	r3, r0, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	3201      	adds	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	2312      	movs	r3, #18
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	d9d7      	bls.n	8001a76 <Get_InternalDist+0x6a>
  }
  std = sqrtf(sum);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1c18      	adds	r0, r3, #0
 8001aca:	f002 fa47 	bl	8003f5c <sqrtf>
 8001ace:	1c03      	adds	r3, r0, #0
 8001ad0:	60fb      	str	r3, [r7, #12]

  return (uint32_t)std;
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7fe fbda 	bl	800028c <__aeabi_f2uiz>
 8001ad8:	0003      	movs	r3, r0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b007      	add	sp, #28
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	41200000 	.word	0x41200000

08001ae8 <Sensor_SaveProfile>:

void Sensor_SaveProfile() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e00e      	b.n	8001b14 <Sensor_SaveProfile+0x2c>
    sensor_sav[i] = sensor_val[i];
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <Sensor_SaveProfile+0x40>)
 8001b00:	0089      	lsls	r1, r1, #2
 8001b02:	58c9      	ldr	r1, [r1, r3]
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <Sensor_SaveProfile+0x44>)
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	50d1      	str	r1, [r2, r3]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	3201      	adds	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d9ec      	bls.n	8001af6 <Sensor_SaveProfile+0xe>
  }
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	2000011c 	.word	0x2000011c
 8001b2c:	200000f4 	.word	0x200000f4

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <Error_Handler+0x8>
	...

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2201      	movs	r2, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0549      	lsls	r1, r1, #21
 8001b64:	430a      	orrs	r2, r1
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	055b      	lsls	r3, r3, #21
 8001b70:	4013      	ands	r3, r2
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001b76:	23c0      	movs	r3, #192	; 0xc0
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f9a0 	bl	8001ec0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b093      	sub	sp, #76	; 0x4c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2334      	movs	r3, #52	; 0x34
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f002 f980 	bl	8003ea4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	2418      	movs	r4, #24
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	0018      	movs	r0, r3
 8001baa:	231c      	movs	r3, #28
 8001bac:	001a      	movs	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f002 f978 	bl	8003ea4 <memset>
  if(hadc->Instance==ADC1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <HAL_ADC_MspInit+0xf4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d15c      	bne.n	8001c78 <HAL_ADC_MspInit+0xec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	01d2      	lsls	r2, r2, #7
 8001bc4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f002 f80a 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001bd8:	f7ff ffaa 	bl	8001b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	0349      	lsls	r1, r1, #13
 8001be6:	430a      	orrs	r2, r1
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	035b      	lsls	r3, r3, #13
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001c16:	2104      	movs	r1, #4
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_ADC_MspInit+0xf8>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	2204      	movs	r2, #4
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN17
    PC5     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c28:	2434      	movs	r4, #52	; 0x34
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	2203      	movs	r2, #3
 8001c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	193a      	adds	r2, r7, r4
 8001c3e:	23a0      	movs	r3, #160	; 0xa0
 8001c40:	05db      	lsls	r3, r3, #23
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f001 f957 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c4a:	193b      	adds	r3, r7, r4
 8001c4c:	2230      	movs	r2, #48	; 0x30
 8001c4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	2203      	movs	r2, #3
 8001c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_ADC_MspInit+0xfc>)
 8001c60:	0019      	movs	r1, r3
 8001c62:	0010      	movs	r0, r2
 8001c64:	f001 f948 	bl	8002ef8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	200c      	movs	r0, #12
 8001c6e:	f001 f905 	bl	8002e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001c72:	200c      	movs	r0, #12
 8001c74:	f001 f917 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b013      	add	sp, #76	; 0x4c
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	40012400 	.word	0x40012400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	50000800 	.word	0x50000800

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f8c6 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001cb4:	f001 f914 	bl	8002ee0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  sensor_val[sel++] = HAL_ADC_GetValue(&hadc1);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <ADC1_IRQHandler+0x40>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	b2d1      	uxtb	r1, r2
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <ADC1_IRQHandler+0x40>)
 8001cce:	7011      	strb	r1, [r2, #0]
 8001cd0:	001c      	movs	r4, r3
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <ADC1_IRQHandler+0x44>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fc6b 	bl	80025b0 <HAL_ADC_GetValue>
 8001cda:	0001      	movs	r1, r0
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <ADC1_IRQHandler+0x48>)
 8001cde:	00a2      	lsls	r2, r4, #2
 8001ce0:	50d1      	str	r1, [r2, r3]

  if (sel == NUM_SENSORS) sel = 0;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <ADC1_IRQHandler+0x40>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d102      	bne.n	8001cf0 <ADC1_IRQHandler+0x30>
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <ADC1_IRQHandler+0x40>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <ADC1_IRQHandler+0x44>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fc68 	bl	80025c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000154 	.word	0x20000154
 8001d04:	20000090 	.word	0x20000090
 8001d08:	2000011c 	.word	0x2000011c

08001d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <Reset_Handler>:
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <LoopForever+0x2>)
 8001d1a:	4685      	mov	sp, r0
 8001d1c:	f7ff fff6 	bl	8001d0c <SystemInit>
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <LoopForever+0x6>)
 8001d22:	490d      	ldr	r1, [pc, #52]	; (8001d58 <LoopForever+0xa>)
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <LoopForever+0xe>)
 8001d26:	2300      	movs	r3, #0
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:
 8001d2a:	58d4      	ldr	r4, [r2, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:
 8001d30:	18c4      	adds	r4, r0, r3
 8001d32:	428c      	cmp	r4, r1
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <LoopForever+0x12>)
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <LoopForever+0x16>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:
 8001d42:	42a2      	cmp	r2, r4
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
 8001d46:	f002 f889 	bl	8003e5c <__libc_init_array>
 8001d4a:	f7ff f9d5 	bl	80010f8 <main>

08001d4e <LoopForever>:
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
 8001d50:	20009000 	.word	0x20009000
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000074 	.word	0x20000074
 8001d5c:	0800496c 	.word	0x0800496c
 8001d60:	20000074 	.word	0x20000074
 8001d64:	2000015c 	.word	0x2000015c

08001d68 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 8001d68:	e7fe      	b.n	8001d68 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x3c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Init+0x3c>)
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0049      	lsls	r1, r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f810 	bl	8001dac <HAL_InitTick>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e001      	b.n	8001d9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fed0 	bl	8001b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_InitTick+0x88>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02b      	beq.n	8001e1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_InitTick+0x8c>)
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_InitTick+0x88>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	0019      	movs	r1, r3
 8001dce:	23fa      	movs	r3, #250	; 0xfa
 8001dd0:	0098      	lsls	r0, r3, #2
 8001dd2:	f7fe f995 	bl	8000100 <__udivsi3>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	0019      	movs	r1, r3
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f7fe f990 	bl	8000100 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	0018      	movs	r0, r3
 8001de4:	f001 f86f 	bl	8002ec6 <HAL_SYSTICK_Config>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d112      	bne.n	8001e12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d80a      	bhi.n	8001e08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2301      	movs	r3, #1
 8001df6:	425b      	negs	r3, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 f83e 	bl	8002e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_InitTick+0x90>)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e00d      	b.n	8001e24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	230f      	movs	r3, #15
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e008      	b.n	8001e24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e12:	230f      	movs	r3, #15
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e003      	b.n	8001e24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e24:	230f      	movs	r3, #15
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b005      	add	sp, #20
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x1c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	001a      	movs	r2, r3
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	18d2      	adds	r2, r2, r3
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_IncTick+0x20>)
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000158 	.word	0x20000158

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <HAL_GetTick+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	20000158 	.word	0x20000158

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	001a      	movs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	f7ff ffe0 	bl	8001e64 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b004      	add	sp, #16
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	fffff9ff 	.word	0xfffff9ff

08001eec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001efc:	401a      	ands	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	fe3fffff 	.word	0xfe3fffff

08001f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	23e0      	movs	r3, #224	; 0xe0
 8001f22:	045b      	lsls	r3, r3, #17
 8001f24:	4013      	ands	r3, r2
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	2104      	movs	r1, #4
 8001f42:	400a      	ands	r2, r1
 8001f44:	2107      	movs	r1, #7
 8001f46:	4091      	lsls	r1, r2
 8001f48:	000a      	movs	r2, r1
 8001f4a:	43d2      	mvns	r2, r2
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2104      	movs	r1, #4
 8001f52:	400b      	ands	r3, r1
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4099      	lsls	r1, r3
 8001f58:	000b      	movs	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	2104      	movs	r1, #4
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	2107      	movs	r1, #7
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2104      	movs	r1, #4
 8001f88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f8a:	40da      	lsrs	r2, r3
 8001f8c:	0013      	movs	r3, r2
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	211f      	movs	r1, #31
 8001fcc:	400a      	ands	r2, r1
 8001fce:	210f      	movs	r1, #15
 8001fd0:	4091      	lsls	r1, r2
 8001fd2:	000a      	movs	r2, r1
 8001fd4:	43d2      	mvns	r2, r2
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	210f      	movs	r1, #15
 8001fde:	4019      	ands	r1, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	201f      	movs	r0, #31
 8001fe4:	4003      	ands	r3, r0
 8001fe6:	4099      	lsls	r1, r3
 8001fe8:	000b      	movs	r3, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	035b      	lsls	r3, r3, #13
 800200a:	0b5b      	lsrs	r3, r3, #13
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}

0800201a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	0352      	lsls	r2, r2, #13
 800202c:	0b52      	lsrs	r2, r2, #13
 800202e:	43d2      	mvns	r2, r2
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}

0800203e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	0212      	lsls	r2, r2, #8
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	400b      	ands	r3, r1
 8002078:	4904      	ldr	r1, [pc, #16]	; (800208c <LL_ADC_SetChannelSamplingTime+0x34>)
 800207a:	400b      	ands	r3, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	07ffff00 	.word	0x07ffff00

08002090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800209e:	4013      	ands	r3, r2
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0552      	lsls	r2, r2, #21
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	6fffffe8 	.word	0x6fffffe8

080020b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	401a      	ands	r2, r3
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	055b      	lsls	r3, r3, #21
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d101      	bne.n	80020d6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <LL_ADC_Enable+0x20>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	2201      	movs	r2, #1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	7fffffe8 	.word	0x7fffffe8

08002104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2201      	movs	r2, #1
 8002112:	4013      	ands	r3, r2
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <LL_ADC_IsEnabled+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_ADC_IsEnabled+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <LL_ADC_REG_StartConversion+0x20>)
 8002136:	4013      	ands	r3, r2
 8002138:	2204      	movs	r2, #4
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}
 8002148:	7fffffe8 	.word	0x7fffffe8

0800214c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2204      	movs	r2, #4
 800215a:	4013      	ands	r3, r2
 800215c:	2b04      	cmp	r3, #4
 800215e:	d101      	bne.n	8002164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	231f      	movs	r3, #31
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e17f      	b.n	8002496 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fcf3 	bl	8001b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2254      	movs	r2, #84	; 0x54
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff ff7d 	bl	80020b8 <LL_ADC_IsInternalRegulatorEnabled>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d115      	bne.n	80021ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff62 	bl	8002090 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021cc:	4bb4      	ldr	r3, [pc, #720]	; (80024a0 <HAL_ADC_Init+0x330>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	49b4      	ldr	r1, [pc, #720]	; (80024a4 <HAL_ADC_Init+0x334>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fd ff94 	bl	8000100 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff60 	bl	80020b8 <LL_ADC_IsInternalRegulatorEnabled>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d10f      	bne.n	800221c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	2210      	movs	r2, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2201      	movs	r2, #1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002214:	231f      	movs	r3, #31
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff93 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	2210      	movs	r2, #16
 8002230:	4013      	ands	r3, r2
 8002232:	d000      	beq.n	8002236 <HAL_ADC_Init+0xc6>
 8002234:	e122      	b.n	800247c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d000      	beq.n	800223e <HAL_ADC_Init+0xce>
 800223c:	e11e      	b.n	800247c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a99      	ldr	r2, [pc, #612]	; (80024a8 <HAL_ADC_Init+0x338>)
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ff56 	bl	8002104 <LL_ADC_IsEnabled>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d000      	beq.n	800225e <HAL_ADC_Init+0xee>
 800225c:	e0ad      	b.n	80023ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e1b      	ldrb	r3, [r3, #24]
 8002266:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002268:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002270:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7e9b      	ldrb	r3, [r3, #26]
 8002276:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002278:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_ADC_Init+0x118>
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	e000      	b.n	800228a <HAL_ADC_Init+0x11a>
 8002288:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800228a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002290:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da04      	bge.n	80022a4 <HAL_ADC_Init+0x134>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	e001      	b.n	80022a8 <HAL_ADC_Init+0x138>
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80022a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	5c5b      	ldrb	r3, [r3, r1]
 80022b0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022b2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	5c9b      	ldrb	r3, [r3, r2]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e9b      	ldrb	r3, [r3, #26]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	0252      	lsls	r2, r2, #9
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	e00b      	b.n	80022f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	2220      	movs	r2, #32
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	2201      	movs	r2, #1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fc:	23e0      	movs	r3, #224	; 0xe0
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002306:	4313      	orrs	r3, r2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_ADC_Init+0x33c>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0f9b      	lsrs	r3, r3, #30
 800232a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	223c      	movs	r2, #60	; 0x3c
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d111      	bne.n	8002366 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0f9b      	lsrs	r3, r3, #30
 8002348:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800234e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002354:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800235a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	2201      	movs	r2, #1
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_ADC_Init+0x340>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	430a      	orrs	r2, r1
 800237a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	23c0      	movs	r3, #192	; 0xc0
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	429a      	cmp	r2, r3
 8002386:	d018      	beq.n	80023ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	05db      	lsls	r3, r3, #23
 8002390:	429a      	cmp	r2, r3
 8002392:	d012      	beq.n	80023ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	429a      	cmp	r2, r3
 800239e:	d00c      	beq.n	80023ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_ADC_Init+0x344>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <HAL_ADC_Init+0x348>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	23f0      	movs	r3, #240	; 0xf0
 80023b0:	039b      	lsls	r3, r3, #14
 80023b2:	401a      	ands	r2, r3
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_ADC_Init+0x344>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	001a      	movs	r2, r3
 80023c4:	2100      	movs	r1, #0
 80023c6:	f7ff fdb2 	bl	8001f2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	493a      	ldr	r1, [pc, #232]	; (80024bc <HAL_ADC_Init+0x34c>)
 80023d4:	001a      	movs	r2, r3
 80023d6:	f7ff fdaa 	bl	8001f2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2110      	movs	r1, #16
 80023ee:	4249      	negs	r1, r1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
 80023f4:	e018      	b.n	8002428 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	039b      	lsls	r3, r3, #14
 80023fe:	429a      	cmp	r2, r3
 8002400:	d112      	bne.n	8002428 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	3b01      	subs	r3, #1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	221c      	movs	r2, #28
 8002412:	4013      	ands	r3, r2
 8002414:	2210      	movs	r2, #16
 8002416:	4252      	negs	r2, r2
 8002418:	409a      	lsls	r2, r3
 800241a:	0011      	movs	r1, r2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2100      	movs	r1, #0
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fd9a 	bl	8001f68 <LL_ADC_GetSamplingTimeCommonChannels>
 8002434:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800243a:	429a      	cmp	r2, r3
 800243c:	d10b      	bne.n	8002456 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	2203      	movs	r2, #3
 800244a:	4393      	bics	r3, r2
 800244c:	2201      	movs	r2, #1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002454:	e01c      	b.n	8002490 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	2212      	movs	r2, #18
 800245c:	4393      	bics	r3, r2
 800245e:	2210      	movs	r2, #16
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2201      	movs	r2, #1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002472:	231f      	movs	r3, #31
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800247a:	e009      	b.n	8002490 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	2210      	movs	r2, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002488:	231f      	movs	r3, #31
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002490:	231f      	movs	r3, #31
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b008      	add	sp, #32
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	20000004 	.word	0x20000004
 80024a4:	00030d40 	.word	0x00030d40
 80024a8:	fffffefd 	.word	0xfffffefd
 80024ac:	fffe0201 	.word	0xfffe0201
 80024b0:	1ffffc02 	.word	0x1ffffc02
 80024b4:	40012708 	.word	0x40012708
 80024b8:	ffc3ffff 	.word	0xffc3ffff
 80024bc:	07ffff04 	.word	0x07ffff04

080024c0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff fe3d 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 80024d2:	1e03      	subs	r3, r0, #0
 80024d4:	d15f      	bne.n	8002596 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2254      	movs	r2, #84	; 0x54
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_Start_IT+0x24>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e05f      	b.n	80025a4 <HAL_ADC_Start_IT+0xe4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2254      	movs	r2, #84	; 0x54
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024ec:	250f      	movs	r5, #15
 80024ee:	197c      	adds	r4, r7, r5
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb70 	bl	8002bd8 <ADC_Enable>
 80024f8:	0003      	movs	r3, r0
 80024fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d143      	bne.n	800258c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a28      	ldr	r2, [pc, #160]	; (80025ac <HAL_ADC_Start_IT+0xec>)
 800250a:	4013      	ands	r3, r2
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0052      	lsls	r2, r2, #1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	221c      	movs	r2, #28
 8002522:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2254      	movs	r2, #84	; 0x54
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	211c      	movs	r1, #28
 8002538:	438a      	bics	r2, r1
 800253a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d108      	bne.n	8002556 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2108      	movs	r1, #8
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
          break;
 8002554:	e008      	b.n	8002568 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2104      	movs	r1, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
          break;
 8002566:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2110      	movs	r1, #16
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff fdcf 	bl	8002128 <LL_ADC_REG_StartConversion>
 800258a:	e008      	b.n	800259e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2254      	movs	r2, #84	; 0x54
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]
 8002594:	e003      	b.n	800259e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002596:	230f      	movs	r3, #15
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800259e:	230f      	movs	r3, #15
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	781b      	ldrb	r3, [r3, #0]
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b004      	add	sp, #16
 80025aa:	bdb0      	pop	{r4, r5, r7, pc}
 80025ac:	fffff0fe 	.word	0xfffff0fe

080025b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d017      	beq.n	800261c <HAL_ADC_IRQHandler+0x54>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	2210      	movs	r2, #16
 80025fa:	4013      	ands	r3, r2
 80025fc:	d106      	bne.n	800260c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fb78 	bl	8002d04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	d003      	beq.n	800262c <HAL_ADC_IRQHandler+0x64>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d107      	bne.n	800263c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2208      	movs	r2, #8
 8002630:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002632:	d04d      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2208      	movs	r2, #8
 8002638:	4013      	ands	r3, r2
 800263a:	d049      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	2210      	movs	r2, #16
 8002642:	4013      	ands	r3, r2
 8002644:	d106      	bne.n	8002654 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fc9c 	bl	8001f96 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d02e      	beq.n	80026c0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7e9b      	ldrb	r3, [r3, #26]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12a      	bne.n	80026c0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d123      	bne.n	80026c0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff fd65 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d110      	bne.n	80026a8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	210c      	movs	r1, #12
 8002692:	438a      	bics	r2, r1
 8002694:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a56      	ldr	r2, [pc, #344]	; (80027f4 <HAL_ADC_IRQHandler+0x22c>)
 800269c:	4013      	ands	r3, r2
 800269e:	2201      	movs	r2, #1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
 80026a6:	e00b      	b.n	80026c0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	2220      	movs	r2, #32
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2201      	movs	r2, #1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f898 	bl	80027f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	220c      	movs	r2, #12
 80026ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	4013      	ands	r3, r2
 80026d6:	d012      	beq.n	80026fe <HAL_ADC_IRQHandler+0x136>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	4013      	ands	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	0252      	lsls	r2, r2, #9
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 f889 	bl	8002808 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d014      	beq.n	8002732 <HAL_ADC_IRQHandler+0x16a>
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d00f      	beq.n	8002732 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	0292      	lsls	r2, r2, #10
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fade 	bl	8002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0052      	lsls	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d014      	beq.n	8002766 <HAL_ADC_IRQHandler+0x19e>
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d00f      	beq.n	8002766 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	02d2      	lsls	r2, r2, #11
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 facc 	bl	8002cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2210      	movs	r2, #16
 800276a:	4013      	ands	r3, r2
 800276c:	d02b      	beq.n	80027c6 <HAL_ADC_IRQHandler+0x1fe>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800277e:	2301      	movs	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e008      	b.n	8002796 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff fc58 	bl	800203e <LL_ADC_REG_GetDMATransfer>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d001      	beq.n	8002796 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002792:	2301      	movs	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d110      	bne.n	80027be <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	00d2      	lsls	r2, r2, #3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2202      	movs	r2, #2
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f82d 	bl	8002818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2210      	movs	r2, #16
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	019b      	lsls	r3, r3, #6
 80027cc:	4013      	ands	r3, r2
 80027ce:	d00d      	beq.n	80027ec <HAL_ADC_IRQHandler+0x224>
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	4013      	ands	r3, r2
 80027d8:	d008      	beq.n	80027ec <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fa99 	bl	8002d14 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0192      	lsls	r2, r2, #6
 80027ea:	601a      	str	r2, [r3, #0]
  }
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	fffffefe 	.word	0xfffffefe

080027f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2254      	movs	r2, #84	; 0x54
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x24>
 8002848:	2302      	movs	r3, #2
 800284a:	e1c0      	b.n	8002bce <HAL_ADC_ConfigChannel+0x3a6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2254      	movs	r2, #84	; 0x54
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff fc77 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d000      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x3c>
 8002862:	e1a3      	b.n	8002bac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d100      	bne.n	800286e <HAL_ADC_ConfigChannel+0x46>
 800286c:	e143      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	429a      	cmp	r2, r3
 8002878:	d004      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800287e:	4ac1      	ldr	r2, [pc, #772]	; (8002b84 <HAL_ADC_ConfigChannel+0x35c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0019      	movs	r1, r3
 800288e:	0010      	movs	r0, r2
 8002890:	f7ff fbb2 	bl	8001ff8 <LL_ADC_REG_SetSequencerChAdd>
 8002894:	e0c9      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	211f      	movs	r1, #31
 80028a0:	400b      	ands	r3, r1
 80028a2:	210f      	movs	r1, #15
 80028a4:	4099      	lsls	r1, r3
 80028a6:	000b      	movs	r3, r1
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	035b      	lsls	r3, r3, #13
 80028b4:	0b5b      	lsrs	r3, r3, #13
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x9c>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	221f      	movs	r2, #31
 80028c0:	4013      	ands	r3, r2
 80028c2:	e098      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d000      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0xa8>
 80028ce:	e091      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1cc>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d000      	beq.n	80028dc <HAL_ADC_ConfigChannel+0xb4>
 80028da:	e089      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1c8>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2204      	movs	r2, #4
 80028e2:	4013      	ands	r3, r2
 80028e4:	d000      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0xc0>
 80028e6:	e081      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1c4>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2208      	movs	r2, #8
 80028ee:	4013      	ands	r3, r2
 80028f0:	d000      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0xcc>
 80028f2:	e079      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1c0>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	4013      	ands	r3, r2
 80028fc:	d000      	beq.n	8002900 <HAL_ADC_ConfigChannel+0xd8>
 80028fe:	e071      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x1bc>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2220      	movs	r2, #32
 8002906:	4013      	ands	r3, r2
 8002908:	d000      	beq.n	800290c <HAL_ADC_ConfigChannel+0xe4>
 800290a:	e069      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1b8>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	d000      	beq.n	8002918 <HAL_ADC_ConfigChannel+0xf0>
 8002916:	e061      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1b4>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	4013      	ands	r3, r2
 8002920:	d000      	beq.n	8002924 <HAL_ADC_ConfigChannel+0xfc>
 8002922:	e059      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1b0>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d151      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1ac>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4013      	ands	r3, r2
 800293a:	d149      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1a8>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4013      	ands	r3, r2
 8002946:	d141      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1a4>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d139      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1a0>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	4013      	ands	r3, r2
 800295e:	d131      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x19c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	4013      	ands	r3, r2
 800296a:	d129      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x198>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	01db      	lsls	r3, r3, #7
 8002974:	4013      	ands	r3, r2
 8002976:	d121      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x194>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	4013      	ands	r3, r2
 8002982:	d119      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x190>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	4013      	ands	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x18c>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	4013      	ands	r3, r2
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x188>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	02db      	lsls	r3, r3, #11
 80029a4:	4013      	ands	r3, r2
 80029a6:	d001      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x184>
 80029a8:	2312      	movs	r3, #18
 80029aa:	e024      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029ac:	2300      	movs	r3, #0
 80029ae:	e022      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029b0:	2311      	movs	r3, #17
 80029b2:	e020      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029b4:	2310      	movs	r3, #16
 80029b6:	e01e      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029b8:	230f      	movs	r3, #15
 80029ba:	e01c      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029bc:	230e      	movs	r3, #14
 80029be:	e01a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029c0:	230d      	movs	r3, #13
 80029c2:	e018      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029c4:	230c      	movs	r3, #12
 80029c6:	e016      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029c8:	230b      	movs	r3, #11
 80029ca:	e014      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029cc:	230a      	movs	r3, #10
 80029ce:	e012      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029d0:	2309      	movs	r3, #9
 80029d2:	e010      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029d4:	2308      	movs	r3, #8
 80029d6:	e00e      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029d8:	2307      	movs	r3, #7
 80029da:	e00c      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029dc:	2306      	movs	r3, #6
 80029de:	e00a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029e0:	2305      	movs	r3, #5
 80029e2:	e008      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e006      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e004      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1ce>
 80029f4:	2300      	movs	r3, #0
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	201f      	movs	r0, #31
 80029fc:	4002      	ands	r2, r0
 80029fe:	4093      	lsls	r3, r2
 8002a00:	000a      	movs	r2, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d808      	bhi.n	8002a2a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	001a      	movs	r2, r3
 8002a26:	f7ff fac7 	bl	8001fb8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	001a      	movs	r2, r3
 8002a38:	f7ff fb0e 	bl	8002058 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db00      	blt.n	8002a46 <HAL_ADC_ConfigChannel+0x21e>
 8002a44:	e0bc      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a46:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff fa63 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_ADC_ConfigChannel+0x364>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d122      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a64:	d11d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	0412      	lsls	r2, r2, #16
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002a70:	0019      	movs	r1, r3
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7ff fa3a 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <HAL_ADC_ConfigChannel+0x368>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4945      	ldr	r1, [pc, #276]	; (8002b94 <HAL_ADC_ConfigChannel+0x36c>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fb3e 	bl	8000100 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	0013      	movs	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a92:	e002      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aa0:	e08e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <HAL_ADC_ConfigChannel+0x370>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10e      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x2a2>
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	045b      	lsls	r3, r3, #17
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d109      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0452      	lsls	r2, r2, #17
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	f7ff fa12 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002ac8:	e07a      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <HAL_ADC_ConfigChannel+0x374>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d000      	beq.n	8002ad6 <HAL_ADC_ConfigChannel+0x2ae>
 8002ad4:	e074      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	03db      	lsls	r3, r3, #15
 8002adc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ade:	d000      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x2ba>
 8002ae0:	e06e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	03d2      	lsls	r2, r2, #15
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f7ff f9fc 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002af4:	e064      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d004      	beq.n	8002b0c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_ADC_ConfigChannel+0x35c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f7ff fa7f 	bl	800201a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da4d      	bge.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7ff f9f4 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_ADC_ConfigChannel+0x364>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_ADC_ConfigChannel+0x378>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f7ff f9d1 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002b4a:	e039      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_ADC_ConfigChannel+0x370>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_ADC_ConfigChannel+0x37c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f7ff f9c3 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002b66:	e02b      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <HAL_ADC_ConfigChannel+0x374>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d126      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <HAL_ADC_ConfigChannel+0x380>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_ADC_ConfigChannel+0x360>)
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	0010      	movs	r0, r2
 8002b7e:	f7ff f9b5 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002b82:	e01d      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x398>
 8002b84:	80000004 	.word	0x80000004
 8002b88:	40012708 	.word	0x40012708
 8002b8c:	b0001000 	.word	0xb0001000
 8002b90:	20000004 	.word	0x20000004
 8002b94:	00030d40 	.word	0x00030d40
 8002b98:	b8004000 	.word	0xb8004000
 8002b9c:	b4002000 	.word	0xb4002000
 8002ba0:	ff7fffff 	.word	0xff7fffff
 8002ba4:	feffffff 	.word	0xfeffffff
 8002ba8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bb8:	2317      	movs	r3, #23
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2254      	movs	r2, #84	; 0x54
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781b      	ldrb	r3, [r3, #0]
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b006      	add	sp, #24
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)

08002bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fa8b 	bl	8002104 <LL_ADC_IsEnabled>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d000      	beq.n	8002bf4 <ADC_Enable+0x1c>
 8002bf2:	e069      	b.n	8002cc8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a36      	ldr	r2, [pc, #216]	; (8002cd4 <ADC_Enable+0xfc>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	2210      	movs	r2, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2201      	movs	r2, #1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e056      	b.n	8002cca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff fa5d 	bl	80020e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <ADC_Enable+0x100>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff f973 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00f      	beq.n	8002c58 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <ADC_Enable+0x104>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4928      	ldr	r1, [pc, #160]	; (8002ce0 <ADC_Enable+0x108>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd fa5e 	bl	8000100 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	3301      	adds	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c4a:	e002      	b.n	8002c52 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e5b      	ldrb	r3, [r3, #25]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d033      	beq.n	8002cc8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002c60:	f7ff f900 	bl	8001e64 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c68:	e027      	b.n	8002cba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fa48 	bl	8002104 <LL_ADC_IsEnabled>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d104      	bne.n	8002c82 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fa2f 	bl	80020e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c82:	f7ff f8ef 	bl	8001e64 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d914      	bls.n	8002cba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00d      	beq.n	8002cba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d1d0      	bne.n	8002c6a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	80000017 	.word	0x80000017
 8002cd8:	40012708 	.word	0x40012708
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	00030d40 	.word	0x00030d40

08002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b7f      	cmp	r3, #127	; 0x7f
 8002d36:	d809      	bhi.n	8002d4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	231f      	movs	r3, #31
 8002d40:	401a      	ands	r2, r3
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_EnableIRQ+0x30>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	4091      	lsls	r1, r2
 8002d48:	000a      	movs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	0002      	movs	r2, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d6c:	d828      	bhi.n	8002dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <__NVIC_SetPriority+0xd4>)
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	33c0      	adds	r3, #192	; 0xc0
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	589b      	ldr	r3, [r3, r2]
 8002d7e:	1dfa      	adds	r2, r7, #7
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	0011      	movs	r1, r2
 8002d84:	2203      	movs	r2, #3
 8002d86:	400a      	ands	r2, r1
 8002d88:	00d2      	lsls	r2, r2, #3
 8002d8a:	21ff      	movs	r1, #255	; 0xff
 8002d8c:	4091      	lsls	r1, r2
 8002d8e:	000a      	movs	r2, r1
 8002d90:	43d2      	mvns	r2, r2
 8002d92:	401a      	ands	r2, r3
 8002d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0018      	movs	r0, r3
 8002da4:	2303      	movs	r3, #3
 8002da6:	4003      	ands	r3, r0
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dac:	481f      	ldr	r0, [pc, #124]	; (8002e2c <__NVIC_SetPriority+0xd4>)
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	430a      	orrs	r2, r1
 8002db8:	33c0      	adds	r3, #192	; 0xc0
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dbe:	e031      	b.n	8002e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <__NVIC_SetPriority+0xd8>)
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	230f      	movs	r3, #15
 8002dca:	400b      	ands	r3, r1
 8002dcc:	3b08      	subs	r3, #8
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3306      	adds	r3, #6
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	18d3      	adds	r3, r2, r3
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	1dfa      	adds	r2, r7, #7
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	0011      	movs	r1, r2
 8002de0:	2203      	movs	r2, #3
 8002de2:	400a      	ands	r2, r1
 8002de4:	00d2      	lsls	r2, r2, #3
 8002de6:	21ff      	movs	r1, #255	; 0xff
 8002de8:	4091      	lsls	r1, r2
 8002dea:	000a      	movs	r2, r1
 8002dec:	43d2      	mvns	r2, r2
 8002dee:	401a      	ands	r2, r3
 8002df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	401a      	ands	r2, r3
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	2303      	movs	r3, #3
 8002e02:	4003      	ands	r3, r0
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e08:	4809      	ldr	r0, [pc, #36]	; (8002e30 <__NVIC_SetPriority+0xd8>)
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	001c      	movs	r4, r3
 8002e10:	230f      	movs	r3, #15
 8002e12:	4023      	ands	r3, r4
 8002e14:	3b08      	subs	r3, #8
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	3306      	adds	r3, #6
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18c3      	adds	r3, r0, r3
 8002e20:	3304      	adds	r3, #4
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b003      	add	sp, #12
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1e5a      	subs	r2, r3, #1
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	045b      	lsls	r3, r3, #17
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d301      	bcc.n	8002e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e010      	b.n	8002e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <SysTick_Config+0x44>)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	3a01      	subs	r2, #1
 8002e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e54:	2301      	movs	r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	2103      	movs	r1, #3
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff7c 	bl	8002d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x44>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x44>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b002      	add	sp, #8
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	210f      	movs	r1, #15
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	1c02      	adds	r2, r0, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	0011      	movs	r1, r2
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ff5d 	bl	8002d58 <__NVIC_SetPriority>
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	0002      	movs	r2, r0
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff ff33 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff ffaf 	bl	8002e34 <SysTick_Config>
 8002ed6:	0003      	movs	r3, r0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002ee4:	f000 f803 	bl	8002eee <HAL_SYSTICK_Callback>
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f06:	e147      	b.n	8003198 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4091      	lsls	r1, r2
 8002f12:	000a      	movs	r2, r1
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d100      	bne.n	8002f20 <HAL_GPIO_Init+0x28>
 8002f1e:	e138      	b.n	8003192 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d005      	beq.n	8002f38 <HAL_GPIO_Init+0x40>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d130      	bne.n	8002f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	409a      	lsls	r2, r3
 8002f46:	0013      	movs	r3, r2
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6e:	2201      	movs	r2, #1
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	43da      	mvns	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	2201      	movs	r2, #1
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d017      	beq.n	8002fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	0013      	movs	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d123      	bne.n	800302a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	58d3      	ldr	r3, [r2, r3]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	43da      	mvns	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2107      	movs	r1, #7
 800300e:	400b      	ands	r3, r1
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	409a      	lsls	r2, r3
 8003014:	0013      	movs	r3, r2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3208      	adds	r2, #8
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	6939      	ldr	r1, [r7, #16]
 8003028:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	43da      	mvns	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2203      	movs	r2, #3
 8003048:	401a      	ands	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	409a      	lsls	r2, r3
 8003050:	0013      	movs	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	4013      	ands	r3, r2
 8003068:	d100      	bne.n	800306c <HAL_GPIO_Init+0x174>
 800306a:	e092      	b.n	8003192 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800306c:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3318      	adds	r3, #24
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	589b      	ldr	r3, [r3, r2]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2203      	movs	r2, #3
 800307e:	4013      	ands	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	220f      	movs	r2, #15
 8003084:	409a      	lsls	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	43da      	mvns	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	23a0      	movs	r3, #160	; 0xa0
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	429a      	cmp	r2, r3
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0x1ca>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a45      	ldr	r2, [pc, #276]	; (80031b4 <HAL_GPIO_Init+0x2bc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_Init+0x1c6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a44      	ldr	r2, [pc, #272]	; (80031b8 <HAL_GPIO_Init+0x2c0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_Init+0x1c2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a43      	ldr	r2, [pc, #268]	; (80031bc <HAL_GPIO_Init+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_Init+0x1be>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x1cc>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x1cc>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x1cc>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x1cc>
 80030c2:	2300      	movs	r3, #0
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	2103      	movs	r1, #3
 80030c8:	400a      	ands	r2, r1
 80030ca:	00d2      	lsls	r2, r2, #3
 80030cc:	4093      	lsls	r3, r2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030d4:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3318      	adds	r3, #24
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	035b      	lsls	r3, r3, #13
 80030fa:	4013      	ands	r3, r2
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43da      	mvns	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	039b      	lsls	r3, r3, #14
 8003124:	4013      	ands	r3, r2
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 8003138:	2384      	movs	r3, #132	; 0x84
 800313a:	58d3      	ldr	r3, [r2, r3]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	43da      	mvns	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	4013      	ands	r3, r2
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315c:	4914      	ldr	r1, [pc, #80]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 800315e:	2284      	movs	r2, #132	; 0x84
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	58d3      	ldr	r3, [r2, r3]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43da      	mvns	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	025b      	lsls	r3, r3, #9
 800317e:	4013      	ands	r3, r2
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800318a:	4909      	ldr	r1, [pc, #36]	; (80031b0 <HAL_GPIO_Init+0x2b8>)
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	40da      	lsrs	r2, r3
 80031a0:	1e13      	subs	r3, r2, #0
 80031a2:	d000      	beq.n	80031a6 <HAL_GPIO_Init+0x2ae>
 80031a4:	e6b0      	b.n	8002f08 <HAL_GPIO_Init+0x10>
  }
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021800 	.word	0x40021800
 80031b4:	50000400 	.word	0x50000400
 80031b8:	50000800 	.word	0x50000800
 80031bc:	50000c00 	.word	0x50000c00

080031c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	000a      	movs	r2, r1
 80031ca:	1cbb      	adds	r3, r7, #2
 80031cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	1cba      	adds	r2, r7, #2
 80031d4:	8812      	ldrh	r2, [r2, #0]
 80031d6:	4013      	ands	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031da:	230f      	movs	r3, #15
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e003      	b.n	80031ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e4:	230f      	movs	r3, #15
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031ec:	230f      	movs	r3, #15
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b004      	add	sp, #16
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	0008      	movs	r0, r1
 8003204:	0011      	movs	r1, r2
 8003206:	1cbb      	adds	r3, r7, #2
 8003208:	1c02      	adds	r2, r0, #0
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	1c7b      	adds	r3, r7, #1
 800320e:	1c0a      	adds	r2, r1, #0
 8003210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003212:	1c7b      	adds	r3, r7, #1
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321a:	1cbb      	adds	r3, r7, #2
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003222:	e003      	b.n	800322c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003224:	1cbb      	adds	r3, r7, #2
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d11f      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	0013      	movs	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	189b      	adds	r3, r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003266:	0018      	movs	r0, r3
 8003268:	f7fc ff4a 	bl	8000100 <__udivsi3>
 800326c:	0003      	movs	r3, r0
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003272:	e008      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3b01      	subs	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e001      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e009      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	401a      	ands	r2, r3
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	429a      	cmp	r2, r3
 8003296:	d0ed      	beq.n	8003274 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40007000 	.word	0x40007000
 80032a8:	fffff9ff 	.word	0xfffff9ff
 80032ac:	20000004 	.word	0x20000004
 80032b0:	000f4240 	.word	0x000f4240

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e2f3      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_OscConfig+0x1e>
 80032d0:	e07c      	b.n	80033cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4bc3      	ldr	r3, [pc, #780]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2238      	movs	r2, #56	; 0x38
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032dc:	4bc0      	ldr	r3, [pc, #768]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3e>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4bb9      	ldr	r3, [pc, #740]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	d062      	beq.n	80033ca <HAL_RCC_OscConfig+0x116>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d15e      	bne.n	80033ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e2ce      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d107      	bne.n	800332c <HAL_RCC_OscConfig+0x78>
 800331c:	4bb0      	ldr	r3, [pc, #704]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4baf      	ldr	r3, [pc, #700]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	0249      	lsls	r1, r1, #9
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e020      	b.n	800336e <HAL_RCC_OscConfig+0xba>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	23a0      	movs	r3, #160	; 0xa0
 8003332:	02db      	lsls	r3, r3, #11
 8003334:	429a      	cmp	r2, r3
 8003336:	d10e      	bne.n	8003356 <HAL_RCC_OscConfig+0xa2>
 8003338:	4ba9      	ldr	r3, [pc, #676]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4ba8      	ldr	r3, [pc, #672]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	02c9      	lsls	r1, r1, #11
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	4ba6      	ldr	r3, [pc, #664]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4ba5      	ldr	r3, [pc, #660]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0249      	lsls	r1, r1, #9
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0xba>
 8003356:	4ba2      	ldr	r3, [pc, #648]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4ba1      	ldr	r3, [pc, #644]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800335c:	49a1      	ldr	r1, [pc, #644]	; (80035e4 <HAL_RCC_OscConfig+0x330>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	4b9f      	ldr	r3, [pc, #636]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003368:	499f      	ldr	r1, [pc, #636]	; (80035e8 <HAL_RCC_OscConfig+0x334>)
 800336a:	400a      	ands	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fd75 	bl	8001e64 <HAL_GetTick>
 800337a:	0003      	movs	r3, r0
 800337c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fd70 	bl	8001e64 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e28d      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	4b93      	ldr	r3, [pc, #588]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	029b      	lsls	r3, r3, #10
 800339a:	4013      	ands	r3, r2
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xcc>
 800339e:	e015      	b.n	80033cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fd60 	bl	8001e64 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033aa:	f7fe fd5b 	bl	8001e64 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e278      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033bc:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	029b      	lsls	r3, r3, #10
 80033c4:	4013      	ands	r3, r2
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0xf6>
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2202      	movs	r2, #2
 80033d2:	4013      	ands	r3, r2
 80033d4:	d100      	bne.n	80033d8 <HAL_RCC_OscConfig+0x124>
 80033d6:	e099      	b.n	800350c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2238      	movs	r2, #56	; 0x38
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e2:	4b7f      	ldr	r3, [pc, #508]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2203      	movs	r2, #3
 80033e8:	4013      	ands	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d102      	bne.n	80033f8 <HAL_RCC_OscConfig+0x144>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d002      	beq.n	80033fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d135      	bne.n	800346a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fe:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4013      	ands	r3, r2
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x162>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e24b      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a74      	ldr	r2, [pc, #464]	; (80035ec <HAL_RCC_OscConfig+0x338>)
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	4b6e      	ldr	r3, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d112      	bne.n	8003458 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003432:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x33c>)
 8003438:	4013      	ands	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003446:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0adb      	lsrs	r3, r3, #11
 800344c:	2207      	movs	r2, #7
 800344e:	4013      	ands	r3, r2
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x340>)
 8003452:	40da      	lsrs	r2, r3
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x344>)
 8003456:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003458:	4b68      	ldr	r3, [pc, #416]	; (80035fc <HAL_RCC_OscConfig+0x348>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0018      	movs	r0, r3
 800345e:	f7fe fca5 	bl	8001dac <HAL_InitTick>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d051      	beq.n	800350a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e221      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d030      	beq.n	80034d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5e      	ldr	r2, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x33c>)
 8003478:	4013      	ands	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003486:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0049      	lsls	r1, r1, #1
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fce6 	bl	8001e64 <HAL_GetTick>
 8003498:	0003      	movs	r3, r0
 800349a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fce1 	bl	8001e64 <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1fe      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4013      	ands	r3, r2
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x338>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e01b      	b.n	800350c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034da:	4949      	ldr	r1, [pc, #292]	; (8003600 <HAL_RCC_OscConfig+0x34c>)
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fcc0 	bl	8001e64 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fe fcbb 	bl	8001e64 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1d8      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fc:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4013      	ands	r3, r2
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x236>
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2208      	movs	r2, #8
 8003512:	4013      	ands	r3, r2
 8003514:	d047      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2238      	movs	r2, #56	; 0x38
 800351c:	4013      	ands	r3, r2
 800351e:	2b18      	cmp	r3, #24
 8003520:	d10a      	bne.n	8003538 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	d03c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d138      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e1ba      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d019      	beq.n	8003574 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003546:	2101      	movs	r1, #1
 8003548:	430a      	orrs	r2, r1
 800354a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fc8a 	bl	8001e64 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe fc85 	bl	8001e64 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a2      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d0f1      	beq.n	8003556 <HAL_RCC_OscConfig+0x2a2>
 8003572:	e018      	b.n	80035a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 8003576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800357a:	2101      	movs	r1, #1
 800357c:	438a      	bics	r2, r1
 800357e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fc70 	bl	8001e64 <HAL_GetTick>
 8003584:	0003      	movs	r3, r0
 8003586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358a:	f7fe fc6b 	bl	8001e64 <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e188      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	2202      	movs	r2, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d1f1      	bne.n	800358a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2204      	movs	r2, #4
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x2fe>
 80035b0:	e0c6      	b.n	8003740 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	231f      	movs	r3, #31
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2238      	movs	r2, #56	; 0x38
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d11e      	bne.n	8003604 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x32c>)
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d100      	bne.n	80035d2 <HAL_RCC_OscConfig+0x31e>
 80035d0:	e0b6      	b.n	8003740 <HAL_RCC_OscConfig+0x48c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d000      	beq.n	80035dc <HAL_RCC_OscConfig+0x328>
 80035da:	e0b1      	b.n	8003740 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e166      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	fffeffff 	.word	0xfffeffff
 80035e8:	fffbffff 	.word	0xfffbffff
 80035ec:	ffff80ff 	.word	0xffff80ff
 80035f0:	ffffc7ff 	.word	0xffffc7ff
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	20000004 	.word	0x20000004
 80035fc:	20000008 	.word	0x20000008
 8003600:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003604:	4bac      	ldr	r3, [pc, #688]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	055b      	lsls	r3, r3, #21
 800360c:	4013      	ands	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x360>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x362>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4ba7      	ldr	r3, [pc, #668]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800361c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800361e:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0549      	lsls	r1, r1, #21
 8003624:	430a      	orrs	r2, r1
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c
 8003628:	4ba3      	ldr	r3, [pc, #652]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800362a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	055b      	lsls	r3, r3, #21
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003636:	231f      	movs	r3, #31
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363e:	4b9f      	ldr	r3, [pc, #636]	; (80038bc <HAL_RCC_OscConfig+0x608>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d11a      	bne.n	8003680 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364a:	4b9c      	ldr	r3, [pc, #624]	; (80038bc <HAL_RCC_OscConfig+0x608>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b9b      	ldr	r3, [pc, #620]	; (80038bc <HAL_RCC_OscConfig+0x608>)
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	0049      	lsls	r1, r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003658:	f7fe fc04 	bl	8001e64 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe fbff 	bl	8001e64 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e11c      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	4b91      	ldr	r3, [pc, #580]	; (80038bc <HAL_RCC_OscConfig+0x608>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4013      	ands	r3, r2
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x3e2>
 8003688:	4b8b      	ldr	r3, [pc, #556]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800368a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800368c:	4b8a      	ldr	r3, [pc, #552]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x41c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x404>
 800369e:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a2:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036a4:	2104      	movs	r1, #4
 80036a6:	430a      	orrs	r2, r1
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80036aa:	4b83      	ldr	r3, [pc, #524]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ae:	4b82      	ldr	r3, [pc, #520]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x41c>
 80036b8:	4b7f      	ldr	r3, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036bc:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036be:	2101      	movs	r1, #1
 80036c0:	438a      	bics	r2, r1
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c4:	4b7c      	ldr	r3, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036c8:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036ca:	2104      	movs	r1, #4
 80036cc:	438a      	bics	r2, r1
 80036ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d014      	beq.n	8003702 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe fbc4 	bl	8001e64 <HAL_GetTick>
 80036dc:	0003      	movs	r3, r0
 80036de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fbbf 	bl	8001e64 <HAL_GetTick>
 80036e6:	0002      	movs	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	4a74      	ldr	r2, [pc, #464]	; (80038c0 <HAL_RCC_OscConfig+0x60c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0db      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x42e>
 8003700:	e013      	b.n	800372a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe fbaf 	bl	8001e64 <HAL_GetTick>
 8003706:	0003      	movs	r3, r0
 8003708:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370a:	e009      	b.n	8003720 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fbaa 	bl	8001e64 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	4a6a      	ldr	r2, [pc, #424]	; (80038c0 <HAL_RCC_OscConfig+0x60c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0c6      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800372a:	231f      	movs	r3, #31
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003738:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800373a:	4962      	ldr	r1, [pc, #392]	; (80038c4 <HAL_RCC_OscConfig+0x610>)
 800373c:	400a      	ands	r2, r1
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d100      	bne.n	800374a <HAL_RCC_OscConfig+0x496>
 8003748:	e0b0      	b.n	80038ac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374a:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2238      	movs	r2, #56	; 0x38
 8003750:	4013      	ands	r3, r2
 8003752:	2b10      	cmp	r3, #16
 8003754:	d100      	bne.n	8003758 <HAL_RCC_OscConfig+0x4a4>
 8003756:	e078      	b.n	800384a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d153      	bne.n	8003808 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003766:	4958      	ldr	r1, [pc, #352]	; (80038c8 <HAL_RCC_OscConfig+0x614>)
 8003768:	400a      	ands	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fb7a 	bl	8001e64 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe fb75 	bl	8001e64 <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e092      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	049b      	lsls	r3, r3, #18
 8003790:	4013      	ands	r3, r2
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <HAL_RCC_OscConfig+0x618>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	431a      	orrs	r2, r3
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0449      	lsls	r1, r1, #17
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	0549      	lsls	r1, r1, #21
 80037da:	430a      	orrs	r2, r1
 80037dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fe fb41 	bl	8001e64 <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fb3c 	bl	8001e64 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e059      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	049b      	lsls	r3, r3, #18
 8003802:	4013      	ands	r3, r2
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x534>
 8003806:	e051      	b.n	80038ac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800380e:	492e      	ldr	r1, [pc, #184]	; (80038c8 <HAL_RCC_OscConfig+0x614>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fb26 	bl	8001e64 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe fb21 	bl	8001e64 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e03e      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	049b      	lsls	r3, r3, #18
 8003838:	4013      	ands	r3, r2
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003842:	4923      	ldr	r1, [pc, #140]	; (80038d0 <HAL_RCC_OscConfig+0x61c>)
 8003844:	400a      	ands	r2, r1
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	e030      	b.n	80038ac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e02b      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x604>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2203      	movs	r2, #3
 8003860:	401a      	ands	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	429a      	cmp	r2, r3
 8003868:	d11e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2270      	movs	r2, #112	; 0x70
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d117      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	23fe      	movs	r3, #254	; 0xfe
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d10e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	23f8      	movs	r3, #248	; 0xf8
 800388e:	039b      	lsls	r3, r3, #14
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	0f5b      	lsrs	r3, r3, #29
 800389e:	075a      	lsls	r2, r3, #29
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b008      	add	sp, #32
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	00001388 	.word	0x00001388
 80038c4:	efffffff 	.word	0xefffffff
 80038c8:	feffffff 	.word	0xfeffffff
 80038cc:	1fc1808c 	.word	0x1fc1808c
 80038d0:	effefffc 	.word	0xeffefffc

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0e9      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2207      	movs	r2, #7
 80038ee:	4013      	ands	r3, r2
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d91e      	bls.n	8003934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4393      	bics	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	4b70      	ldr	r3, [pc, #448]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003908:	f7fe faac 	bl	8001e64 <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003910:	e009      	b.n	8003926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fe faa7 	bl	8001e64 <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <HAL_RCC_ClockConfig+0x1f4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0ca      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2207      	movs	r2, #7
 800392c:	4013      	ands	r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d1ee      	bne.n	8003912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d015      	beq.n	800396a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2204      	movs	r2, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d006      	beq.n	8003956 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003948:	4b60      	ldr	r3, [pc, #384]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	4b5f      	ldr	r3, [pc, #380]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 800394e:	21e0      	movs	r1, #224	; 0xe0
 8003950:	01c9      	lsls	r1, r1, #7
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003956:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <HAL_RCC_ClockConfig+0x1fc>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	4013      	ands	r3, r2
 8003972:	d057      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	d12b      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e097      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003994:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	049b      	lsls	r3, r3, #18
 800399c:	4013      	ands	r3, r2
 800399e:	d11f      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e08b      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4013      	ands	r3, r2
 80039b6:	d113      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e07f      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	2202      	movs	r2, #2
 80039ca:	4013      	ands	r3, r2
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e074      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e06d      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2207      	movs	r2, #7
 80039e6:	4393      	bics	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fe fa36 	bl	8001e64 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fc:	e009      	b.n	8003a12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fe:	f7fe fa31 	bl	8001e64 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e054      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2238      	movs	r2, #56	; 0x38
 8003a18:	401a      	ands	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1ec      	bne.n	80039fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2207      	movs	r2, #7
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d21e      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2207      	movs	r2, #7
 8003a38:	4393      	bics	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a44:	f7fe fa0e 	bl	8001e64 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a4c:	e009      	b.n	8003a62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4e:	f7fe fa09 	bl	8001e64 <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e02c      	b.n	8003abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2207      	movs	r2, #7
 8003a68:	4013      	ands	r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2204      	movs	r2, #4
 8003a76:	4013      	ands	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_RCC_ClockConfig+0x200>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a8e:	f000 f829 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a92:	0001      	movs	r1, r0
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_RCC_ClockConfig+0x1f8>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x204>)
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	58d3      	ldr	r3, [r2, r3]
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	40da      	lsrs	r2, r3
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_ClockConfig+0x208>)
 8003aae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_ClockConfig+0x20c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7fe f979 	bl	8001dac <HAL_InitTick>
 8003aba:	0003      	movs	r3, r0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	00001388 	.word	0x00001388
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	fffff0ff 	.word	0xfffff0ff
 8003ad4:	ffff8fff 	.word	0xffff8fff
 8003ad8:	0800490c 	.word	0x0800490c
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aea:	4b3c      	ldr	r3, [pc, #240]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2238      	movs	r2, #56	; 0x38
 8003af0:	4013      	ands	r3, r2
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0adb      	lsrs	r3, r3, #11
 8003afa:	2207      	movs	r2, #7
 8003afc:	4013      	ands	r3, r2
 8003afe:	2201      	movs	r2, #1
 8003b00:	409a      	lsls	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b06:	6839      	ldr	r1, [r7, #0]
 8003b08:	4835      	ldr	r0, [pc, #212]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b0a:	f7fc faf9 	bl	8000100 <__udivsi3>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e05d      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2238      	movs	r2, #56	; 0x38
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b20:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	e054      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2238      	movs	r2, #56	; 0x38
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d138      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2203      	movs	r2, #3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	2207      	movs	r2, #7
 8003b44:	4013      	ands	r3, r2
 8003b46:	3301      	adds	r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4824      	ldr	r0, [pc, #144]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b54:	f7fc fad4 	bl	8000100 <__udivsi3>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	227f      	movs	r2, #127	; 0x7f
 8003b64:	4013      	ands	r3, r2
 8003b66:	434b      	muls	r3, r1
 8003b68:	617b      	str	r3, [r7, #20]
        break;
 8003b6a:	e00d      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	481c      	ldr	r0, [pc, #112]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b70:	f7fc fac6 	bl	8000100 <__udivsi3>
 8003b74:	0003      	movs	r3, r0
 8003b76:	0019      	movs	r1, r3
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	227f      	movs	r2, #127	; 0x7f
 8003b80:	4013      	ands	r3, r2
 8003b82:	434b      	muls	r3, r1
 8003b84:	617b      	str	r3, [r7, #20]
        break;
 8003b86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	0f5b      	lsrs	r3, r3, #29
 8003b8e:	2207      	movs	r2, #7
 8003b90:	4013      	ands	r3, r2
 8003b92:	3301      	adds	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	6978      	ldr	r0, [r7, #20]
 8003b9a:	f7fc fab1 	bl	8000100 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2238      	movs	r2, #56	; 0x38
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d103      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2238      	movs	r2, #56	; 0x38
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b18      	cmp	r3, #24
 8003bc2:	d103      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003bc4:	23fa      	movs	r3, #250	; 0xfa
 8003bc6:	01db      	lsls	r3, r3, #7
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e001      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd0:	693b      	ldr	r3, [r7, #16]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003bf0:	2313      	movs	r3, #19
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf8:	2312      	movs	r3, #18
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003c0c:	e0a3      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2011      	movs	r0, #17
 8003c10:	183b      	adds	r3, r7, r0
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c16:	4b86      	ldr	r3, [pc, #536]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	055b      	lsls	r3, r3, #21
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d110      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c26:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	0549      	lsls	r1, r1, #21
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c30:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	055b      	lsls	r3, r3, #21
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	2201      	movs	r2, #1
 8003c42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	0049      	lsls	r1, r1, #1
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c52:	f7fe f907 	bl	8001e64 <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe f902 	bl	8001e64 <HAL_GetTick>
 8003c60:	0002      	movs	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d904      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003c6a:	2313      	movs	r3, #19
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	2203      	movs	r2, #3
 8003c70:	701a      	strb	r2, [r3, #0]
        break;
 8003c72:	e005      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d0ed      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003c80:	2313      	movs	r3, #19
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d154      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c8a:	4b69      	ldr	r3, [pc, #420]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4013      	ands	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d019      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d014      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	4a63      	ldr	r2, [pc, #396]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb0:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cb4:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	0249      	lsls	r1, r1, #9
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cc2:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cc4:	495d      	ldr	r1, [pc, #372]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cca:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d016      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe f8c4 	bl	8001e64 <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce0:	e00c      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe f8bf 	bl	8001e64 <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	4a54      	ldr	r2, [pc, #336]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d904      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003cf2:	2313      	movs	r3, #19
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	701a      	strb	r2, [r3, #0]
            break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfc:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d0ed      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003d06:	2313      	movs	r3, #19
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d10:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	4a48      	ldr	r2, [pc, #288]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d20:	430a      	orrs	r2, r1
 8003d22:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d24:	e00c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d26:	2312      	movs	r3, #18
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2213      	movs	r2, #19
 8003d2c:	18ba      	adds	r2, r7, r2
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	2312      	movs	r3, #18
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	2213      	movs	r2, #19
 8003d3a:	18ba      	adds	r2, r7, r2
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d40:	2311      	movs	r3, #17
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d50:	493c      	ldr	r1, [pc, #240]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	2203      	movs	r2, #3
 8003d66:	4393      	bics	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	220c      	movs	r2, #12
 8003d84:	4393      	bics	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2220      	movs	r2, #32
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dac:	430a      	orrs	r2, r1
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	01db      	lsls	r3, r3, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	d015      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dbc:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	0899      	lsrs	r1, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	05db      	lsls	r3, r3, #23
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	0249      	lsls	r1, r1, #9
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4013      	ands	r3, r2
 8003df2:	d016      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e04:	430a      	orrs	r2, r1
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d106      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	0249      	lsls	r1, r1, #9
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e22:	2312      	movs	r3, #18
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
 8003e38:	fffffcff 	.word	0xfffffcff
 8003e3c:	fffeffff 	.word	0xfffeffff
 8003e40:	00001388 	.word	0x00001388
 8003e44:	efffffff 	.word	0xefffffff
 8003e48:	ffffcfff 	.word	0xffffcfff
 8003e4c:	ffff3fff 	.word	0xffff3fff

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	20000010 	.word	0x20000010

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	2600      	movs	r6, #0
 8003e60:	4d0c      	ldr	r5, [pc, #48]	; (8003e94 <__libc_init_array+0x38>)
 8003e62:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	f000 fcd7 	bl	8004820 <_init>
 8003e72:	4d0a      	ldr	r5, [pc, #40]	; (8003e9c <__libc_init_array+0x40>)
 8003e74:	4c0a      	ldr	r4, [pc, #40]	; (8003ea0 <__libc_init_array+0x44>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	00b3      	lsls	r3, r6, #2
 8003e82:	58eb      	ldr	r3, [r5, r3]
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	00b3      	lsls	r3, r6, #2
 8003e8c:	58eb      	ldr	r3, [r5, r3]
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08004964 	.word	0x08004964
 8003e98:	08004964 	.word	0x08004964
 8003e9c:	08004964 	.word	0x08004964
 8003ea0:	08004968 	.word	0x08004968

08003ea4 <memset>:
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	1882      	adds	r2, r0, r2
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d100      	bne.n	8003eae <memset+0xa>
 8003eac:	4770      	bx	lr
 8003eae:	7019      	strb	r1, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	e7f9      	b.n	8003ea8 <memset+0x4>

08003eb4 <powf>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	1c0c      	adds	r4, r1, #0
 8003eb8:	1c06      	adds	r6, r0, #0
 8003eba:	f000 f86b 	bl	8003f94 <__ieee754_powf>
 8003ebe:	1c21      	adds	r1, r4, #0
 8003ec0:	1c05      	adds	r5, r0, #0
 8003ec2:	1c20      	adds	r0, r4, #0
 8003ec4:	f7fd f834 	bl	8000f30 <__aeabi_fcmpun>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d133      	bne.n	8003f34 <powf+0x80>
 8003ecc:	2100      	movs	r1, #0
 8003ece:	1c30      	adds	r0, r6, #0
 8003ed0:	f7fc f9ae 	bl	8000230 <__aeabi_fcmpeq>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d014      	beq.n	8003f02 <powf+0x4e>
 8003ed8:	2100      	movs	r1, #0
 8003eda:	1c20      	adds	r0, r4, #0
 8003edc:	f7fc f9a8 	bl	8000230 <__aeabi_fcmpeq>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d138      	bne.n	8003f56 <powf+0xa2>
 8003ee4:	1c20      	adds	r0, r4, #0
 8003ee6:	f000 fc37 	bl	8004758 <finitef>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d022      	beq.n	8003f34 <powf+0x80>
 8003eee:	2100      	movs	r1, #0
 8003ef0:	1c20      	adds	r0, r4, #0
 8003ef2:	f7fc f9a3 	bl	800023c <__aeabi_fcmplt>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d01c      	beq.n	8003f34 <powf+0x80>
 8003efa:	f7ff ffa9 	bl	8003e50 <__errno>
 8003efe:	2322      	movs	r3, #34	; 0x22
 8003f00:	e017      	b.n	8003f32 <powf+0x7e>
 8003f02:	1c28      	adds	r0, r5, #0
 8003f04:	f000 fc28 	bl	8004758 <finitef>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d115      	bne.n	8003f38 <powf+0x84>
 8003f0c:	1c30      	adds	r0, r6, #0
 8003f0e:	f000 fc23 	bl	8004758 <finitef>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d010      	beq.n	8003f38 <powf+0x84>
 8003f16:	1c20      	adds	r0, r4, #0
 8003f18:	f000 fc1e 	bl	8004758 <finitef>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d00b      	beq.n	8003f38 <powf+0x84>
 8003f20:	1c29      	adds	r1, r5, #0
 8003f22:	1c28      	adds	r0, r5, #0
 8003f24:	f7fd f804 	bl	8000f30 <__aeabi_fcmpun>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d0e6      	beq.n	8003efa <powf+0x46>
 8003f2c:	f7ff ff90 	bl	8003e50 <__errno>
 8003f30:	2321      	movs	r3, #33	; 0x21
 8003f32:	6003      	str	r3, [r0, #0]
 8003f34:	1c28      	adds	r0, r5, #0
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	2100      	movs	r1, #0
 8003f3a:	1c28      	adds	r0, r5, #0
 8003f3c:	f7fc f978 	bl	8000230 <__aeabi_fcmpeq>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d0f7      	beq.n	8003f34 <powf+0x80>
 8003f44:	1c30      	adds	r0, r6, #0
 8003f46:	f000 fc07 	bl	8004758 <finitef>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0f2      	beq.n	8003f34 <powf+0x80>
 8003f4e:	1c20      	adds	r0, r4, #0
 8003f50:	f000 fc02 	bl	8004758 <finitef>
 8003f54:	e7cf      	b.n	8003ef6 <powf+0x42>
 8003f56:	25fe      	movs	r5, #254	; 0xfe
 8003f58:	05ad      	lsls	r5, r5, #22
 8003f5a:	e7eb      	b.n	8003f34 <powf+0x80>

08003f5c <sqrtf>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	1c05      	adds	r5, r0, #0
 8003f60:	f000 fb7e 	bl	8004660 <__ieee754_sqrtf>
 8003f64:	1c29      	adds	r1, r5, #0
 8003f66:	1c04      	adds	r4, r0, #0
 8003f68:	1c28      	adds	r0, r5, #0
 8003f6a:	f7fc ffe1 	bl	8000f30 <__aeabi_fcmpun>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d10e      	bne.n	8003f90 <sqrtf+0x34>
 8003f72:	2100      	movs	r1, #0
 8003f74:	1c28      	adds	r0, r5, #0
 8003f76:	f7fc f961 	bl	800023c <__aeabi_fcmplt>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d008      	beq.n	8003f90 <sqrtf+0x34>
 8003f7e:	f7ff ff67 	bl	8003e50 <__errno>
 8003f82:	2321      	movs	r3, #33	; 0x21
 8003f84:	2100      	movs	r1, #0
 8003f86:	6003      	str	r3, [r0, #0]
 8003f88:	1c08      	adds	r0, r1, #0
 8003f8a:	f7fc fb35 	bl	80005f8 <__aeabi_fdiv>
 8003f8e:	1c04      	adds	r4, r0, #0
 8003f90:	1c20      	adds	r0, r4, #0
 8003f92:	bd70      	pop	{r4, r5, r6, pc}

08003f94 <__ieee754_powf>:
 8003f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f96:	b08b      	sub	sp, #44	; 0x2c
 8003f98:	9101      	str	r1, [sp, #4]
 8003f9a:	9f01      	ldr	r7, [sp, #4]
 8003f9c:	1c05      	adds	r5, r0, #0
 8003f9e:	007b      	lsls	r3, r7, #1
 8003fa0:	9003      	str	r0, [sp, #12]
 8003fa2:	085e      	lsrs	r6, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <__ieee754_powf+0x30>
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	03db      	lsls	r3, r3, #15
 8003fac:	4043      	eors	r3, r0
 8003fae:	4a96      	ldr	r2, [pc, #600]	; (8004208 <__ieee754_powf+0x274>)
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d800      	bhi.n	8003fb8 <__ieee754_powf+0x24>
 8003fb6:	e319      	b.n	80045ec <__ieee754_powf+0x658>
 8003fb8:	9901      	ldr	r1, [sp, #4]
 8003fba:	1c28      	adds	r0, r5, #0
 8003fbc:	f7fc f97e 	bl	80002bc <__aeabi_fadd>
 8003fc0:	b00b      	add	sp, #44	; 0x2c
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	0044      	lsls	r4, r0, #1
 8003fc8:	0864      	lsrs	r4, r4, #1
 8003fca:	05d2      	lsls	r2, r2, #23
 8003fcc:	4294      	cmp	r4, r2
 8003fce:	dcf3      	bgt.n	8003fb8 <__ieee754_powf+0x24>
 8003fd0:	23fe      	movs	r3, #254	; 0xfe
 8003fd2:	059b      	lsls	r3, r3, #22
 8003fd4:	4296      	cmp	r6, r2
 8003fd6:	dd06      	ble.n	8003fe6 <__ieee754_powf+0x52>
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	d1ed      	bne.n	8003fb8 <__ieee754_powf+0x24>
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	9a01      	ldr	r2, [sp, #4]
 8003fe0:	03db      	lsls	r3, r3, #15
 8003fe2:	4053      	eors	r3, r2
 8003fe4:	e7e3      	b.n	8003fae <__ieee754_powf+0x1a>
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	9102      	str	r1, [sp, #8]
 8003fea:	2800      	cmp	r0, #0
 8003fec:	da22      	bge.n	8004034 <__ieee754_powf+0xa0>
 8003fee:	2197      	movs	r1, #151	; 0x97
 8003ff0:	05c9      	lsls	r1, r1, #23
 8003ff2:	428e      	cmp	r6, r1
 8003ff4:	da1c      	bge.n	8004030 <__ieee754_powf+0x9c>
 8003ff6:	429e      	cmp	r6, r3
 8003ff8:	db0d      	blt.n	8004016 <__ieee754_powf+0x82>
 8003ffa:	2396      	movs	r3, #150	; 0x96
 8003ffc:	15f2      	asrs	r2, r6, #23
 8003ffe:	1a9a      	subs	r2, r3, r2
 8004000:	0033      	movs	r3, r6
 8004002:	4113      	asrs	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	4091      	lsls	r1, r2
 8004008:	42b1      	cmp	r1, r6
 800400a:	d104      	bne.n	8004016 <__ieee754_powf+0x82>
 800400c:	2201      	movs	r2, #1
 800400e:	4013      	ands	r3, r2
 8004010:	1892      	adds	r2, r2, r2
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	9302      	str	r3, [sp, #8]
 8004016:	23fe      	movs	r3, #254	; 0xfe
 8004018:	059b      	lsls	r3, r3, #22
 800401a:	429e      	cmp	r6, r3
 800401c:	d11e      	bne.n	800405c <__ieee754_powf+0xc8>
 800401e:	1c28      	adds	r0, r5, #0
 8004020:	2f00      	cmp	r7, #0
 8004022:	dacd      	bge.n	8003fc0 <__ieee754_powf+0x2c>
 8004024:	20fe      	movs	r0, #254	; 0xfe
 8004026:	1c29      	adds	r1, r5, #0
 8004028:	0580      	lsls	r0, r0, #22
 800402a:	f7fc fae5 	bl	80005f8 <__aeabi_fdiv>
 800402e:	e7c7      	b.n	8003fc0 <__ieee754_powf+0x2c>
 8004030:	2102      	movs	r1, #2
 8004032:	9102      	str	r1, [sp, #8]
 8004034:	4296      	cmp	r6, r2
 8004036:	d1ee      	bne.n	8004016 <__ieee754_powf+0x82>
 8004038:	429c      	cmp	r4, r3
 800403a:	d100      	bne.n	800403e <__ieee754_powf+0xaa>
 800403c:	e2d6      	b.n	80045ec <__ieee754_powf+0x658>
 800403e:	dd04      	ble.n	800404a <__ieee754_powf+0xb6>
 8004040:	9801      	ldr	r0, [sp, #4]
 8004042:	2f00      	cmp	r7, #0
 8004044:	dabc      	bge.n	8003fc0 <__ieee754_powf+0x2c>
 8004046:	2000      	movs	r0, #0
 8004048:	e7ba      	b.n	8003fc0 <__ieee754_powf+0x2c>
 800404a:	2f00      	cmp	r7, #0
 800404c:	dafb      	bge.n	8004046 <__ieee754_powf+0xb2>
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	0612      	lsls	r2, r2, #24
 8004052:	4694      	mov	ip, r2
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	4463      	add	r3, ip
 8004058:	0018      	movs	r0, r3
 800405a:	e7b1      	b.n	8003fc0 <__ieee754_powf+0x2c>
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	05db      	lsls	r3, r3, #23
 8004060:	429f      	cmp	r7, r3
 8004062:	d104      	bne.n	800406e <__ieee754_powf+0xda>
 8004064:	1c29      	adds	r1, r5, #0
 8004066:	1c28      	adds	r0, r5, #0
 8004068:	f7fc fc8e 	bl	8000988 <__aeabi_fmul>
 800406c:	e7a8      	b.n	8003fc0 <__ieee754_powf+0x2c>
 800406e:	23fc      	movs	r3, #252	; 0xfc
 8004070:	1c28      	adds	r0, r5, #0
 8004072:	059b      	lsls	r3, r3, #22
 8004074:	429f      	cmp	r7, r3
 8004076:	d104      	bne.n	8004082 <__ieee754_powf+0xee>
 8004078:	2d00      	cmp	r5, #0
 800407a:	db02      	blt.n	8004082 <__ieee754_powf+0xee>
 800407c:	f000 faf0 	bl	8004660 <__ieee754_sqrtf>
 8004080:	e79e      	b.n	8003fc0 <__ieee754_powf+0x2c>
 8004082:	f000 fb66 	bl	8004752 <fabsf>
 8004086:	2c00      	cmp	r4, #0
 8004088:	d005      	beq.n	8004096 <__ieee754_powf+0x102>
 800408a:	22fe      	movs	r2, #254	; 0xfe
 800408c:	00ab      	lsls	r3, r5, #2
 800408e:	089b      	lsrs	r3, r3, #2
 8004090:	0592      	lsls	r2, r2, #22
 8004092:	4293      	cmp	r3, r2
 8004094:	d11c      	bne.n	80040d0 <__ieee754_powf+0x13c>
 8004096:	2f00      	cmp	r7, #0
 8004098:	da04      	bge.n	80040a4 <__ieee754_powf+0x110>
 800409a:	1c01      	adds	r1, r0, #0
 800409c:	20fe      	movs	r0, #254	; 0xfe
 800409e:	0580      	lsls	r0, r0, #22
 80040a0:	f7fc faaa 	bl	80005f8 <__aeabi_fdiv>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db00      	blt.n	80040ac <__ieee754_powf+0x118>
 80040aa:	e789      	b.n	8003fc0 <__ieee754_powf+0x2c>
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <__ieee754_powf+0x278>)
 80040ae:	18e4      	adds	r4, r4, r3
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	431c      	orrs	r4, r3
 80040b4:	d104      	bne.n	80040c0 <__ieee754_powf+0x12c>
 80040b6:	1c01      	adds	r1, r0, #0
 80040b8:	f7fc fd8c 	bl	8000bd4 <__aeabi_fsub>
 80040bc:	1c01      	adds	r1, r0, #0
 80040be:	e7b4      	b.n	800402a <__ieee754_powf+0x96>
 80040c0:	9b02      	ldr	r3, [sp, #8]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d000      	beq.n	80040c8 <__ieee754_powf+0x134>
 80040c6:	e77b      	b.n	8003fc0 <__ieee754_powf+0x2c>
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	18c0      	adds	r0, r0, r3
 80040ce:	e777      	b.n	8003fc0 <__ieee754_powf+0x2c>
 80040d0:	0feb      	lsrs	r3, r5, #31
 80040d2:	3b01      	subs	r3, #1
 80040d4:	9306      	str	r3, [sp, #24]
 80040d6:	9a06      	ldr	r2, [sp, #24]
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	d102      	bne.n	80040e4 <__ieee754_powf+0x150>
 80040de:	1c29      	adds	r1, r5, #0
 80040e0:	1c28      	adds	r0, r5, #0
 80040e2:	e7e9      	b.n	80040b8 <__ieee754_powf+0x124>
 80040e4:	239a      	movs	r3, #154	; 0x9a
 80040e6:	05db      	lsls	r3, r3, #23
 80040e8:	429e      	cmp	r6, r3
 80040ea:	dc00      	bgt.n	80040ee <__ieee754_powf+0x15a>
 80040ec:	e09e      	b.n	800422c <__ieee754_powf+0x298>
 80040ee:	4b48      	ldr	r3, [pc, #288]	; (8004210 <__ieee754_powf+0x27c>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	dc05      	bgt.n	8004100 <__ieee754_powf+0x16c>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	da08      	bge.n	800410a <__ieee754_powf+0x176>
 80040f8:	2000      	movs	r0, #0
 80040fa:	f000 fb24 	bl	8004746 <__math_oflowf>
 80040fe:	e75f      	b.n	8003fc0 <__ieee754_powf+0x2c>
 8004100:	4b44      	ldr	r3, [pc, #272]	; (8004214 <__ieee754_powf+0x280>)
 8004102:	429c      	cmp	r4, r3
 8004104:	dd05      	ble.n	8004112 <__ieee754_powf+0x17e>
 8004106:	2f00      	cmp	r7, #0
 8004108:	dcf6      	bgt.n	80040f8 <__ieee754_powf+0x164>
 800410a:	2000      	movs	r0, #0
 800410c:	f000 fb15 	bl	800473a <__math_uflowf>
 8004110:	e756      	b.n	8003fc0 <__ieee754_powf+0x2c>
 8004112:	21fe      	movs	r1, #254	; 0xfe
 8004114:	0589      	lsls	r1, r1, #22
 8004116:	f7fc fd5d 	bl	8000bd4 <__aeabi_fsub>
 800411a:	493f      	ldr	r1, [pc, #252]	; (8004218 <__ieee754_powf+0x284>)
 800411c:	1c04      	adds	r4, r0, #0
 800411e:	f7fc fc33 	bl	8000988 <__aeabi_fmul>
 8004122:	493e      	ldr	r1, [pc, #248]	; (800421c <__ieee754_powf+0x288>)
 8004124:	1c05      	adds	r5, r0, #0
 8004126:	1c20      	adds	r0, r4, #0
 8004128:	f7fc fc2e 	bl	8000988 <__aeabi_fmul>
 800412c:	21fa      	movs	r1, #250	; 0xfa
 800412e:	1c06      	adds	r6, r0, #0
 8004130:	0589      	lsls	r1, r1, #22
 8004132:	1c20      	adds	r0, r4, #0
 8004134:	f7fc fc28 	bl	8000988 <__aeabi_fmul>
 8004138:	1c01      	adds	r1, r0, #0
 800413a:	4839      	ldr	r0, [pc, #228]	; (8004220 <__ieee754_powf+0x28c>)
 800413c:	f7fc fd4a 	bl	8000bd4 <__aeabi_fsub>
 8004140:	1c21      	adds	r1, r4, #0
 8004142:	f7fc fc21 	bl	8000988 <__aeabi_fmul>
 8004146:	1c01      	adds	r1, r0, #0
 8004148:	20fc      	movs	r0, #252	; 0xfc
 800414a:	0580      	lsls	r0, r0, #22
 800414c:	f7fc fd42 	bl	8000bd4 <__aeabi_fsub>
 8004150:	1c21      	adds	r1, r4, #0
 8004152:	1c07      	adds	r7, r0, #0
 8004154:	1c20      	adds	r0, r4, #0
 8004156:	f7fc fc17 	bl	8000988 <__aeabi_fmul>
 800415a:	1c01      	adds	r1, r0, #0
 800415c:	1c38      	adds	r0, r7, #0
 800415e:	f7fc fc13 	bl	8000988 <__aeabi_fmul>
 8004162:	4930      	ldr	r1, [pc, #192]	; (8004224 <__ieee754_powf+0x290>)
 8004164:	f7fc fc10 	bl	8000988 <__aeabi_fmul>
 8004168:	1c01      	adds	r1, r0, #0
 800416a:	1c30      	adds	r0, r6, #0
 800416c:	f7fc fd32 	bl	8000bd4 <__aeabi_fsub>
 8004170:	1c01      	adds	r1, r0, #0
 8004172:	1c06      	adds	r6, r0, #0
 8004174:	1c28      	adds	r0, r5, #0
 8004176:	f7fc f8a1 	bl	80002bc <__aeabi_fadd>
 800417a:	0b04      	lsrs	r4, r0, #12
 800417c:	0324      	lsls	r4, r4, #12
 800417e:	1c29      	adds	r1, r5, #0
 8004180:	1c20      	adds	r0, r4, #0
 8004182:	f7fc fd27 	bl	8000bd4 <__aeabi_fsub>
 8004186:	1c01      	adds	r1, r0, #0
 8004188:	1c30      	adds	r0, r6, #0
 800418a:	f7fc fd23 	bl	8000bd4 <__aeabi_fsub>
 800418e:	9b02      	ldr	r3, [sp, #8]
 8004190:	9a06      	ldr	r2, [sp, #24]
 8004192:	3b01      	subs	r3, #1
 8004194:	1c06      	adds	r6, r0, #0
 8004196:	4313      	orrs	r3, r2
 8004198:	d000      	beq.n	800419c <__ieee754_powf+0x208>
 800419a:	e154      	b.n	8004446 <__ieee754_powf+0x4b2>
 800419c:	4f22      	ldr	r7, [pc, #136]	; (8004228 <__ieee754_powf+0x294>)
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	9801      	ldr	r0, [sp, #4]
 80041a2:	0b1d      	lsrs	r5, r3, #12
 80041a4:	032d      	lsls	r5, r5, #12
 80041a6:	1c29      	adds	r1, r5, #0
 80041a8:	f7fc fd14 	bl	8000bd4 <__aeabi_fsub>
 80041ac:	1c21      	adds	r1, r4, #0
 80041ae:	f7fc fbeb 	bl	8000988 <__aeabi_fmul>
 80041b2:	9901      	ldr	r1, [sp, #4]
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	1c30      	adds	r0, r6, #0
 80041b8:	f7fc fbe6 	bl	8000988 <__aeabi_fmul>
 80041bc:	1c01      	adds	r1, r0, #0
 80041be:	9802      	ldr	r0, [sp, #8]
 80041c0:	f7fc f87c 	bl	80002bc <__aeabi_fadd>
 80041c4:	1c29      	adds	r1, r5, #0
 80041c6:	1c06      	adds	r6, r0, #0
 80041c8:	1c20      	adds	r0, r4, #0
 80041ca:	f7fc fbdd 	bl	8000988 <__aeabi_fmul>
 80041ce:	9003      	str	r0, [sp, #12]
 80041d0:	1c01      	adds	r1, r0, #0
 80041d2:	1c05      	adds	r5, r0, #0
 80041d4:	1c30      	adds	r0, r6, #0
 80041d6:	f7fc f871 	bl	80002bc <__aeabi_fadd>
 80041da:	9002      	str	r0, [sp, #8]
 80041dc:	9b02      	ldr	r3, [sp, #8]
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dc00      	bgt.n	80041ee <__ieee754_powf+0x25a>
 80041ec:	e160      	b.n	80044b0 <__ieee754_powf+0x51c>
 80041ee:	2386      	movs	r3, #134	; 0x86
 80041f0:	9a01      	ldr	r2, [sp, #4]
 80041f2:	05db      	lsls	r3, r3, #23
 80041f4:	429a      	cmp	r2, r3
 80041f6:	dc00      	bgt.n	80041fa <__ieee754_powf+0x266>
 80041f8:	e128      	b.n	800444c <__ieee754_powf+0x4b8>
 80041fa:	2100      	movs	r1, #0
 80041fc:	1c38      	adds	r0, r7, #0
 80041fe:	f7fc f81d 	bl	800023c <__aeabi_fcmplt>
 8004202:	1e43      	subs	r3, r0, #1
 8004204:	4198      	sbcs	r0, r3
 8004206:	e778      	b.n	80040fa <__ieee754_powf+0x166>
 8004208:	ff800000 	.word	0xff800000
 800420c:	c0800000 	.word	0xc0800000
 8004210:	3f7ffff3 	.word	0x3f7ffff3
 8004214:	3f800007 	.word	0x3f800007
 8004218:	3fb8aa00 	.word	0x3fb8aa00
 800421c:	36eca570 	.word	0x36eca570
 8004220:	3eaaaaab 	.word	0x3eaaaaab
 8004224:	3fb8aa3b 	.word	0x3fb8aa3b
 8004228:	bf800000 	.word	0xbf800000
 800422c:	23ff      	movs	r3, #255	; 0xff
 800422e:	05db      	lsls	r3, r3, #23
 8004230:	2200      	movs	r2, #0
 8004232:	422b      	tst	r3, r5
 8004234:	d106      	bne.n	8004244 <__ieee754_powf+0x2b0>
 8004236:	2197      	movs	r1, #151	; 0x97
 8004238:	05c9      	lsls	r1, r1, #23
 800423a:	f7fc fba5 	bl	8000988 <__aeabi_fmul>
 800423e:	2218      	movs	r2, #24
 8004240:	0004      	movs	r4, r0
 8004242:	4252      	negs	r2, r2
 8004244:	25fe      	movs	r5, #254	; 0xfe
 8004246:	15e3      	asrs	r3, r4, #23
 8004248:	3b7f      	subs	r3, #127	; 0x7f
 800424a:	189b      	adds	r3, r3, r2
 800424c:	9305      	str	r3, [sp, #20]
 800424e:	0264      	lsls	r4, r4, #9
 8004250:	4be8      	ldr	r3, [pc, #928]	; (80045f4 <__ieee754_powf+0x660>)
 8004252:	0a64      	lsrs	r4, r4, #9
 8004254:	05ad      	lsls	r5, r5, #22
 8004256:	2600      	movs	r6, #0
 8004258:	4325      	orrs	r5, r4
 800425a:	429c      	cmp	r4, r3
 800425c:	dd09      	ble.n	8004272 <__ieee754_powf+0x2de>
 800425e:	4be6      	ldr	r3, [pc, #920]	; (80045f8 <__ieee754_powf+0x664>)
 8004260:	3601      	adds	r6, #1
 8004262:	429c      	cmp	r4, r3
 8004264:	dd05      	ble.n	8004272 <__ieee754_powf+0x2de>
 8004266:	9b05      	ldr	r3, [sp, #20]
 8004268:	199b      	adds	r3, r3, r6
 800426a:	2600      	movs	r6, #0
 800426c:	9305      	str	r3, [sp, #20]
 800426e:	4be3      	ldr	r3, [pc, #908]	; (80045fc <__ieee754_powf+0x668>)
 8004270:	18ed      	adds	r5, r5, r3
 8004272:	00b3      	lsls	r3, r6, #2
 8004274:	9307      	str	r3, [sp, #28]
 8004276:	4be2      	ldr	r3, [pc, #904]	; (8004600 <__ieee754_powf+0x66c>)
 8004278:	00b2      	lsls	r2, r6, #2
 800427a:	58d3      	ldr	r3, [r2, r3]
 800427c:	1c28      	adds	r0, r5, #0
 800427e:	1c19      	adds	r1, r3, #0
 8004280:	9304      	str	r3, [sp, #16]
 8004282:	9509      	str	r5, [sp, #36]	; 0x24
 8004284:	f7fc fca6 	bl	8000bd4 <__aeabi_fsub>
 8004288:	1c29      	adds	r1, r5, #0
 800428a:	1c04      	adds	r4, r0, #0
 800428c:	9804      	ldr	r0, [sp, #16]
 800428e:	f7fc f815 	bl	80002bc <__aeabi_fadd>
 8004292:	1c01      	adds	r1, r0, #0
 8004294:	20fe      	movs	r0, #254	; 0xfe
 8004296:	0580      	lsls	r0, r0, #22
 8004298:	f7fc f9ae 	bl	80005f8 <__aeabi_fdiv>
 800429c:	1c01      	adds	r1, r0, #0
 800429e:	9008      	str	r0, [sp, #32]
 80042a0:	1c20      	adds	r0, r4, #0
 80042a2:	f7fc fb71 	bl	8000988 <__aeabi_fmul>
 80042a6:	9003      	str	r0, [sp, #12]
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	106d      	asrs	r5, r5, #1
 80042ac:	0b1f      	lsrs	r7, r3, #12
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	059b      	lsls	r3, r3, #22
 80042b2:	431d      	orrs	r5, r3
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	02db      	lsls	r3, r3, #11
 80042b8:	18ed      	adds	r5, r5, r3
 80042ba:	0576      	lsls	r6, r6, #21
 80042bc:	033f      	lsls	r7, r7, #12
 80042be:	19ae      	adds	r6, r5, r6
 80042c0:	1c31      	adds	r1, r6, #0
 80042c2:	1c38      	adds	r0, r7, #0
 80042c4:	f7fc fb60 	bl	8000988 <__aeabi_fmul>
 80042c8:	1c01      	adds	r1, r0, #0
 80042ca:	1c20      	adds	r0, r4, #0
 80042cc:	f7fc fc82 	bl	8000bd4 <__aeabi_fsub>
 80042d0:	9904      	ldr	r1, [sp, #16]
 80042d2:	1c04      	adds	r4, r0, #0
 80042d4:	1c30      	adds	r0, r6, #0
 80042d6:	f7fc fc7d 	bl	8000bd4 <__aeabi_fsub>
 80042da:	1c01      	adds	r1, r0, #0
 80042dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042de:	f7fc fc79 	bl	8000bd4 <__aeabi_fsub>
 80042e2:	1c39      	adds	r1, r7, #0
 80042e4:	f7fc fb50 	bl	8000988 <__aeabi_fmul>
 80042e8:	1c01      	adds	r1, r0, #0
 80042ea:	1c20      	adds	r0, r4, #0
 80042ec:	f7fc fc72 	bl	8000bd4 <__aeabi_fsub>
 80042f0:	9908      	ldr	r1, [sp, #32]
 80042f2:	f7fc fb49 	bl	8000988 <__aeabi_fmul>
 80042f6:	9903      	ldr	r1, [sp, #12]
 80042f8:	9004      	str	r0, [sp, #16]
 80042fa:	1c08      	adds	r0, r1, #0
 80042fc:	f7fc fb44 	bl	8000988 <__aeabi_fmul>
 8004300:	49c0      	ldr	r1, [pc, #768]	; (8004604 <__ieee754_powf+0x670>)
 8004302:	1c04      	adds	r4, r0, #0
 8004304:	f7fc fb40 	bl	8000988 <__aeabi_fmul>
 8004308:	49bf      	ldr	r1, [pc, #764]	; (8004608 <__ieee754_powf+0x674>)
 800430a:	f7fb ffd7 	bl	80002bc <__aeabi_fadd>
 800430e:	1c21      	adds	r1, r4, #0
 8004310:	f7fc fb3a 	bl	8000988 <__aeabi_fmul>
 8004314:	49bd      	ldr	r1, [pc, #756]	; (800460c <__ieee754_powf+0x678>)
 8004316:	f7fb ffd1 	bl	80002bc <__aeabi_fadd>
 800431a:	1c21      	adds	r1, r4, #0
 800431c:	f7fc fb34 	bl	8000988 <__aeabi_fmul>
 8004320:	49bb      	ldr	r1, [pc, #748]	; (8004610 <__ieee754_powf+0x67c>)
 8004322:	f7fb ffcb 	bl	80002bc <__aeabi_fadd>
 8004326:	1c21      	adds	r1, r4, #0
 8004328:	f7fc fb2e 	bl	8000988 <__aeabi_fmul>
 800432c:	49b9      	ldr	r1, [pc, #740]	; (8004614 <__ieee754_powf+0x680>)
 800432e:	f7fb ffc5 	bl	80002bc <__aeabi_fadd>
 8004332:	1c21      	adds	r1, r4, #0
 8004334:	f7fc fb28 	bl	8000988 <__aeabi_fmul>
 8004338:	49b7      	ldr	r1, [pc, #732]	; (8004618 <__ieee754_powf+0x684>)
 800433a:	f7fb ffbf 	bl	80002bc <__aeabi_fadd>
 800433e:	1c21      	adds	r1, r4, #0
 8004340:	1c05      	adds	r5, r0, #0
 8004342:	1c20      	adds	r0, r4, #0
 8004344:	f7fc fb20 	bl	8000988 <__aeabi_fmul>
 8004348:	1c01      	adds	r1, r0, #0
 800434a:	1c28      	adds	r0, r5, #0
 800434c:	f7fc fb1c 	bl	8000988 <__aeabi_fmul>
 8004350:	1c39      	adds	r1, r7, #0
 8004352:	1c04      	adds	r4, r0, #0
 8004354:	9803      	ldr	r0, [sp, #12]
 8004356:	f7fb ffb1 	bl	80002bc <__aeabi_fadd>
 800435a:	9904      	ldr	r1, [sp, #16]
 800435c:	f7fc fb14 	bl	8000988 <__aeabi_fmul>
 8004360:	1c21      	adds	r1, r4, #0
 8004362:	f7fb ffab 	bl	80002bc <__aeabi_fadd>
 8004366:	1c39      	adds	r1, r7, #0
 8004368:	1c06      	adds	r6, r0, #0
 800436a:	1c38      	adds	r0, r7, #0
 800436c:	f7fc fb0c 	bl	8000988 <__aeabi_fmul>
 8004370:	49aa      	ldr	r1, [pc, #680]	; (800461c <__ieee754_powf+0x688>)
 8004372:	9008      	str	r0, [sp, #32]
 8004374:	f7fb ffa2 	bl	80002bc <__aeabi_fadd>
 8004378:	1c31      	adds	r1, r6, #0
 800437a:	f7fb ff9f 	bl	80002bc <__aeabi_fadd>
 800437e:	0b04      	lsrs	r4, r0, #12
 8004380:	0324      	lsls	r4, r4, #12
 8004382:	1c21      	adds	r1, r4, #0
 8004384:	1c38      	adds	r0, r7, #0
 8004386:	f7fc faff 	bl	8000988 <__aeabi_fmul>
 800438a:	49a4      	ldr	r1, [pc, #656]	; (800461c <__ieee754_powf+0x688>)
 800438c:	1c05      	adds	r5, r0, #0
 800438e:	1c20      	adds	r0, r4, #0
 8004390:	f7fc fc20 	bl	8000bd4 <__aeabi_fsub>
 8004394:	9908      	ldr	r1, [sp, #32]
 8004396:	f7fc fc1d 	bl	8000bd4 <__aeabi_fsub>
 800439a:	1c01      	adds	r1, r0, #0
 800439c:	1c30      	adds	r0, r6, #0
 800439e:	f7fc fc19 	bl	8000bd4 <__aeabi_fsub>
 80043a2:	9903      	ldr	r1, [sp, #12]
 80043a4:	f7fc faf0 	bl	8000988 <__aeabi_fmul>
 80043a8:	1c21      	adds	r1, r4, #0
 80043aa:	1c06      	adds	r6, r0, #0
 80043ac:	9804      	ldr	r0, [sp, #16]
 80043ae:	f7fc faeb 	bl	8000988 <__aeabi_fmul>
 80043b2:	1c01      	adds	r1, r0, #0
 80043b4:	1c30      	adds	r0, r6, #0
 80043b6:	f7fb ff81 	bl	80002bc <__aeabi_fadd>
 80043ba:	1c06      	adds	r6, r0, #0
 80043bc:	1c01      	adds	r1, r0, #0
 80043be:	1c28      	adds	r0, r5, #0
 80043c0:	f7fb ff7c 	bl	80002bc <__aeabi_fadd>
 80043c4:	0b04      	lsrs	r4, r0, #12
 80043c6:	0324      	lsls	r4, r4, #12
 80043c8:	4995      	ldr	r1, [pc, #596]	; (8004620 <__ieee754_powf+0x68c>)
 80043ca:	1c20      	adds	r0, r4, #0
 80043cc:	f7fc fadc 	bl	8000988 <__aeabi_fmul>
 80043d0:	1c29      	adds	r1, r5, #0
 80043d2:	9003      	str	r0, [sp, #12]
 80043d4:	1c20      	adds	r0, r4, #0
 80043d6:	f7fc fbfd 	bl	8000bd4 <__aeabi_fsub>
 80043da:	1c01      	adds	r1, r0, #0
 80043dc:	1c30      	adds	r0, r6, #0
 80043de:	f7fc fbf9 	bl	8000bd4 <__aeabi_fsub>
 80043e2:	4990      	ldr	r1, [pc, #576]	; (8004624 <__ieee754_powf+0x690>)
 80043e4:	f7fc fad0 	bl	8000988 <__aeabi_fmul>
 80043e8:	498f      	ldr	r1, [pc, #572]	; (8004628 <__ieee754_powf+0x694>)
 80043ea:	1c05      	adds	r5, r0, #0
 80043ec:	1c20      	adds	r0, r4, #0
 80043ee:	f7fc facb 	bl	8000988 <__aeabi_fmul>
 80043f2:	1c01      	adds	r1, r0, #0
 80043f4:	1c28      	adds	r0, r5, #0
 80043f6:	f7fb ff61 	bl	80002bc <__aeabi_fadd>
 80043fa:	4b8c      	ldr	r3, [pc, #560]	; (800462c <__ieee754_powf+0x698>)
 80043fc:	9a07      	ldr	r2, [sp, #28]
 80043fe:	58d1      	ldr	r1, [r2, r3]
 8004400:	f7fb ff5c 	bl	80002bc <__aeabi_fadd>
 8004404:	1c05      	adds	r5, r0, #0
 8004406:	9805      	ldr	r0, [sp, #20]
 8004408:	f7fc fdc8 	bl	8000f9c <__aeabi_i2f>
 800440c:	4b88      	ldr	r3, [pc, #544]	; (8004630 <__ieee754_powf+0x69c>)
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	1c06      	adds	r6, r0, #0
 8004412:	58d7      	ldr	r7, [r2, r3]
 8004414:	1c29      	adds	r1, r5, #0
 8004416:	9803      	ldr	r0, [sp, #12]
 8004418:	f7fb ff50 	bl	80002bc <__aeabi_fadd>
 800441c:	1c39      	adds	r1, r7, #0
 800441e:	f7fb ff4d 	bl	80002bc <__aeabi_fadd>
 8004422:	1c31      	adds	r1, r6, #0
 8004424:	f7fb ff4a 	bl	80002bc <__aeabi_fadd>
 8004428:	0b04      	lsrs	r4, r0, #12
 800442a:	0324      	lsls	r4, r4, #12
 800442c:	1c31      	adds	r1, r6, #0
 800442e:	1c20      	adds	r0, r4, #0
 8004430:	f7fc fbd0 	bl	8000bd4 <__aeabi_fsub>
 8004434:	1c39      	adds	r1, r7, #0
 8004436:	f7fc fbcd 	bl	8000bd4 <__aeabi_fsub>
 800443a:	9903      	ldr	r1, [sp, #12]
 800443c:	f7fc fbca 	bl	8000bd4 <__aeabi_fsub>
 8004440:	1c01      	adds	r1, r0, #0
 8004442:	1c28      	adds	r0, r5, #0
 8004444:	e6a1      	b.n	800418a <__ieee754_powf+0x1f6>
 8004446:	27fe      	movs	r7, #254	; 0xfe
 8004448:	05bf      	lsls	r7, r7, #22
 800444a:	e6a8      	b.n	800419e <__ieee754_powf+0x20a>
 800444c:	9a01      	ldr	r2, [sp, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d146      	bne.n	80044e0 <__ieee754_powf+0x54c>
 8004452:	4978      	ldr	r1, [pc, #480]	; (8004634 <__ieee754_powf+0x6a0>)
 8004454:	1c30      	adds	r0, r6, #0
 8004456:	f7fb ff31 	bl	80002bc <__aeabi_fadd>
 800445a:	1c29      	adds	r1, r5, #0
 800445c:	1c04      	adds	r4, r0, #0
 800445e:	9802      	ldr	r0, [sp, #8]
 8004460:	f7fc fbb8 	bl	8000bd4 <__aeabi_fsub>
 8004464:	1c01      	adds	r1, r0, #0
 8004466:	1c20      	adds	r0, r4, #0
 8004468:	f7fb fefc 	bl	8000264 <__aeabi_fcmpgt>
 800446c:	2800      	cmp	r0, #0
 800446e:	d000      	beq.n	8004472 <__ieee754_powf+0x4de>
 8004470:	e6c3      	b.n	80041fa <__ieee754_powf+0x266>
 8004472:	2480      	movs	r4, #128	; 0x80
 8004474:	0424      	lsls	r4, r4, #16
 8004476:	0020      	movs	r0, r4
 8004478:	9b01      	ldr	r3, [sp, #4]
 800447a:	4a6f      	ldr	r2, [pc, #444]	; (8004638 <__ieee754_powf+0x6a4>)
 800447c:	15db      	asrs	r3, r3, #23
 800447e:	3b7e      	subs	r3, #126	; 0x7e
 8004480:	4118      	asrs	r0, r3
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	18c0      	adds	r0, r0, r3
 8004486:	15c3      	asrs	r3, r0, #23
 8004488:	b2db      	uxtb	r3, r3
 800448a:	3b7f      	subs	r3, #127	; 0x7f
 800448c:	411a      	asrs	r2, r3
 800448e:	0001      	movs	r1, r0
 8004490:	4391      	bics	r1, r2
 8004492:	2217      	movs	r2, #23
 8004494:	0240      	lsls	r0, r0, #9
 8004496:	0a40      	lsrs	r0, r0, #9
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	4304      	orrs	r4, r0
 800449c:	411c      	asrs	r4, r3
 800449e:	9b04      	ldr	r3, [sp, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da00      	bge.n	80044a6 <__ieee754_powf+0x512>
 80044a4:	4264      	negs	r4, r4
 80044a6:	1c28      	adds	r0, r5, #0
 80044a8:	f7fc fb94 	bl	8000bd4 <__aeabi_fsub>
 80044ac:	9003      	str	r0, [sp, #12]
 80044ae:	e01d      	b.n	80044ec <__ieee754_powf+0x558>
 80044b0:	4b62      	ldr	r3, [pc, #392]	; (800463c <__ieee754_powf+0x6a8>)
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dd06      	ble.n	80044c6 <__ieee754_powf+0x532>
 80044b8:	2100      	movs	r1, #0
 80044ba:	1c38      	adds	r0, r7, #0
 80044bc:	f7fb febe 	bl	800023c <__aeabi_fcmplt>
 80044c0:	1e43      	subs	r3, r0, #1
 80044c2:	4198      	sbcs	r0, r3
 80044c4:	e622      	b.n	800410c <__ieee754_powf+0x178>
 80044c6:	9a01      	ldr	r2, [sp, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d109      	bne.n	80044e0 <__ieee754_powf+0x54c>
 80044cc:	1c29      	adds	r1, r5, #0
 80044ce:	9802      	ldr	r0, [sp, #8]
 80044d0:	f7fc fb80 	bl	8000bd4 <__aeabi_fsub>
 80044d4:	1c31      	adds	r1, r6, #0
 80044d6:	f7fb fecf 	bl	8000278 <__aeabi_fcmpge>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d0c9      	beq.n	8004472 <__ieee754_powf+0x4de>
 80044de:	e7eb      	b.n	80044b8 <__ieee754_powf+0x524>
 80044e0:	23fc      	movs	r3, #252	; 0xfc
 80044e2:	9a01      	ldr	r2, [sp, #4]
 80044e4:	2400      	movs	r4, #0
 80044e6:	059b      	lsls	r3, r3, #22
 80044e8:	429a      	cmp	r2, r3
 80044ea:	dcc2      	bgt.n	8004472 <__ieee754_powf+0x4de>
 80044ec:	1c31      	adds	r1, r6, #0
 80044ee:	9803      	ldr	r0, [sp, #12]
 80044f0:	f7fb fee4 	bl	80002bc <__aeabi_fadd>
 80044f4:	0b05      	lsrs	r5, r0, #12
 80044f6:	032d      	lsls	r5, r5, #12
 80044f8:	4951      	ldr	r1, [pc, #324]	; (8004640 <__ieee754_powf+0x6ac>)
 80044fa:	1c28      	adds	r0, r5, #0
 80044fc:	f7fc fa44 	bl	8000988 <__aeabi_fmul>
 8004500:	9903      	ldr	r1, [sp, #12]
 8004502:	9001      	str	r0, [sp, #4]
 8004504:	1c28      	adds	r0, r5, #0
 8004506:	f7fc fb65 	bl	8000bd4 <__aeabi_fsub>
 800450a:	1c01      	adds	r1, r0, #0
 800450c:	1c30      	adds	r0, r6, #0
 800450e:	f7fc fb61 	bl	8000bd4 <__aeabi_fsub>
 8004512:	494c      	ldr	r1, [pc, #304]	; (8004644 <__ieee754_powf+0x6b0>)
 8004514:	f7fc fa38 	bl	8000988 <__aeabi_fmul>
 8004518:	494b      	ldr	r1, [pc, #300]	; (8004648 <__ieee754_powf+0x6b4>)
 800451a:	1c06      	adds	r6, r0, #0
 800451c:	1c28      	adds	r0, r5, #0
 800451e:	f7fc fa33 	bl	8000988 <__aeabi_fmul>
 8004522:	1c01      	adds	r1, r0, #0
 8004524:	1c30      	adds	r0, r6, #0
 8004526:	f7fb fec9 	bl	80002bc <__aeabi_fadd>
 800452a:	1c06      	adds	r6, r0, #0
 800452c:	1c01      	adds	r1, r0, #0
 800452e:	9801      	ldr	r0, [sp, #4]
 8004530:	f7fb fec4 	bl	80002bc <__aeabi_fadd>
 8004534:	9901      	ldr	r1, [sp, #4]
 8004536:	1c05      	adds	r5, r0, #0
 8004538:	f7fc fb4c 	bl	8000bd4 <__aeabi_fsub>
 800453c:	1c01      	adds	r1, r0, #0
 800453e:	1c30      	adds	r0, r6, #0
 8004540:	f7fc fb48 	bl	8000bd4 <__aeabi_fsub>
 8004544:	1c29      	adds	r1, r5, #0
 8004546:	9001      	str	r0, [sp, #4]
 8004548:	1c28      	adds	r0, r5, #0
 800454a:	f7fc fa1d 	bl	8000988 <__aeabi_fmul>
 800454e:	493f      	ldr	r1, [pc, #252]	; (800464c <__ieee754_powf+0x6b8>)
 8004550:	1c06      	adds	r6, r0, #0
 8004552:	f7fc fa19 	bl	8000988 <__aeabi_fmul>
 8004556:	493e      	ldr	r1, [pc, #248]	; (8004650 <__ieee754_powf+0x6bc>)
 8004558:	f7fc fb3c 	bl	8000bd4 <__aeabi_fsub>
 800455c:	1c31      	adds	r1, r6, #0
 800455e:	f7fc fa13 	bl	8000988 <__aeabi_fmul>
 8004562:	493c      	ldr	r1, [pc, #240]	; (8004654 <__ieee754_powf+0x6c0>)
 8004564:	f7fb feaa 	bl	80002bc <__aeabi_fadd>
 8004568:	1c31      	adds	r1, r6, #0
 800456a:	f7fc fa0d 	bl	8000988 <__aeabi_fmul>
 800456e:	493a      	ldr	r1, [pc, #232]	; (8004658 <__ieee754_powf+0x6c4>)
 8004570:	f7fc fb30 	bl	8000bd4 <__aeabi_fsub>
 8004574:	1c31      	adds	r1, r6, #0
 8004576:	f7fc fa07 	bl	8000988 <__aeabi_fmul>
 800457a:	4938      	ldr	r1, [pc, #224]	; (800465c <__ieee754_powf+0x6c8>)
 800457c:	f7fb fe9e 	bl	80002bc <__aeabi_fadd>
 8004580:	1c31      	adds	r1, r6, #0
 8004582:	f7fc fa01 	bl	8000988 <__aeabi_fmul>
 8004586:	1c01      	adds	r1, r0, #0
 8004588:	1c28      	adds	r0, r5, #0
 800458a:	f7fc fb23 	bl	8000bd4 <__aeabi_fsub>
 800458e:	1c06      	adds	r6, r0, #0
 8004590:	1c01      	adds	r1, r0, #0
 8004592:	1c28      	adds	r0, r5, #0
 8004594:	f7fc f9f8 	bl	8000988 <__aeabi_fmul>
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	9002      	str	r0, [sp, #8]
 800459c:	05c9      	lsls	r1, r1, #23
 800459e:	1c30      	adds	r0, r6, #0
 80045a0:	f7fc fb18 	bl	8000bd4 <__aeabi_fsub>
 80045a4:	1c01      	adds	r1, r0, #0
 80045a6:	9802      	ldr	r0, [sp, #8]
 80045a8:	f7fc f826 	bl	80005f8 <__aeabi_fdiv>
 80045ac:	9901      	ldr	r1, [sp, #4]
 80045ae:	1c06      	adds	r6, r0, #0
 80045b0:	1c28      	adds	r0, r5, #0
 80045b2:	f7fc f9e9 	bl	8000988 <__aeabi_fmul>
 80045b6:	9901      	ldr	r1, [sp, #4]
 80045b8:	f7fb fe80 	bl	80002bc <__aeabi_fadd>
 80045bc:	1c01      	adds	r1, r0, #0
 80045be:	1c30      	adds	r0, r6, #0
 80045c0:	f7fc fb08 	bl	8000bd4 <__aeabi_fsub>
 80045c4:	1c29      	adds	r1, r5, #0
 80045c6:	f7fc fb05 	bl	8000bd4 <__aeabi_fsub>
 80045ca:	1c01      	adds	r1, r0, #0
 80045cc:	20fe      	movs	r0, #254	; 0xfe
 80045ce:	0580      	lsls	r0, r0, #22
 80045d0:	f7fc fb00 	bl	8000bd4 <__aeabi_fsub>
 80045d4:	05e3      	lsls	r3, r4, #23
 80045d6:	181b      	adds	r3, r3, r0
 80045d8:	15da      	asrs	r2, r3, #23
 80045da:	2a00      	cmp	r2, #0
 80045dc:	dc04      	bgt.n	80045e8 <__ieee754_powf+0x654>
 80045de:	0021      	movs	r1, r4
 80045e0:	f000 f8c4 	bl	800476c <scalbnf>
 80045e4:	1c39      	adds	r1, r7, #0
 80045e6:	e53f      	b.n	8004068 <__ieee754_powf+0xd4>
 80045e8:	1c18      	adds	r0, r3, #0
 80045ea:	e7fb      	b.n	80045e4 <__ieee754_powf+0x650>
 80045ec:	20fe      	movs	r0, #254	; 0xfe
 80045ee:	0580      	lsls	r0, r0, #22
 80045f0:	e4e6      	b.n	8003fc0 <__ieee754_powf+0x2c>
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	001cc471 	.word	0x001cc471
 80045f8:	005db3d6 	.word	0x005db3d6
 80045fc:	ff800000 	.word	0xff800000
 8004600:	0800494c 	.word	0x0800494c
 8004604:	3e53f142 	.word	0x3e53f142
 8004608:	3e6c3255 	.word	0x3e6c3255
 800460c:	3e8ba305 	.word	0x3e8ba305
 8004610:	3eaaaaab 	.word	0x3eaaaaab
 8004614:	3edb6db7 	.word	0x3edb6db7
 8004618:	3f19999a 	.word	0x3f19999a
 800461c:	40400000 	.word	0x40400000
 8004620:	3f763800 	.word	0x3f763800
 8004624:	3f76384f 	.word	0x3f76384f
 8004628:	369dc3a0 	.word	0x369dc3a0
 800462c:	0800495c 	.word	0x0800495c
 8004630:	08004954 	.word	0x08004954
 8004634:	3338aa3c 	.word	0x3338aa3c
 8004638:	007fffff 	.word	0x007fffff
 800463c:	43160000 	.word	0x43160000
 8004640:	3f317200 	.word	0x3f317200
 8004644:	3f317218 	.word	0x3f317218
 8004648:	35bfbe8c 	.word	0x35bfbe8c
 800464c:	3331bb4c 	.word	0x3331bb4c
 8004650:	35ddea0e 	.word	0x35ddea0e
 8004654:	388ab355 	.word	0x388ab355
 8004658:	3b360b61 	.word	0x3b360b61
 800465c:	3e2aaaab 	.word	0x3e2aaaab

08004660 <__ieee754_sqrtf>:
 8004660:	0042      	lsls	r2, r0, #1
 8004662:	0003      	movs	r3, r0
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	1c04      	adds	r4, r0, #0
 8004668:	20ff      	movs	r0, #255	; 0xff
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	05c0      	lsls	r0, r0, #23
 800466e:	4282      	cmp	r2, r0
 8004670:	d30a      	bcc.n	8004688 <__ieee754_sqrtf+0x28>
 8004672:	1c21      	adds	r1, r4, #0
 8004674:	1c20      	adds	r0, r4, #0
 8004676:	f7fc f987 	bl	8000988 <__aeabi_fmul>
 800467a:	1c01      	adds	r1, r0, #0
 800467c:	1c20      	adds	r0, r4, #0
 800467e:	f7fb fe1d 	bl	80002bc <__aeabi_fadd>
 8004682:	1c04      	adds	r4, r0, #0
 8004684:	1c20      	adds	r0, r4, #0
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	2a00      	cmp	r2, #0
 800468a:	d0fb      	beq.n	8004684 <__ieee754_sqrtf+0x24>
 800468c:	2c00      	cmp	r4, #0
 800468e:	da07      	bge.n	80046a0 <__ieee754_sqrtf+0x40>
 8004690:	1c21      	adds	r1, r4, #0
 8004692:	1c20      	adds	r0, r4, #0
 8004694:	f7fc fa9e 	bl	8000bd4 <__aeabi_fsub>
 8004698:	1c01      	adds	r1, r0, #0
 800469a:	f7fb ffad 	bl	80005f8 <__aeabi_fdiv>
 800469e:	e7f0      	b.n	8004682 <__ieee754_sqrtf+0x22>
 80046a0:	0022      	movs	r2, r4
 80046a2:	15e1      	asrs	r1, r4, #23
 80046a4:	4002      	ands	r2, r0
 80046a6:	4204      	tst	r4, r0
 80046a8:	d02e      	beq.n	8004708 <__ieee754_sqrtf+0xa8>
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	000c      	movs	r4, r1
 80046ae:	025b      	lsls	r3, r3, #9
 80046b0:	0a5b      	lsrs	r3, r3, #9
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	3c7f      	subs	r4, #127	; 0x7f
 80046b6:	4313      	orrs	r3, r2
 80046b8:	07ca      	lsls	r2, r1, #31
 80046ba:	d400      	bmi.n	80046be <__ieee754_sqrtf+0x5e>
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	2019      	movs	r0, #25
 80046c4:	0016      	movs	r6, r2
 80046c6:	1064      	asrs	r4, r4, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	0449      	lsls	r1, r1, #17
 80046cc:	1875      	adds	r5, r6, r1
 80046ce:	429d      	cmp	r5, r3
 80046d0:	dc02      	bgt.n	80046d8 <__ieee754_sqrtf+0x78>
 80046d2:	186e      	adds	r6, r5, r1
 80046d4:	1b5b      	subs	r3, r3, r5
 80046d6:	1852      	adds	r2, r2, r1
 80046d8:	3801      	subs	r0, #1
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	0849      	lsrs	r1, r1, #1
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1f4      	bne.n	80046cc <__ieee754_sqrtf+0x6c>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <__ieee754_sqrtf+0x8c>
 80046e6:	2301      	movs	r3, #1
 80046e8:	3201      	adds	r2, #1
 80046ea:	439a      	bics	r2, r3
 80046ec:	23fc      	movs	r3, #252	; 0xfc
 80046ee:	1052      	asrs	r2, r2, #1
 80046f0:	059b      	lsls	r3, r3, #22
 80046f2:	18d2      	adds	r2, r2, r3
 80046f4:	05e4      	lsls	r4, r4, #23
 80046f6:	18a4      	adds	r4, r4, r2
 80046f8:	e7c4      	b.n	8004684 <__ieee754_sqrtf+0x24>
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	3201      	adds	r2, #1
 80046fe:	4203      	tst	r3, r0
 8004700:	d0fb      	beq.n	80046fa <__ieee754_sqrtf+0x9a>
 8004702:	3a01      	subs	r2, #1
 8004704:	1a89      	subs	r1, r1, r2
 8004706:	e7d0      	b.n	80046aa <__ieee754_sqrtf+0x4a>
 8004708:	2080      	movs	r0, #128	; 0x80
 800470a:	0400      	lsls	r0, r0, #16
 800470c:	e7f7      	b.n	80046fe <__ieee754_sqrtf+0x9e>

0800470e <with_errnof>:
 800470e:	b570      	push	{r4, r5, r6, lr}
 8004710:	000d      	movs	r5, r1
 8004712:	1c04      	adds	r4, r0, #0
 8004714:	f7ff fb9c 	bl	8003e50 <__errno>
 8004718:	6005      	str	r5, [r0, #0]
 800471a:	1c20      	adds	r0, r4, #0
 800471c:	bd70      	pop	{r4, r5, r6, pc}

0800471e <xflowf>:
 800471e:	b510      	push	{r4, lr}
 8004720:	1c0b      	adds	r3, r1, #0
 8004722:	2800      	cmp	r0, #0
 8004724:	d002      	beq.n	800472c <xflowf+0xe>
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	18cb      	adds	r3, r1, r3
 800472c:	1c18      	adds	r0, r3, #0
 800472e:	f7fc f92b 	bl	8000988 <__aeabi_fmul>
 8004732:	2122      	movs	r1, #34	; 0x22
 8004734:	f7ff ffeb 	bl	800470e <with_errnof>
 8004738:	bd10      	pop	{r4, pc}

0800473a <__math_uflowf>:
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	b510      	push	{r4, lr}
 800473e:	0549      	lsls	r1, r1, #21
 8004740:	f7ff ffed 	bl	800471e <xflowf>
 8004744:	bd10      	pop	{r4, pc}

08004746 <__math_oflowf>:
 8004746:	21e0      	movs	r1, #224	; 0xe0
 8004748:	b510      	push	{r4, lr}
 800474a:	05c9      	lsls	r1, r1, #23
 800474c:	f7ff ffe7 	bl	800471e <xflowf>
 8004750:	bd10      	pop	{r4, pc}

08004752 <fabsf>:
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	0840      	lsrs	r0, r0, #1
 8004756:	4770      	bx	lr

08004758 <finitef>:
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	0043      	lsls	r3, r0, #1
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	2001      	movs	r0, #1
 8004760:	05d2      	lsls	r2, r2, #23
 8004762:	4293      	cmp	r3, r2
 8004764:	db00      	blt.n	8004768 <finitef+0x10>
 8004766:	2000      	movs	r0, #0
 8004768:	4770      	bx	lr
	...

0800476c <scalbnf>:
 800476c:	0043      	lsls	r3, r0, #1
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	0002      	movs	r2, r0
 8004772:	000c      	movs	r4, r1
 8004774:	085d      	lsrs	r5, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <scalbnf+0x1c>
 800477a:	21ff      	movs	r1, #255	; 0xff
 800477c:	05c9      	lsls	r1, r1, #23
 800477e:	428d      	cmp	r5, r1
 8004780:	d303      	bcc.n	800478a <scalbnf+0x1e>
 8004782:	1c01      	adds	r1, r0, #0
 8004784:	f7fb fd9a 	bl	80002bc <__aeabi_fadd>
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	4208      	tst	r0, r1
 800478c:	d116      	bne.n	80047bc <scalbnf+0x50>
 800478e:	2198      	movs	r1, #152	; 0x98
 8004790:	05c9      	lsls	r1, r1, #23
 8004792:	f7fc f8f9 	bl	8000988 <__aeabi_fmul>
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <scalbnf+0x98>)
 8004798:	429c      	cmp	r4, r3
 800479a:	db29      	blt.n	80047f0 <scalbnf+0x84>
 800479c:	0002      	movs	r2, r0
 800479e:	15c3      	asrs	r3, r0, #23
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3b19      	subs	r3, #25
 80047a4:	191b      	adds	r3, r3, r4
 80047a6:	2bfe      	cmp	r3, #254	; 0xfe
 80047a8:	dd0a      	ble.n	80047c0 <scalbnf+0x54>
 80047aa:	4b17      	ldr	r3, [pc, #92]	; (8004808 <scalbnf+0x9c>)
 80047ac:	2800      	cmp	r0, #0
 80047ae:	da00      	bge.n	80047b2 <scalbnf+0x46>
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <scalbnf+0xa0>)
 80047b2:	4915      	ldr	r1, [pc, #84]	; (8004808 <scalbnf+0x9c>)
 80047b4:	1c18      	adds	r0, r3, #0
 80047b6:	f7fc f8e7 	bl	8000988 <__aeabi_fmul>
 80047ba:	e7e5      	b.n	8004788 <scalbnf+0x1c>
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	e7f1      	b.n	80047a4 <scalbnf+0x38>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd04      	ble.n	80047ce <scalbnf+0x62>
 80047c4:	4812      	ldr	r0, [pc, #72]	; (8004810 <scalbnf+0xa4>)
 80047c6:	4002      	ands	r2, r0
 80047c8:	05d8      	lsls	r0, r3, #23
 80047ca:	4310      	orrs	r0, r2
 80047cc:	e7dc      	b.n	8004788 <scalbnf+0x1c>
 80047ce:	0019      	movs	r1, r3
 80047d0:	3116      	adds	r1, #22
 80047d2:	da0f      	bge.n	80047f4 <scalbnf+0x88>
 80047d4:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <scalbnf+0xa8>)
 80047d6:	0fc3      	lsrs	r3, r0, #31
 80047d8:	4294      	cmp	r4, r2
 80047da:	dd05      	ble.n	80047e8 <scalbnf+0x7c>
 80047dc:	480a      	ldr	r0, [pc, #40]	; (8004808 <scalbnf+0x9c>)
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d000      	beq.n	80047e4 <scalbnf+0x78>
 80047e2:	480a      	ldr	r0, [pc, #40]	; (800480c <scalbnf+0xa0>)
 80047e4:	4908      	ldr	r1, [pc, #32]	; (8004808 <scalbnf+0x9c>)
 80047e6:	e7e6      	b.n	80047b6 <scalbnf+0x4a>
 80047e8:	480b      	ldr	r0, [pc, #44]	; (8004818 <scalbnf+0xac>)
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d000      	beq.n	80047f0 <scalbnf+0x84>
 80047ee:	480b      	ldr	r0, [pc, #44]	; (800481c <scalbnf+0xb0>)
 80047f0:	4909      	ldr	r1, [pc, #36]	; (8004818 <scalbnf+0xac>)
 80047f2:	e7e0      	b.n	80047b6 <scalbnf+0x4a>
 80047f4:	21cc      	movs	r1, #204	; 0xcc
 80047f6:	3319      	adds	r3, #25
 80047f8:	05d8      	lsls	r0, r3, #23
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <scalbnf+0xa4>)
 80047fc:	0589      	lsls	r1, r1, #22
 80047fe:	401a      	ands	r2, r3
 8004800:	4310      	orrs	r0, r2
 8004802:	e7d8      	b.n	80047b6 <scalbnf+0x4a>
 8004804:	ffff3cb0 	.word	0xffff3cb0
 8004808:	7149f2ca 	.word	0x7149f2ca
 800480c:	f149f2ca 	.word	0xf149f2ca
 8004810:	807fffff 	.word	0x807fffff
 8004814:	0000c350 	.word	0x0000c350
 8004818:	0da24260 	.word	0x0da24260
 800481c:	8da24260 	.word	0x8da24260

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
