
postureitor_g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080042b8  080042b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042b8  080042b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080042c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000074  08004334  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004334  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000787f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001997  00000000  00000000  0002791b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  000292b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00029a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001546a  00000000  00000000  0002a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008354  00000000  00000000  0003f50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087461  00000000  00000000  0004785e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cecbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  000ced10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004188 	.word	0x08004188

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08004188 	.word	0x08004188

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 fb6d 	bl	8000900 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 faf9 	bl	8000828 <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 fb5f 	bl	8000900 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fb55 	bl	8000900 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fb05 	bl	8000874 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fafb 	bl	8000874 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f7ff fff0 	bl	8000278 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fe5d 	bl	8000f5c <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 fc93 	bl	8000bd4 <__aeabi_fsub>
 80002ae:	f000 fe55 	bl	8000f5c <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__aeabi_fadd>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	46c6      	mov	lr, r8
 80002c0:	0243      	lsls	r3, r0, #9
 80002c2:	0a5b      	lsrs	r3, r3, #9
 80002c4:	024e      	lsls	r6, r1, #9
 80002c6:	0045      	lsls	r5, r0, #1
 80002c8:	004f      	lsls	r7, r1, #1
 80002ca:	00da      	lsls	r2, r3, #3
 80002cc:	0fc4      	lsrs	r4, r0, #31
 80002ce:	469c      	mov	ip, r3
 80002d0:	0a70      	lsrs	r0, r6, #9
 80002d2:	4690      	mov	r8, r2
 80002d4:	b500      	push	{lr}
 80002d6:	0e2d      	lsrs	r5, r5, #24
 80002d8:	0e3f      	lsrs	r7, r7, #24
 80002da:	0fc9      	lsrs	r1, r1, #31
 80002dc:	09b6      	lsrs	r6, r6, #6
 80002de:	428c      	cmp	r4, r1
 80002e0:	d04b      	beq.n	800037a <__aeabi_fadd+0xbe>
 80002e2:	1bea      	subs	r2, r5, r7
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	dd36      	ble.n	8000356 <__aeabi_fadd+0x9a>
 80002e8:	2f00      	cmp	r7, #0
 80002ea:	d061      	beq.n	80003b0 <__aeabi_fadd+0xf4>
 80002ec:	2dff      	cmp	r5, #255	; 0xff
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0x36>
 80002f0:	e0ad      	b.n	800044e <__aeabi_fadd+0x192>
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	04db      	lsls	r3, r3, #19
 80002f6:	431e      	orrs	r6, r3
 80002f8:	2a1b      	cmp	r2, #27
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fadd+0x42>
 80002fc:	e0d3      	b.n	80004a6 <__aeabi_fadd+0x1ea>
 80002fe:	2001      	movs	r0, #1
 8000300:	4643      	mov	r3, r8
 8000302:	1a18      	subs	r0, r3, r0
 8000304:	0143      	lsls	r3, r0, #5
 8000306:	d400      	bmi.n	800030a <__aeabi_fadd+0x4e>
 8000308:	e08c      	b.n	8000424 <__aeabi_fadd+0x168>
 800030a:	0180      	lsls	r0, r0, #6
 800030c:	0987      	lsrs	r7, r0, #6
 800030e:	0038      	movs	r0, r7
 8000310:	f000 fed4 	bl	80010bc <__clzsi2>
 8000314:	3805      	subs	r0, #5
 8000316:	4087      	lsls	r7, r0
 8000318:	4285      	cmp	r5, r0
 800031a:	dc00      	bgt.n	800031e <__aeabi_fadd+0x62>
 800031c:	e0b6      	b.n	800048c <__aeabi_fadd+0x1d0>
 800031e:	1a2d      	subs	r5, r5, r0
 8000320:	48b3      	ldr	r0, [pc, #716]	; (80005f0 <__aeabi_fadd+0x334>)
 8000322:	4038      	ands	r0, r7
 8000324:	0743      	lsls	r3, r0, #29
 8000326:	d004      	beq.n	8000332 <__aeabi_fadd+0x76>
 8000328:	230f      	movs	r3, #15
 800032a:	4003      	ands	r3, r0
 800032c:	2b04      	cmp	r3, #4
 800032e:	d000      	beq.n	8000332 <__aeabi_fadd+0x76>
 8000330:	3004      	adds	r0, #4
 8000332:	0143      	lsls	r3, r0, #5
 8000334:	d400      	bmi.n	8000338 <__aeabi_fadd+0x7c>
 8000336:	e078      	b.n	800042a <__aeabi_fadd+0x16e>
 8000338:	1c6a      	adds	r2, r5, #1
 800033a:	2dfe      	cmp	r5, #254	; 0xfe
 800033c:	d065      	beq.n	800040a <__aeabi_fadd+0x14e>
 800033e:	0180      	lsls	r0, r0, #6
 8000340:	0a43      	lsrs	r3, r0, #9
 8000342:	469c      	mov	ip, r3
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	4663      	mov	r3, ip
 8000348:	05d0      	lsls	r0, r2, #23
 800034a:	4318      	orrs	r0, r3
 800034c:	07e4      	lsls	r4, r4, #31
 800034e:	4320      	orrs	r0, r4
 8000350:	bc80      	pop	{r7}
 8000352:	46b8      	mov	r8, r7
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2a00      	cmp	r2, #0
 8000358:	d035      	beq.n	80003c6 <__aeabi_fadd+0x10a>
 800035a:	1b7a      	subs	r2, r7, r5
 800035c:	2d00      	cmp	r5, #0
 800035e:	d000      	beq.n	8000362 <__aeabi_fadd+0xa6>
 8000360:	e0af      	b.n	80004c2 <__aeabi_fadd+0x206>
 8000362:	4643      	mov	r3, r8
 8000364:	2b00      	cmp	r3, #0
 8000366:	d100      	bne.n	800036a <__aeabi_fadd+0xae>
 8000368:	e0a7      	b.n	80004ba <__aeabi_fadd+0x1fe>
 800036a:	1e53      	subs	r3, r2, #1
 800036c:	2a01      	cmp	r2, #1
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0xb6>
 8000370:	e12f      	b.n	80005d2 <__aeabi_fadd+0x316>
 8000372:	2aff      	cmp	r2, #255	; 0xff
 8000374:	d069      	beq.n	800044a <__aeabi_fadd+0x18e>
 8000376:	001a      	movs	r2, r3
 8000378:	e0aa      	b.n	80004d0 <__aeabi_fadd+0x214>
 800037a:	1be9      	subs	r1, r5, r7
 800037c:	2900      	cmp	r1, #0
 800037e:	dd70      	ble.n	8000462 <__aeabi_fadd+0x1a6>
 8000380:	2f00      	cmp	r7, #0
 8000382:	d037      	beq.n	80003f4 <__aeabi_fadd+0x138>
 8000384:	2dff      	cmp	r5, #255	; 0xff
 8000386:	d062      	beq.n	800044e <__aeabi_fadd+0x192>
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	04db      	lsls	r3, r3, #19
 800038c:	431e      	orrs	r6, r3
 800038e:	291b      	cmp	r1, #27
 8000390:	dc00      	bgt.n	8000394 <__aeabi_fadd+0xd8>
 8000392:	e0b0      	b.n	80004f6 <__aeabi_fadd+0x23a>
 8000394:	2001      	movs	r0, #1
 8000396:	4440      	add	r0, r8
 8000398:	0143      	lsls	r3, r0, #5
 800039a:	d543      	bpl.n	8000424 <__aeabi_fadd+0x168>
 800039c:	3501      	adds	r5, #1
 800039e:	2dff      	cmp	r5, #255	; 0xff
 80003a0:	d033      	beq.n	800040a <__aeabi_fadd+0x14e>
 80003a2:	2301      	movs	r3, #1
 80003a4:	4a93      	ldr	r2, [pc, #588]	; (80005f4 <__aeabi_fadd+0x338>)
 80003a6:	4003      	ands	r3, r0
 80003a8:	0840      	lsrs	r0, r0, #1
 80003aa:	4010      	ands	r0, r2
 80003ac:	4318      	orrs	r0, r3
 80003ae:	e7b9      	b.n	8000324 <__aeabi_fadd+0x68>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d100      	bne.n	80003b6 <__aeabi_fadd+0xfa>
 80003b4:	e083      	b.n	80004be <__aeabi_fadd+0x202>
 80003b6:	1e51      	subs	r1, r2, #1
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0x102>
 80003bc:	e0d8      	b.n	8000570 <__aeabi_fadd+0x2b4>
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d045      	beq.n	800044e <__aeabi_fadd+0x192>
 80003c2:	000a      	movs	r2, r1
 80003c4:	e798      	b.n	80002f8 <__aeabi_fadd+0x3c>
 80003c6:	27fe      	movs	r7, #254	; 0xfe
 80003c8:	1c6a      	adds	r2, r5, #1
 80003ca:	4217      	tst	r7, r2
 80003cc:	d000      	beq.n	80003d0 <__aeabi_fadd+0x114>
 80003ce:	e086      	b.n	80004de <__aeabi_fadd+0x222>
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	d000      	beq.n	80003d6 <__aeabi_fadd+0x11a>
 80003d4:	e0b7      	b.n	8000546 <__aeabi_fadd+0x28a>
 80003d6:	4643      	mov	r3, r8
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d100      	bne.n	80003de <__aeabi_fadd+0x122>
 80003dc:	e0f3      	b.n	80005c6 <__aeabi_fadd+0x30a>
 80003de:	2200      	movs	r2, #0
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0b0      	beq.n	8000346 <__aeabi_fadd+0x8a>
 80003e4:	1b98      	subs	r0, r3, r6
 80003e6:	0143      	lsls	r3, r0, #5
 80003e8:	d400      	bmi.n	80003ec <__aeabi_fadd+0x130>
 80003ea:	e0fa      	b.n	80005e2 <__aeabi_fadd+0x326>
 80003ec:	4643      	mov	r3, r8
 80003ee:	000c      	movs	r4, r1
 80003f0:	1af0      	subs	r0, r6, r3
 80003f2:	e797      	b.n	8000324 <__aeabi_fadd+0x68>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_fadd+0x13e>
 80003f8:	e0c8      	b.n	800058c <__aeabi_fadd+0x2d0>
 80003fa:	1e4a      	subs	r2, r1, #1
 80003fc:	2901      	cmp	r1, #1
 80003fe:	d100      	bne.n	8000402 <__aeabi_fadd+0x146>
 8000400:	e0ae      	b.n	8000560 <__aeabi_fadd+0x2a4>
 8000402:	29ff      	cmp	r1, #255	; 0xff
 8000404:	d023      	beq.n	800044e <__aeabi_fadd+0x192>
 8000406:	0011      	movs	r1, r2
 8000408:	e7c1      	b.n	800038e <__aeabi_fadd+0xd2>
 800040a:	2300      	movs	r3, #0
 800040c:	22ff      	movs	r2, #255	; 0xff
 800040e:	469c      	mov	ip, r3
 8000410:	e799      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000412:	21fe      	movs	r1, #254	; 0xfe
 8000414:	1c6a      	adds	r2, r5, #1
 8000416:	4211      	tst	r1, r2
 8000418:	d077      	beq.n	800050a <__aeabi_fadd+0x24e>
 800041a:	2aff      	cmp	r2, #255	; 0xff
 800041c:	d0f5      	beq.n	800040a <__aeabi_fadd+0x14e>
 800041e:	0015      	movs	r5, r2
 8000420:	4446      	add	r6, r8
 8000422:	0870      	lsrs	r0, r6, #1
 8000424:	0743      	lsls	r3, r0, #29
 8000426:	d000      	beq.n	800042a <__aeabi_fadd+0x16e>
 8000428:	e77e      	b.n	8000328 <__aeabi_fadd+0x6c>
 800042a:	08c3      	lsrs	r3, r0, #3
 800042c:	2dff      	cmp	r5, #255	; 0xff
 800042e:	d00e      	beq.n	800044e <__aeabi_fadd+0x192>
 8000430:	025b      	lsls	r3, r3, #9
 8000432:	0a5b      	lsrs	r3, r3, #9
 8000434:	469c      	mov	ip, r3
 8000436:	b2ea      	uxtb	r2, r5
 8000438:	e785      	b.n	8000346 <__aeabi_fadd+0x8a>
 800043a:	2e00      	cmp	r6, #0
 800043c:	d007      	beq.n	800044e <__aeabi_fadd+0x192>
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	03d2      	lsls	r2, r2, #15
 8000442:	4213      	tst	r3, r2
 8000444:	d003      	beq.n	800044e <__aeabi_fadd+0x192>
 8000446:	4210      	tst	r0, r2
 8000448:	d101      	bne.n	800044e <__aeabi_fadd+0x192>
 800044a:	000c      	movs	r4, r1
 800044c:	0003      	movs	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0db      	beq.n	800040a <__aeabi_fadd+0x14e>
 8000452:	2080      	movs	r0, #128	; 0x80
 8000454:	03c0      	lsls	r0, r0, #15
 8000456:	4318      	orrs	r0, r3
 8000458:	0240      	lsls	r0, r0, #9
 800045a:	0a43      	lsrs	r3, r0, #9
 800045c:	469c      	mov	ip, r3
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	e771      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000462:	2900      	cmp	r1, #0
 8000464:	d0d5      	beq.n	8000412 <__aeabi_fadd+0x156>
 8000466:	1b7a      	subs	r2, r7, r5
 8000468:	2d00      	cmp	r5, #0
 800046a:	d160      	bne.n	800052e <__aeabi_fadd+0x272>
 800046c:	4643      	mov	r3, r8
 800046e:	2b00      	cmp	r3, #0
 8000470:	d024      	beq.n	80004bc <__aeabi_fadd+0x200>
 8000472:	1e53      	subs	r3, r2, #1
 8000474:	2a01      	cmp	r2, #1
 8000476:	d073      	beq.n	8000560 <__aeabi_fadd+0x2a4>
 8000478:	2aff      	cmp	r2, #255	; 0xff
 800047a:	d0e7      	beq.n	800044c <__aeabi_fadd+0x190>
 800047c:	001a      	movs	r2, r3
 800047e:	2a1b      	cmp	r2, #27
 8000480:	dc00      	bgt.n	8000484 <__aeabi_fadd+0x1c8>
 8000482:	e085      	b.n	8000590 <__aeabi_fadd+0x2d4>
 8000484:	2001      	movs	r0, #1
 8000486:	003d      	movs	r5, r7
 8000488:	1980      	adds	r0, r0, r6
 800048a:	e785      	b.n	8000398 <__aeabi_fadd+0xdc>
 800048c:	2320      	movs	r3, #32
 800048e:	003a      	movs	r2, r7
 8000490:	1b45      	subs	r5, r0, r5
 8000492:	0038      	movs	r0, r7
 8000494:	3501      	adds	r5, #1
 8000496:	40ea      	lsrs	r2, r5
 8000498:	1b5d      	subs	r5, r3, r5
 800049a:	40a8      	lsls	r0, r5
 800049c:	1e43      	subs	r3, r0, #1
 800049e:	4198      	sbcs	r0, r3
 80004a0:	2500      	movs	r5, #0
 80004a2:	4310      	orrs	r0, r2
 80004a4:	e73e      	b.n	8000324 <__aeabi_fadd+0x68>
 80004a6:	2320      	movs	r3, #32
 80004a8:	0030      	movs	r0, r6
 80004aa:	1a9b      	subs	r3, r3, r2
 80004ac:	0031      	movs	r1, r6
 80004ae:	4098      	lsls	r0, r3
 80004b0:	40d1      	lsrs	r1, r2
 80004b2:	1e43      	subs	r3, r0, #1
 80004b4:	4198      	sbcs	r0, r3
 80004b6:	4308      	orrs	r0, r1
 80004b8:	e722      	b.n	8000300 <__aeabi_fadd+0x44>
 80004ba:	000c      	movs	r4, r1
 80004bc:	0003      	movs	r3, r0
 80004be:	0015      	movs	r5, r2
 80004c0:	e7b4      	b.n	800042c <__aeabi_fadd+0x170>
 80004c2:	2fff      	cmp	r7, #255	; 0xff
 80004c4:	d0c1      	beq.n	800044a <__aeabi_fadd+0x18e>
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	4640      	mov	r0, r8
 80004ca:	04db      	lsls	r3, r3, #19
 80004cc:	4318      	orrs	r0, r3
 80004ce:	4680      	mov	r8, r0
 80004d0:	2a1b      	cmp	r2, #27
 80004d2:	dd51      	ble.n	8000578 <__aeabi_fadd+0x2bc>
 80004d4:	2001      	movs	r0, #1
 80004d6:	000c      	movs	r4, r1
 80004d8:	003d      	movs	r5, r7
 80004da:	1a30      	subs	r0, r6, r0
 80004dc:	e712      	b.n	8000304 <__aeabi_fadd+0x48>
 80004de:	4643      	mov	r3, r8
 80004e0:	1b9f      	subs	r7, r3, r6
 80004e2:	017b      	lsls	r3, r7, #5
 80004e4:	d42b      	bmi.n	800053e <__aeabi_fadd+0x282>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d000      	beq.n	80004ec <__aeabi_fadd+0x230>
 80004ea:	e710      	b.n	800030e <__aeabi_fadd+0x52>
 80004ec:	2300      	movs	r3, #0
 80004ee:	2400      	movs	r4, #0
 80004f0:	2200      	movs	r2, #0
 80004f2:	469c      	mov	ip, r3
 80004f4:	e727      	b.n	8000346 <__aeabi_fadd+0x8a>
 80004f6:	2320      	movs	r3, #32
 80004f8:	0032      	movs	r2, r6
 80004fa:	0030      	movs	r0, r6
 80004fc:	40ca      	lsrs	r2, r1
 80004fe:	1a59      	subs	r1, r3, r1
 8000500:	4088      	lsls	r0, r1
 8000502:	1e43      	subs	r3, r0, #1
 8000504:	4198      	sbcs	r0, r3
 8000506:	4310      	orrs	r0, r2
 8000508:	e745      	b.n	8000396 <__aeabi_fadd+0xda>
 800050a:	2d00      	cmp	r5, #0
 800050c:	d14a      	bne.n	80005a4 <__aeabi_fadd+0x2e8>
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d063      	beq.n	80005dc <__aeabi_fadd+0x320>
 8000514:	2200      	movs	r2, #0
 8000516:	2e00      	cmp	r6, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x260>
 800051a:	e714      	b.n	8000346 <__aeabi_fadd+0x8a>
 800051c:	0030      	movs	r0, r6
 800051e:	4440      	add	r0, r8
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x26a>
 8000524:	e77e      	b.n	8000424 <__aeabi_fadd+0x168>
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <__aeabi_fadd+0x334>)
 8000528:	3501      	adds	r5, #1
 800052a:	4018      	ands	r0, r3
 800052c:	e77a      	b.n	8000424 <__aeabi_fadd+0x168>
 800052e:	2fff      	cmp	r7, #255	; 0xff
 8000530:	d08c      	beq.n	800044c <__aeabi_fadd+0x190>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	4641      	mov	r1, r8
 8000536:	04db      	lsls	r3, r3, #19
 8000538:	4319      	orrs	r1, r3
 800053a:	4688      	mov	r8, r1
 800053c:	e79f      	b.n	800047e <__aeabi_fadd+0x1c2>
 800053e:	4643      	mov	r3, r8
 8000540:	000c      	movs	r4, r1
 8000542:	1af7      	subs	r7, r6, r3
 8000544:	e6e3      	b.n	800030e <__aeabi_fadd+0x52>
 8000546:	4642      	mov	r2, r8
 8000548:	2a00      	cmp	r2, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x292>
 800054c:	e775      	b.n	800043a <__aeabi_fadd+0x17e>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x298>
 8000552:	e77a      	b.n	800044a <__aeabi_fadd+0x18e>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	03db      	lsls	r3, r3, #15
 8000558:	2400      	movs	r4, #0
 800055a:	469c      	mov	ip, r3
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	e6f2      	b.n	8000346 <__aeabi_fadd+0x8a>
 8000560:	0030      	movs	r0, r6
 8000562:	4440      	add	r0, r8
 8000564:	2501      	movs	r5, #1
 8000566:	0143      	lsls	r3, r0, #5
 8000568:	d400      	bmi.n	800056c <__aeabi_fadd+0x2b0>
 800056a:	e75b      	b.n	8000424 <__aeabi_fadd+0x168>
 800056c:	2502      	movs	r5, #2
 800056e:	e718      	b.n	80003a2 <__aeabi_fadd+0xe6>
 8000570:	4643      	mov	r3, r8
 8000572:	2501      	movs	r5, #1
 8000574:	1b98      	subs	r0, r3, r6
 8000576:	e6c5      	b.n	8000304 <__aeabi_fadd+0x48>
 8000578:	2320      	movs	r3, #32
 800057a:	4644      	mov	r4, r8
 800057c:	4640      	mov	r0, r8
 800057e:	40d4      	lsrs	r4, r2
 8000580:	1a9a      	subs	r2, r3, r2
 8000582:	4090      	lsls	r0, r2
 8000584:	1e43      	subs	r3, r0, #1
 8000586:	4198      	sbcs	r0, r3
 8000588:	4320      	orrs	r0, r4
 800058a:	e7a4      	b.n	80004d6 <__aeabi_fadd+0x21a>
 800058c:	000d      	movs	r5, r1
 800058e:	e74d      	b.n	800042c <__aeabi_fadd+0x170>
 8000590:	2320      	movs	r3, #32
 8000592:	4641      	mov	r1, r8
 8000594:	4640      	mov	r0, r8
 8000596:	40d1      	lsrs	r1, r2
 8000598:	1a9a      	subs	r2, r3, r2
 800059a:	4090      	lsls	r0, r2
 800059c:	1e43      	subs	r3, r0, #1
 800059e:	4198      	sbcs	r0, r3
 80005a0:	4308      	orrs	r0, r1
 80005a2:	e770      	b.n	8000486 <__aeabi_fadd+0x1ca>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x2f0>
 80005aa:	e74f      	b.n	800044c <__aeabi_fadd+0x190>
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2f6>
 80005b0:	e74d      	b.n	800044e <__aeabi_fadd+0x192>
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	03d2      	lsls	r2, r2, #15
 80005b6:	4213      	tst	r3, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x300>
 80005ba:	e748      	b.n	800044e <__aeabi_fadd+0x192>
 80005bc:	4210      	tst	r0, r2
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x306>
 80005c0:	e745      	b.n	800044e <__aeabi_fadd+0x192>
 80005c2:	0003      	movs	r3, r0
 80005c4:	e743      	b.n	800044e <__aeabi_fadd+0x192>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d090      	beq.n	80004ec <__aeabi_fadd+0x230>
 80005ca:	000c      	movs	r4, r1
 80005cc:	4684      	mov	ip, r0
 80005ce:	2200      	movs	r2, #0
 80005d0:	e6b9      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005d2:	4643      	mov	r3, r8
 80005d4:	000c      	movs	r4, r1
 80005d6:	1af0      	subs	r0, r6, r3
 80005d8:	3501      	adds	r5, #1
 80005da:	e693      	b.n	8000304 <__aeabi_fadd+0x48>
 80005dc:	4684      	mov	ip, r0
 80005de:	2200      	movs	r2, #0
 80005e0:	e6b1      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x32c>
 80005e6:	e71d      	b.n	8000424 <__aeabi_fadd+0x168>
 80005e8:	2300      	movs	r3, #0
 80005ea:	2400      	movs	r4, #0
 80005ec:	469c      	mov	ip, r3
 80005ee:	e6aa      	b.n	8000346 <__aeabi_fadd+0x8a>
 80005f0:	fbffffff 	.word	0xfbffffff
 80005f4:	7dffffff 	.word	0x7dffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	464f      	mov	r7, r9
 80005fc:	4646      	mov	r6, r8
 80005fe:	46d6      	mov	lr, sl
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	b5c0      	push	{r6, r7, lr}
 8000604:	0047      	lsls	r7, r0, #1
 8000606:	1c0c      	adds	r4, r1, #0
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	0e3f      	lsrs	r7, r7, #24
 800060c:	0fc6      	lsrs	r6, r0, #31
 800060e:	2f00      	cmp	r7, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fdiv+0x1c>
 8000612:	e070      	b.n	80006f6 <__aeabi_fdiv+0xfe>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d100      	bne.n	800061a <__aeabi_fdiv+0x22>
 8000618:	e075      	b.n	8000706 <__aeabi_fdiv+0x10e>
 800061a:	00eb      	lsls	r3, r5, #3
 800061c:	2580      	movs	r5, #128	; 0x80
 800061e:	04ed      	lsls	r5, r5, #19
 8000620:	431d      	orrs	r5, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4699      	mov	r9, r3
 8000626:	469a      	mov	sl, r3
 8000628:	3f7f      	subs	r7, #127	; 0x7f
 800062a:	0260      	lsls	r0, r4, #9
 800062c:	0a43      	lsrs	r3, r0, #9
 800062e:	4698      	mov	r8, r3
 8000630:	0063      	lsls	r3, r4, #1
 8000632:	0e1b      	lsrs	r3, r3, #24
 8000634:	0fe4      	lsrs	r4, r4, #31
 8000636:	2b00      	cmp	r3, #0
 8000638:	d04e      	beq.n	80006d8 <__aeabi_fdiv+0xe0>
 800063a:	2bff      	cmp	r3, #255	; 0xff
 800063c:	d046      	beq.n	80006cc <__aeabi_fdiv+0xd4>
 800063e:	4642      	mov	r2, r8
 8000640:	00d0      	lsls	r0, r2, #3
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4302      	orrs	r2, r0
 8000648:	4690      	mov	r8, r2
 800064a:	2200      	movs	r2, #0
 800064c:	3b7f      	subs	r3, #127	; 0x7f
 800064e:	0031      	movs	r1, r6
 8000650:	1aff      	subs	r7, r7, r3
 8000652:	464b      	mov	r3, r9
 8000654:	4061      	eors	r1, r4
 8000656:	b2c9      	uxtb	r1, r1
 8000658:	4313      	orrs	r3, r2
 800065a:	2b0f      	cmp	r3, #15
 800065c:	d900      	bls.n	8000660 <__aeabi_fdiv+0x68>
 800065e:	e0b5      	b.n	80007cc <__aeabi_fdiv+0x1d4>
 8000660:	486e      	ldr	r0, [pc, #440]	; (800081c <__aeabi_fdiv+0x224>)
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	58c3      	ldr	r3, [r0, r3]
 8000666:	469f      	mov	pc, r3
 8000668:	2300      	movs	r3, #0
 800066a:	4698      	mov	r8, r3
 800066c:	0026      	movs	r6, r4
 800066e:	4645      	mov	r5, r8
 8000670:	4692      	mov	sl, r2
 8000672:	4653      	mov	r3, sl
 8000674:	2b02      	cmp	r3, #2
 8000676:	d100      	bne.n	800067a <__aeabi_fdiv+0x82>
 8000678:	e089      	b.n	800078e <__aeabi_fdiv+0x196>
 800067a:	2b03      	cmp	r3, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e09e      	b.n	80007be <__aeabi_fdiv+0x1c6>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d018      	beq.n	80006b6 <__aeabi_fdiv+0xbe>
 8000684:	003b      	movs	r3, r7
 8000686:	337f      	adds	r3, #127	; 0x7f
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd69      	ble.n	8000760 <__aeabi_fdiv+0x168>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	4b60      	ldr	r3, [pc, #384]	; (8000820 <__aeabi_fdiv+0x228>)
 80006a0:	401d      	ands	r5, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	3380      	adds	r3, #128	; 0x80
 80006a6:	2bfe      	cmp	r3, #254	; 0xfe
 80006a8:	dd00      	ble.n	80006ac <__aeabi_fdiv+0xb4>
 80006aa:	e070      	b.n	800078e <__aeabi_fdiv+0x196>
 80006ac:	01ad      	lsls	r5, r5, #6
 80006ae:	0a6d      	lsrs	r5, r5, #9
 80006b0:	b2d8      	uxtb	r0, r3
 80006b2:	e002      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80006b4:	000e      	movs	r6, r1
 80006b6:	2000      	movs	r0, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	05c0      	lsls	r0, r0, #23
 80006bc:	4328      	orrs	r0, r5
 80006be:	07f6      	lsls	r6, r6, #31
 80006c0:	4330      	orrs	r0, r6
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4643      	mov	r3, r8
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d13f      	bne.n	8000752 <__aeabi_fdiv+0x15a>
 80006d2:	2202      	movs	r2, #2
 80006d4:	3fff      	subs	r7, #255	; 0xff
 80006d6:	e003      	b.n	80006e0 <__aeabi_fdiv+0xe8>
 80006d8:	4643      	mov	r3, r8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d12d      	bne.n	800073a <__aeabi_fdiv+0x142>
 80006de:	2201      	movs	r2, #1
 80006e0:	0031      	movs	r1, r6
 80006e2:	464b      	mov	r3, r9
 80006e4:	4061      	eors	r1, r4
 80006e6:	b2c9      	uxtb	r1, r1
 80006e8:	4313      	orrs	r3, r2
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d834      	bhi.n	8000758 <__aeabi_fdiv+0x160>
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <__aeabi_fdiv+0x22c>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	58c3      	ldr	r3, [r0, r3]
 80006f4:	469f      	mov	pc, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d113      	bne.n	8000722 <__aeabi_fdiv+0x12a>
 80006fa:	2304      	movs	r3, #4
 80006fc:	4699      	mov	r9, r3
 80006fe:	3b03      	subs	r3, #3
 8000700:	2700      	movs	r7, #0
 8000702:	469a      	mov	sl, r3
 8000704:	e791      	b.n	800062a <__aeabi_fdiv+0x32>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d105      	bne.n	8000716 <__aeabi_fdiv+0x11e>
 800070a:	2308      	movs	r3, #8
 800070c:	4699      	mov	r9, r3
 800070e:	3b06      	subs	r3, #6
 8000710:	27ff      	movs	r7, #255	; 0xff
 8000712:	469a      	mov	sl, r3
 8000714:	e789      	b.n	800062a <__aeabi_fdiv+0x32>
 8000716:	230c      	movs	r3, #12
 8000718:	4699      	mov	r9, r3
 800071a:	3b09      	subs	r3, #9
 800071c:	27ff      	movs	r7, #255	; 0xff
 800071e:	469a      	mov	sl, r3
 8000720:	e783      	b.n	800062a <__aeabi_fdiv+0x32>
 8000722:	0028      	movs	r0, r5
 8000724:	f000 fcca 	bl	80010bc <__clzsi2>
 8000728:	2776      	movs	r7, #118	; 0x76
 800072a:	1f43      	subs	r3, r0, #5
 800072c:	409d      	lsls	r5, r3
 800072e:	2300      	movs	r3, #0
 8000730:	427f      	negs	r7, r7
 8000732:	4699      	mov	r9, r3
 8000734:	469a      	mov	sl, r3
 8000736:	1a3f      	subs	r7, r7, r0
 8000738:	e777      	b.n	800062a <__aeabi_fdiv+0x32>
 800073a:	4640      	mov	r0, r8
 800073c:	f000 fcbe 	bl	80010bc <__clzsi2>
 8000740:	4642      	mov	r2, r8
 8000742:	1f43      	subs	r3, r0, #5
 8000744:	409a      	lsls	r2, r3
 8000746:	2376      	movs	r3, #118	; 0x76
 8000748:	425b      	negs	r3, r3
 800074a:	4690      	mov	r8, r2
 800074c:	1a1b      	subs	r3, r3, r0
 800074e:	2200      	movs	r2, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	2203      	movs	r2, #3
 8000756:	e77a      	b.n	800064e <__aeabi_fdiv+0x56>
 8000758:	000e      	movs	r6, r1
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	2500      	movs	r5, #0
 800075e:	e7ac      	b.n	80006ba <__aeabi_fdiv+0xc2>
 8000760:	2001      	movs	r0, #1
 8000762:	1ac0      	subs	r0, r0, r3
 8000764:	281b      	cmp	r0, #27
 8000766:	dca6      	bgt.n	80006b6 <__aeabi_fdiv+0xbe>
 8000768:	379e      	adds	r7, #158	; 0x9e
 800076a:	002a      	movs	r2, r5
 800076c:	40bd      	lsls	r5, r7
 800076e:	40c2      	lsrs	r2, r0
 8000770:	1e6b      	subs	r3, r5, #1
 8000772:	419d      	sbcs	r5, r3
 8000774:	4315      	orrs	r5, r2
 8000776:	076b      	lsls	r3, r5, #29
 8000778:	d004      	beq.n	8000784 <__aeabi_fdiv+0x18c>
 800077a:	230f      	movs	r3, #15
 800077c:	402b      	ands	r3, r5
 800077e:	2b04      	cmp	r3, #4
 8000780:	d000      	beq.n	8000784 <__aeabi_fdiv+0x18c>
 8000782:	3504      	adds	r5, #4
 8000784:	016b      	lsls	r3, r5, #5
 8000786:	d544      	bpl.n	8000812 <__aeabi_fdiv+0x21a>
 8000788:	2001      	movs	r0, #1
 800078a:	2500      	movs	r5, #0
 800078c:	e795      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	2500      	movs	r5, #0
 8000792:	e792      	b.n	80006ba <__aeabi_fdiv+0xc2>
 8000794:	2580      	movs	r5, #128	; 0x80
 8000796:	2600      	movs	r6, #0
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	03ed      	lsls	r5, r5, #15
 800079c:	e78d      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800079e:	2300      	movs	r3, #0
 80007a0:	4698      	mov	r8, r3
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	03c0      	lsls	r0, r0, #15
 80007a6:	4205      	tst	r5, r0
 80007a8:	d009      	beq.n	80007be <__aeabi_fdiv+0x1c6>
 80007aa:	4643      	mov	r3, r8
 80007ac:	4203      	tst	r3, r0
 80007ae:	d106      	bne.n	80007be <__aeabi_fdiv+0x1c6>
 80007b0:	4645      	mov	r5, r8
 80007b2:	4305      	orrs	r5, r0
 80007b4:	026d      	lsls	r5, r5, #9
 80007b6:	0026      	movs	r6, r4
 80007b8:	20ff      	movs	r0, #255	; 0xff
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	e77d      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80007be:	2080      	movs	r0, #128	; 0x80
 80007c0:	03c0      	lsls	r0, r0, #15
 80007c2:	4305      	orrs	r5, r0
 80007c4:	026d      	lsls	r5, r5, #9
 80007c6:	20ff      	movs	r0, #255	; 0xff
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	e776      	b.n	80006ba <__aeabi_fdiv+0xc2>
 80007cc:	4642      	mov	r2, r8
 80007ce:	016b      	lsls	r3, r5, #5
 80007d0:	0150      	lsls	r0, r2, #5
 80007d2:	4283      	cmp	r3, r0
 80007d4:	d219      	bcs.n	800080a <__aeabi_fdiv+0x212>
 80007d6:	221b      	movs	r2, #27
 80007d8:	2500      	movs	r5, #0
 80007da:	3f01      	subs	r7, #1
 80007dc:	2601      	movs	r6, #1
 80007de:	001c      	movs	r4, r3
 80007e0:	006d      	lsls	r5, r5, #1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	db01      	blt.n	80007ec <__aeabi_fdiv+0x1f4>
 80007e8:	4298      	cmp	r0, r3
 80007ea:	d801      	bhi.n	80007f0 <__aeabi_fdiv+0x1f8>
 80007ec:	1a1b      	subs	r3, r3, r0
 80007ee:	4335      	orrs	r5, r6
 80007f0:	3a01      	subs	r2, #1
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d1f3      	bne.n	80007de <__aeabi_fdiv+0x1e6>
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4193      	sbcs	r3, r2
 80007fa:	431d      	orrs	r5, r3
 80007fc:	003b      	movs	r3, r7
 80007fe:	337f      	adds	r3, #127	; 0x7f
 8000800:	000e      	movs	r6, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd00      	ble.n	8000808 <__aeabi_fdiv+0x210>
 8000806:	e741      	b.n	800068c <__aeabi_fdiv+0x94>
 8000808:	e7aa      	b.n	8000760 <__aeabi_fdiv+0x168>
 800080a:	221a      	movs	r2, #26
 800080c:	2501      	movs	r5, #1
 800080e:	1a1b      	subs	r3, r3, r0
 8000810:	e7e4      	b.n	80007dc <__aeabi_fdiv+0x1e4>
 8000812:	01ad      	lsls	r5, r5, #6
 8000814:	2000      	movs	r0, #0
 8000816:	0a6d      	lsrs	r5, r5, #9
 8000818:	e74f      	b.n	80006ba <__aeabi_fdiv+0xc2>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	080041a0 	.word	0x080041a0
 8000820:	f7ffffff 	.word	0xf7ffffff
 8000824:	080041e0 	.word	0x080041e0

08000828 <__eqsf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	024e      	lsls	r6, r1, #9
 8000830:	004c      	lsls	r4, r1, #1
 8000832:	0fc3      	lsrs	r3, r0, #31
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	2001      	movs	r0, #1
 8000838:	0e12      	lsrs	r2, r2, #24
 800083a:	0a76      	lsrs	r6, r6, #9
 800083c:	0e24      	lsrs	r4, r4, #24
 800083e:	0fc9      	lsrs	r1, r1, #31
 8000840:	2aff      	cmp	r2, #255	; 0xff
 8000842:	d006      	beq.n	8000852 <__eqsf2+0x2a>
 8000844:	2cff      	cmp	r4, #255	; 0xff
 8000846:	d003      	beq.n	8000850 <__eqsf2+0x28>
 8000848:	42a2      	cmp	r2, r4
 800084a:	d101      	bne.n	8000850 <__eqsf2+0x28>
 800084c:	42b5      	cmp	r5, r6
 800084e:	d006      	beq.n	800085e <__eqsf2+0x36>
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	2d00      	cmp	r5, #0
 8000854:	d1fc      	bne.n	8000850 <__eqsf2+0x28>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d1fa      	bne.n	8000850 <__eqsf2+0x28>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d1f8      	bne.n	8000850 <__eqsf2+0x28>
 800085e:	428b      	cmp	r3, r1
 8000860:	d006      	beq.n	8000870 <__eqsf2+0x48>
 8000862:	2001      	movs	r0, #1
 8000864:	2a00      	cmp	r2, #0
 8000866:	d1f3      	bne.n	8000850 <__eqsf2+0x28>
 8000868:	0028      	movs	r0, r5
 800086a:	1e43      	subs	r3, r0, #1
 800086c:	4198      	sbcs	r0, r3
 800086e:	e7ef      	b.n	8000850 <__eqsf2+0x28>
 8000870:	2000      	movs	r0, #0
 8000872:	e7ed      	b.n	8000850 <__eqsf2+0x28>

08000874 <__gesf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	0042      	lsls	r2, r0, #1
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	024e      	lsls	r6, r1, #9
 800087c:	004c      	lsls	r4, r1, #1
 800087e:	0fc3      	lsrs	r3, r0, #31
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	0e12      	lsrs	r2, r2, #24
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e24      	lsrs	r4, r4, #24
 8000888:	0fc8      	lsrs	r0, r1, #31
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d01b      	beq.n	80008c6 <__gesf2+0x52>
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d00e      	beq.n	80008b0 <__gesf2+0x3c>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d11b      	bne.n	80008ce <__gesf2+0x5a>
 8000896:	2c00      	cmp	r4, #0
 8000898:	d101      	bne.n	800089e <__gesf2+0x2a>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d01c      	beq.n	80008d8 <__gesf2+0x64>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d00c      	beq.n	80008bc <__gesf2+0x48>
 80008a2:	4283      	cmp	r3, r0
 80008a4:	d01c      	beq.n	80008e0 <__gesf2+0x6c>
 80008a6:	2102      	movs	r1, #2
 80008a8:	1e58      	subs	r0, r3, #1
 80008aa:	4008      	ands	r0, r1
 80008ac:	3801      	subs	r0, #1
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d122      	bne.n	80008fa <__gesf2+0x86>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d1f4      	bne.n	80008a2 <__gesf2+0x2e>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d1f2      	bne.n	80008a2 <__gesf2+0x2e>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d1f6      	bne.n	80008ae <__gesf2+0x3a>
 80008c0:	2001      	movs	r0, #1
 80008c2:	4240      	negs	r0, r0
 80008c4:	e7f3      	b.n	80008ae <__gesf2+0x3a>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d117      	bne.n	80008fa <__gesf2+0x86>
 80008ca:	2cff      	cmp	r4, #255	; 0xff
 80008cc:	d0f0      	beq.n	80008b0 <__gesf2+0x3c>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d1e7      	bne.n	80008a2 <__gesf2+0x2e>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d1e5      	bne.n	80008a2 <__gesf2+0x2e>
 80008d6:	e7e6      	b.n	80008a6 <__gesf2+0x32>
 80008d8:	2000      	movs	r0, #0
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d0e7      	beq.n	80008ae <__gesf2+0x3a>
 80008de:	e7e2      	b.n	80008a6 <__gesf2+0x32>
 80008e0:	42a2      	cmp	r2, r4
 80008e2:	dc05      	bgt.n	80008f0 <__gesf2+0x7c>
 80008e4:	dbea      	blt.n	80008bc <__gesf2+0x48>
 80008e6:	42b5      	cmp	r5, r6
 80008e8:	d802      	bhi.n	80008f0 <__gesf2+0x7c>
 80008ea:	d3e7      	bcc.n	80008bc <__gesf2+0x48>
 80008ec:	2000      	movs	r0, #0
 80008ee:	e7de      	b.n	80008ae <__gesf2+0x3a>
 80008f0:	4243      	negs	r3, r0
 80008f2:	4158      	adcs	r0, r3
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	3801      	subs	r0, #1
 80008f8:	e7d9      	b.n	80008ae <__gesf2+0x3a>
 80008fa:	2002      	movs	r0, #2
 80008fc:	4240      	negs	r0, r0
 80008fe:	e7d6      	b.n	80008ae <__gesf2+0x3a>

08000900 <__lesf2>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	0042      	lsls	r2, r0, #1
 8000904:	0245      	lsls	r5, r0, #9
 8000906:	024e      	lsls	r6, r1, #9
 8000908:	004c      	lsls	r4, r1, #1
 800090a:	0fc3      	lsrs	r3, r0, #31
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e12      	lsrs	r2, r2, #24
 8000910:	0a76      	lsrs	r6, r6, #9
 8000912:	0e24      	lsrs	r4, r4, #24
 8000914:	0fc8      	lsrs	r0, r1, #31
 8000916:	2aff      	cmp	r2, #255	; 0xff
 8000918:	d00b      	beq.n	8000932 <__lesf2+0x32>
 800091a:	2cff      	cmp	r4, #255	; 0xff
 800091c:	d00d      	beq.n	800093a <__lesf2+0x3a>
 800091e:	2a00      	cmp	r2, #0
 8000920:	d11f      	bne.n	8000962 <__lesf2+0x62>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d116      	bne.n	8000954 <__lesf2+0x54>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d114      	bne.n	8000954 <__lesf2+0x54>
 800092a:	2000      	movs	r0, #0
 800092c:	2d00      	cmp	r5, #0
 800092e:	d010      	beq.n	8000952 <__lesf2+0x52>
 8000930:	e009      	b.n	8000946 <__lesf2+0x46>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d10c      	bne.n	8000950 <__lesf2+0x50>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d113      	bne.n	8000962 <__lesf2+0x62>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d108      	bne.n	8000950 <__lesf2+0x50>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d008      	beq.n	8000954 <__lesf2+0x54>
 8000942:	4283      	cmp	r3, r0
 8000944:	d012      	beq.n	800096c <__lesf2+0x6c>
 8000946:	2102      	movs	r1, #2
 8000948:	1e58      	subs	r0, r3, #1
 800094a:	4008      	ands	r0, r1
 800094c:	3801      	subs	r0, #1
 800094e:	e000      	b.n	8000952 <__lesf2+0x52>
 8000950:	2002      	movs	r0, #2
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	2d00      	cmp	r5, #0
 8000956:	d1f4      	bne.n	8000942 <__lesf2+0x42>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1fa      	bne.n	8000952 <__lesf2+0x52>
 800095c:	2001      	movs	r0, #1
 800095e:	4240      	negs	r0, r0
 8000960:	e7f7      	b.n	8000952 <__lesf2+0x52>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d1ed      	bne.n	8000942 <__lesf2+0x42>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d1eb      	bne.n	8000942 <__lesf2+0x42>
 800096a:	e7ec      	b.n	8000946 <__lesf2+0x46>
 800096c:	42a2      	cmp	r2, r4
 800096e:	dc05      	bgt.n	800097c <__lesf2+0x7c>
 8000970:	dbf2      	blt.n	8000958 <__lesf2+0x58>
 8000972:	42b5      	cmp	r5, r6
 8000974:	d802      	bhi.n	800097c <__lesf2+0x7c>
 8000976:	d3ef      	bcc.n	8000958 <__lesf2+0x58>
 8000978:	2000      	movs	r0, #0
 800097a:	e7ea      	b.n	8000952 <__lesf2+0x52>
 800097c:	4243      	negs	r3, r0
 800097e:	4158      	adcs	r0, r3
 8000980:	0040      	lsls	r0, r0, #1
 8000982:	3801      	subs	r0, #1
 8000984:	e7e5      	b.n	8000952 <__lesf2+0x52>
 8000986:	46c0      	nop			; (mov r8, r8)

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	0244      	lsls	r4, r0, #9
 8000992:	0045      	lsls	r5, r0, #1
 8000994:	b5c0      	push	{r6, r7, lr}
 8000996:	0a64      	lsrs	r4, r4, #9
 8000998:	1c0f      	adds	r7, r1, #0
 800099a:	0e2d      	lsrs	r5, r5, #24
 800099c:	0fc6      	lsrs	r6, r0, #31
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fmul+0x1c>
 80009a2:	e08d      	b.n	8000ac0 <__aeabi_fmul+0x138>
 80009a4:	2dff      	cmp	r5, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fmul+0x22>
 80009a8:	e092      	b.n	8000ad0 <__aeabi_fmul+0x148>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	4699      	mov	r9, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	00e4      	lsls	r4, r4, #3
 80009b4:	04c0      	lsls	r0, r0, #19
 80009b6:	4304      	orrs	r4, r0
 80009b8:	3d7f      	subs	r5, #127	; 0x7f
 80009ba:	0278      	lsls	r0, r7, #9
 80009bc:	0a43      	lsrs	r3, r0, #9
 80009be:	4698      	mov	r8, r3
 80009c0:	007b      	lsls	r3, r7, #1
 80009c2:	0e1b      	lsrs	r3, r3, #24
 80009c4:	0fff      	lsrs	r7, r7, #31
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x44>
 80009ca:	e070      	b.n	8000aae <__aeabi_fmul+0x126>
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fmul+0x4a>
 80009d0:	e086      	b.n	8000ae0 <__aeabi_fmul+0x158>
 80009d2:	4642      	mov	r2, r8
 80009d4:	00d0      	lsls	r0, r2, #3
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	3b7f      	subs	r3, #127	; 0x7f
 80009da:	18ed      	adds	r5, r5, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	04d2      	lsls	r2, r2, #19
 80009e0:	4302      	orrs	r2, r0
 80009e2:	4690      	mov	r8, r2
 80009e4:	469c      	mov	ip, r3
 80009e6:	0031      	movs	r1, r6
 80009e8:	464b      	mov	r3, r9
 80009ea:	4079      	eors	r1, r7
 80009ec:	1c68      	adds	r0, r5, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d81c      	bhi.n	8000a2c <__aeabi_fmul+0xa4>
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <__aeabi_fmul+0x244>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	0039      	movs	r1, r7
 80009fc:	4644      	mov	r4, r8
 80009fe:	46e2      	mov	sl, ip
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d00f      	beq.n	8000a26 <__aeabi_fmul+0x9e>
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fmul+0x84>
 8000a0a:	e0d7      	b.n	8000bbc <__aeabi_fmul+0x234>
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d137      	bne.n	8000a80 <__aeabi_fmul+0xf8>
 8000a10:	2000      	movs	r0, #0
 8000a12:	2400      	movs	r4, #0
 8000a14:	05c0      	lsls	r0, r0, #23
 8000a16:	4320      	orrs	r0, r4
 8000a18:	07c9      	lsls	r1, r1, #31
 8000a1a:	4308      	orrs	r0, r1
 8000a1c:	bce0      	pop	{r5, r6, r7}
 8000a1e:	46ba      	mov	sl, r7
 8000a20:	46b1      	mov	r9, r6
 8000a22:	46a8      	mov	r8, r5
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e7f3      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000a2c:	0c26      	lsrs	r6, r4, #16
 8000a2e:	0424      	lsls	r4, r4, #16
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	4644      	mov	r4, r8
 8000a34:	0424      	lsls	r4, r4, #16
 8000a36:	0c24      	lsrs	r4, r4, #16
 8000a38:	4643      	mov	r3, r8
 8000a3a:	0027      	movs	r7, r4
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	4357      	muls	r7, r2
 8000a40:	4374      	muls	r4, r6
 8000a42:	435a      	muls	r2, r3
 8000a44:	435e      	muls	r6, r3
 8000a46:	1912      	adds	r2, r2, r4
 8000a48:	0c3b      	lsrs	r3, r7, #16
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_fmul+0xd0>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4694      	mov	ip, r2
 8000a56:	4466      	add	r6, ip
 8000a58:	043f      	lsls	r7, r7, #16
 8000a5a:	041a      	lsls	r2, r3, #16
 8000a5c:	0c3f      	lsrs	r7, r7, #16
 8000a5e:	19d2      	adds	r2, r2, r7
 8000a60:	0194      	lsls	r4, r2, #6
 8000a62:	1e67      	subs	r7, r4, #1
 8000a64:	41bc      	sbcs	r4, r7
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	0e92      	lsrs	r2, r2, #26
 8000a6a:	199b      	adds	r3, r3, r6
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	019b      	lsls	r3, r3, #6
 8000a70:	431c      	orrs	r4, r3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	d400      	bmi.n	8000a78 <__aeabi_fmul+0xf0>
 8000a76:	e09b      	b.n	8000bb0 <__aeabi_fmul+0x228>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	0862      	lsrs	r2, r4, #1
 8000a7c:	401c      	ands	r4, r3
 8000a7e:	4314      	orrs	r4, r2
 8000a80:	0002      	movs	r2, r0
 8000a82:	327f      	adds	r2, #127	; 0x7f
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	dd64      	ble.n	8000b52 <__aeabi_fmul+0x1ca>
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x10e>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0123      	lsls	r3, r4, #4
 8000a98:	d503      	bpl.n	8000aa2 <__aeabi_fmul+0x11a>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <__aeabi_fmul+0x248>)
 8000a9e:	3280      	adds	r2, #128	; 0x80
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	2afe      	cmp	r2, #254	; 0xfe
 8000aa4:	dcbf      	bgt.n	8000a26 <__aeabi_fmul+0x9e>
 8000aa6:	01a4      	lsls	r4, r4, #6
 8000aa8:	0a64      	lsrs	r4, r4, #9
 8000aaa:	b2d0      	uxtb	r0, r2
 8000aac:	e7b2      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d13d      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d129      	bne.n	8000b18 <__aeabi_fmul+0x190>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	2500      	movs	r5, #0
 8000acc:	469a      	mov	sl, r3
 8000ace:	e774      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11b      	bne.n	8000b0c <__aeabi_fmul+0x184>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	25ff      	movs	r5, #255	; 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e76c      	b.n	80009ba <__aeabi_fmul+0x32>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	35ff      	adds	r5, #255	; 0xff
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10b      	bne.n	8000b00 <__aeabi_fmul+0x178>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	464a      	mov	r2, r9
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	469c      	mov	ip, r3
 8000af2:	e778      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000af4:	4653      	mov	r3, sl
 8000af6:	0031      	movs	r1, r6
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d000      	beq.n	8000afe <__aeabi_fmul+0x176>
 8000afc:	e783      	b.n	8000a06 <__aeabi_fmul+0x7e>
 8000afe:	e792      	b.n	8000a26 <__aeabi_fmul+0x9e>
 8000b00:	2303      	movs	r3, #3
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	e76c      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	25ff      	movs	r5, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e750      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b18:	0020      	movs	r0, r4
 8000b1a:	f000 facf 	bl	80010bc <__clzsi2>
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409c      	lsls	r4, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	426d      	negs	r5, r5
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	e744      	b.n	80009ba <__aeabi_fmul+0x32>
 8000b30:	4640      	mov	r0, r8
 8000b32:	f000 fac3 	bl	80010bc <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	4690      	mov	r8, r2
 8000b42:	469c      	mov	ip, r3
 8000b44:	3d76      	subs	r5, #118	; 0x76
 8000b46:	e74e      	b.n	80009e6 <__aeabi_fmul+0x5e>
 8000b48:	2480      	movs	r4, #128	; 0x80
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	03e4      	lsls	r4, r4, #15
 8000b50:	e760      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b52:	2301      	movs	r3, #1
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	2b1b      	cmp	r3, #27
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_fmul+0x1d4>
 8000b5a:	e759      	b.n	8000a10 <__aeabi_fmul+0x88>
 8000b5c:	0022      	movs	r2, r4
 8000b5e:	309e      	adds	r0, #158	; 0x9e
 8000b60:	40da      	lsrs	r2, r3
 8000b62:	4084      	lsls	r4, r0
 8000b64:	0013      	movs	r3, r2
 8000b66:	1e62      	subs	r2, r4, #1
 8000b68:	4194      	sbcs	r4, r2
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	0763      	lsls	r3, r4, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x1f2>
 8000b78:	3404      	adds	r4, #4
 8000b7a:	0163      	lsls	r3, r4, #5
 8000b7c:	d51a      	bpl.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2400      	movs	r4, #0
 8000b82:	e747      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	03c0      	lsls	r0, r0, #15
 8000b88:	4204      	tst	r4, r0
 8000b8a:	d009      	beq.n	8000ba0 <__aeabi_fmul+0x218>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4203      	tst	r3, r0
 8000b90:	d106      	bne.n	8000ba0 <__aeabi_fmul+0x218>
 8000b92:	4644      	mov	r4, r8
 8000b94:	4304      	orrs	r4, r0
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0039      	movs	r1, r7
 8000b9a:	20ff      	movs	r0, #255	; 0xff
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	e739      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	0264      	lsls	r4, r4, #9
 8000ba8:	0031      	movs	r1, r6
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	e731      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	e765      	b.n	8000a80 <__aeabi_fmul+0xf8>
 8000bb4:	01a4      	lsls	r4, r4, #6
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e72b      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	03c0      	lsls	r0, r0, #15
 8000bc0:	4304      	orrs	r4, r0
 8000bc2:	0264      	lsls	r4, r4, #9
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	0a64      	lsrs	r4, r4, #9
 8000bc8:	e724      	b.n	8000a14 <__aeabi_fmul+0x8c>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	08004220 	.word	0x08004220
 8000bd0:	f7ffffff 	.word	0xf7ffffff

08000bd4 <__aeabi_fsub>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	46ce      	mov	lr, r9
 8000bd8:	4647      	mov	r7, r8
 8000bda:	0243      	lsls	r3, r0, #9
 8000bdc:	0a5b      	lsrs	r3, r3, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	00da      	lsls	r2, r3, #3
 8000be2:	4694      	mov	ip, r2
 8000be4:	0a72      	lsrs	r2, r6, #9
 8000be6:	4691      	mov	r9, r2
 8000be8:	0045      	lsls	r5, r0, #1
 8000bea:	004a      	lsls	r2, r1, #1
 8000bec:	b580      	push	{r7, lr}
 8000bee:	0e2d      	lsrs	r5, r5, #24
 8000bf0:	001f      	movs	r7, r3
 8000bf2:	0fc4      	lsrs	r4, r0, #31
 8000bf4:	0e12      	lsrs	r2, r2, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	09b6      	lsrs	r6, r6, #6
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d05b      	beq.n	8000cb6 <__aeabi_fsub+0xe2>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4041      	eors	r1, r0
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d039      	beq.n	8000c7a <__aeabi_fsub+0xa6>
 8000c06:	1aa8      	subs	r0, r5, r2
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	dd5a      	ble.n	8000cc2 <__aeabi_fsub+0xee>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d06a      	beq.n	8000ce6 <__aeabi_fsub+0x112>
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x42>
 8000c14:	e0d9      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	04d2      	lsls	r2, r2, #19
 8000c1a:	4316      	orrs	r6, r2
 8000c1c:	281b      	cmp	r0, #27
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_fsub+0x4e>
 8000c20:	e0e9      	b.n	8000df6 <__aeabi_fsub+0x222>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4663      	mov	r3, ip
 8000c26:	1a18      	subs	r0, r3, r0
 8000c28:	0143      	lsls	r3, r0, #5
 8000c2a:	d400      	bmi.n	8000c2e <__aeabi_fsub+0x5a>
 8000c2c:	e0b4      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000c2e:	0180      	lsls	r0, r0, #6
 8000c30:	0987      	lsrs	r7, r0, #6
 8000c32:	0038      	movs	r0, r7
 8000c34:	f000 fa42 	bl	80010bc <__clzsi2>
 8000c38:	3805      	subs	r0, #5
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	4285      	cmp	r5, r0
 8000c3e:	dc00      	bgt.n	8000c42 <__aeabi_fsub+0x6e>
 8000c40:	e0cc      	b.n	8000ddc <__aeabi_fsub+0x208>
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	48b5      	ldr	r0, [pc, #724]	; (8000f1c <__aeabi_fsub+0x348>)
 8000c46:	4038      	ands	r0, r7
 8000c48:	0743      	lsls	r3, r0, #29
 8000c4a:	d004      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4003      	ands	r3, r0
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x82>
 8000c54:	3004      	adds	r0, #4
 8000c56:	0143      	lsls	r3, r0, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x88>
 8000c5a:	e0a0      	b.n	8000d9e <__aeabi_fsub+0x1ca>
 8000c5c:	1c6a      	adds	r2, r5, #1
 8000c5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x90>
 8000c62:	e08d      	b.n	8000d80 <__aeabi_fsub+0x1ac>
 8000c64:	0180      	lsls	r0, r0, #6
 8000c66:	0a47      	lsrs	r7, r0, #9
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	05d0      	lsls	r0, r2, #23
 8000c6c:	4338      	orrs	r0, r7
 8000c6e:	07e4      	lsls	r4, r4, #31
 8000c70:	4320      	orrs	r0, r4
 8000c72:	bcc0      	pop	{r6, r7}
 8000c74:	46b9      	mov	r9, r7
 8000c76:	46b0      	mov	r8, r6
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	1aa8      	subs	r0, r5, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dd45      	ble.n	8000d0e <__aeabi_fsub+0x13a>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d070      	beq.n	8000d68 <__aeabi_fsub+0x194>
 8000c86:	2dff      	cmp	r5, #255	; 0xff
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0xb8>
 8000c8a:	e09e      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	04db      	lsls	r3, r3, #19
 8000c90:	431e      	orrs	r6, r3
 8000c92:	4643      	mov	r3, r8
 8000c94:	2b1b      	cmp	r3, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0xc6>
 8000c98:	e0d2      	b.n	8000e40 <__aeabi_fsub+0x26c>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	4460      	add	r0, ip
 8000c9e:	0143      	lsls	r3, r0, #5
 8000ca0:	d57a      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	2dff      	cmp	r5, #255	; 0xff
 8000ca6:	d06b      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <__aeabi_fsub+0x34c>)
 8000cac:	4003      	ands	r3, r0
 8000cae:	0840      	lsrs	r0, r0, #1
 8000cb0:	4010      	ands	r0, r2
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7c8      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d020      	beq.n	8000cfc <__aeabi_fsub+0x128>
 8000cba:	428c      	cmp	r4, r1
 8000cbc:	d023      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	38ff      	subs	r0, #255	; 0xff
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d039      	beq.n	8000d3a <__aeabi_fsub+0x166>
 8000cc6:	1b57      	subs	r7, r2, r5
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0xfa>
 8000ccc:	e09d      	b.n	8000e0a <__aeabi_fsub+0x236>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x102>
 8000cd4:	e0db      	b.n	8000e8e <__aeabi_fsub+0x2ba>
 8000cd6:	1e7b      	subs	r3, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x10a>
 8000cdc:	e10d      	b.n	8000efa <__aeabi_fsub+0x326>
 8000cde:	2fff      	cmp	r7, #255	; 0xff
 8000ce0:	d071      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	e098      	b.n	8000e18 <__aeabi_fsub+0x244>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x118>
 8000cea:	e0a7      	b.n	8000e3c <__aeabi_fsub+0x268>
 8000cec:	1e42      	subs	r2, r0, #1
 8000cee:	2801      	cmp	r0, #1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x120>
 8000cf2:	e0e6      	b.n	8000ec2 <__aeabi_fsub+0x2ee>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d068      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	e78f      	b.n	8000c1c <__aeabi_fsub+0x48>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4041      	eors	r1, r0
 8000d00:	42a1      	cmp	r1, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x132>
 8000d04:	e77f      	b.n	8000c06 <__aeabi_fsub+0x32>
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	4240      	negs	r0, r0
 8000d0a:	4680      	mov	r8, r0
 8000d0c:	44a8      	add	r8, r5
 8000d0e:	4640      	mov	r0, r8
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d038      	beq.n	8000d86 <__aeabi_fsub+0x1b2>
 8000d14:	1b51      	subs	r1, r2, r5
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x148>
 8000d1a:	e0ae      	b.n	8000e7a <__aeabi_fsub+0x2a6>
 8000d1c:	2aff      	cmp	r2, #255	; 0xff
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x14e>
 8000d20:	e0df      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	4660      	mov	r0, ip
 8000d26:	04db      	lsls	r3, r3, #19
 8000d28:	4318      	orrs	r0, r3
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	291b      	cmp	r1, #27
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_fsub+0x15e>
 8000d30:	e0d9      	b.n	8000ee6 <__aeabi_fsub+0x312>
 8000d32:	2001      	movs	r0, #1
 8000d34:	0015      	movs	r5, r2
 8000d36:	1980      	adds	r0, r0, r6
 8000d38:	e7b1      	b.n	8000c9e <__aeabi_fsub+0xca>
 8000d3a:	20fe      	movs	r0, #254	; 0xfe
 8000d3c:	1c6a      	adds	r2, r5, #1
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d171      	bne.n	8000e26 <__aeabi_fsub+0x252>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x174>
 8000d46:	e0a6      	b.n	8000e96 <__aeabi_fsub+0x2c2>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x17c>
 8000d4e:	e0d9      	b.n	8000f04 <__aeabi_fsub+0x330>
 8000d50:	2200      	movs	r2, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x184>
 8000d56:	e788      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d58:	1b98      	subs	r0, r3, r6
 8000d5a:	0143      	lsls	r3, r0, #5
 8000d5c:	d400      	bmi.n	8000d60 <__aeabi_fsub+0x18c>
 8000d5e:	e0e1      	b.n	8000f24 <__aeabi_fsub+0x350>
 8000d60:	4663      	mov	r3, ip
 8000d62:	000c      	movs	r4, r1
 8000d64:	1af0      	subs	r0, r6, r3
 8000d66:	e76f      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x19a>
 8000d6c:	e0b7      	b.n	8000ede <__aeabi_fsub+0x30a>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	2801      	cmp	r0, #1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1a4>
 8000d76:	e09c      	b.n	8000eb2 <__aeabi_fsub+0x2de>
 8000d78:	28ff      	cmp	r0, #255	; 0xff
 8000d7a:	d026      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	e788      	b.n	8000c92 <__aeabi_fsub+0xbe>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	2700      	movs	r7, #0
 8000d84:	e771      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000d86:	20fe      	movs	r0, #254	; 0xfe
 8000d88:	1c6a      	adds	r2, r5, #1
 8000d8a:	4210      	tst	r0, r2
 8000d8c:	d064      	beq.n	8000e58 <__aeabi_fsub+0x284>
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d0f6      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000d92:	0015      	movs	r5, r2
 8000d94:	4466      	add	r6, ip
 8000d96:	0870      	lsrs	r0, r6, #1
 8000d98:	0743      	lsls	r3, r0, #29
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fsub+0x1ca>
 8000d9c:	e756      	b.n	8000c4c <__aeabi_fsub+0x78>
 8000d9e:	08c3      	lsrs	r3, r0, #3
 8000da0:	2dff      	cmp	r5, #255	; 0xff
 8000da2:	d012      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	0a5f      	lsrs	r7, r3, #9
 8000da8:	b2ea      	uxtb	r2, r5
 8000daa:	e75e      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000dac:	4662      	mov	r2, ip
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000db2:	e096      	b.n	8000ee2 <__aeabi_fsub+0x30e>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d008      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	03d2      	lsls	r2, r2, #15
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d004      	beq.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	4210      	tst	r0, r2
 8000dc4:	d101      	bne.n	8000dca <__aeabi_fsub+0x1f6>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0d8      	beq.n	8000d80 <__aeabi_fsub+0x1ac>
 8000dce:	2780      	movs	r7, #128	; 0x80
 8000dd0:	03ff      	lsls	r7, r7, #15
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	027f      	lsls	r7, r7, #9
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	0a7f      	lsrs	r7, r7, #9
 8000dda:	e746      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000ddc:	2320      	movs	r3, #32
 8000dde:	003a      	movs	r2, r7
 8000de0:	1b45      	subs	r5, r0, r5
 8000de2:	0038      	movs	r0, r7
 8000de4:	3501      	adds	r5, #1
 8000de6:	40ea      	lsrs	r2, r5
 8000de8:	1b5d      	subs	r5, r3, r5
 8000dea:	40a8      	lsls	r0, r5
 8000dec:	1e43      	subs	r3, r0, #1
 8000dee:	4198      	sbcs	r0, r3
 8000df0:	2500      	movs	r5, #0
 8000df2:	4310      	orrs	r0, r2
 8000df4:	e728      	b.n	8000c48 <__aeabi_fsub+0x74>
 8000df6:	2320      	movs	r3, #32
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	0032      	movs	r2, r6
 8000dfc:	409e      	lsls	r6, r3
 8000dfe:	40c2      	lsrs	r2, r0
 8000e00:	0030      	movs	r0, r6
 8000e02:	1e43      	subs	r3, r0, #1
 8000e04:	4198      	sbcs	r0, r3
 8000e06:	4310      	orrs	r0, r2
 8000e08:	e70c      	b.n	8000c24 <__aeabi_fsub+0x50>
 8000e0a:	2aff      	cmp	r2, #255	; 0xff
 8000e0c:	d0db      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	4660      	mov	r0, ip
 8000e12:	04db      	lsls	r3, r3, #19
 8000e14:	4318      	orrs	r0, r3
 8000e16:	4684      	mov	ip, r0
 8000e18:	2f1b      	cmp	r7, #27
 8000e1a:	dd56      	ble.n	8000eca <__aeabi_fsub+0x2f6>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0015      	movs	r5, r2
 8000e22:	1a30      	subs	r0, r6, r0
 8000e24:	e700      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000e26:	4663      	mov	r3, ip
 8000e28:	1b9f      	subs	r7, r3, r6
 8000e2a:	017b      	lsls	r3, r7, #5
 8000e2c:	d43d      	bmi.n	8000eaa <__aeabi_fsub+0x2d6>
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000e32:	e6fe      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000e34:	2400      	movs	r4, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e716      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e3c:	0005      	movs	r5, r0
 8000e3e:	e7af      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e40:	0032      	movs	r2, r6
 8000e42:	4643      	mov	r3, r8
 8000e44:	4641      	mov	r1, r8
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	2320      	movs	r3, #32
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	409e      	lsls	r6, r3
 8000e4e:	0030      	movs	r0, r6
 8000e50:	1e43      	subs	r3, r0, #1
 8000e52:	4198      	sbcs	r0, r3
 8000e54:	4310      	orrs	r0, r2
 8000e56:	e721      	b.n	8000c9c <__aeabi_fsub+0xc8>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d1a7      	bne.n	8000dac <__aeabi_fsub+0x1d8>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d059      	beq.n	8000f16 <__aeabi_fsub+0x342>
 8000e62:	2200      	movs	r2, #0
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x296>
 8000e68:	e6ff      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	4460      	add	r0, ip
 8000e6e:	0143      	lsls	r3, r0, #5
 8000e70:	d592      	bpl.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <__aeabi_fsub+0x348>)
 8000e74:	3501      	adds	r5, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	e78e      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d047      	beq.n	8000f10 <__aeabi_fsub+0x33c>
 8000e80:	1e4b      	subs	r3, r1, #1
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d015      	beq.n	8000eb2 <__aeabi_fsub+0x2de>
 8000e86:	29ff      	cmp	r1, #255	; 0xff
 8000e88:	d02b      	beq.n	8000ee2 <__aeabi_fsub+0x30e>
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	e74e      	b.n	8000d2c <__aeabi_fsub+0x158>
 8000e8e:	000c      	movs	r4, r1
 8000e90:	464b      	mov	r3, r9
 8000e92:	003d      	movs	r5, r7
 8000e94:	e784      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000e96:	4662      	mov	r2, ip
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d18b      	bne.n	8000db4 <__aeabi_fsub+0x1e0>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d192      	bne.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000ea0:	2780      	movs	r7, #128	; 0x80
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	03ff      	lsls	r7, r7, #15
 8000ea8:	e6df      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	000c      	movs	r4, r1
 8000eae:	1af7      	subs	r7, r6, r3
 8000eb0:	e6bf      	b.n	8000c32 <__aeabi_fsub+0x5e>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	4460      	add	r0, ip
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x2ea>
 8000ebc:	e76c      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000ebe:	2502      	movs	r5, #2
 8000ec0:	e6f2      	b.n	8000ca8 <__aeabi_fsub+0xd4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2501      	movs	r5, #1
 8000ec6:	1b98      	subs	r0, r3, r6
 8000ec8:	e6ae      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000eca:	2320      	movs	r3, #32
 8000ecc:	4664      	mov	r4, ip
 8000ece:	4660      	mov	r0, ip
 8000ed0:	40fc      	lsrs	r4, r7
 8000ed2:	1bdf      	subs	r7, r3, r7
 8000ed4:	40b8      	lsls	r0, r7
 8000ed6:	1e43      	subs	r3, r0, #1
 8000ed8:	4198      	sbcs	r0, r3
 8000eda:	4320      	orrs	r0, r4
 8000edc:	e79f      	b.n	8000e1e <__aeabi_fsub+0x24a>
 8000ede:	0005      	movs	r5, r0
 8000ee0:	e75e      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	e771      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	4665      	mov	r5, ip
 8000eea:	4660      	mov	r0, ip
 8000eec:	40cd      	lsrs	r5, r1
 8000eee:	1a59      	subs	r1, r3, r1
 8000ef0:	4088      	lsls	r0, r1
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	4328      	orrs	r0, r5
 8000ef8:	e71c      	b.n	8000d34 <__aeabi_fsub+0x160>
 8000efa:	4663      	mov	r3, ip
 8000efc:	000c      	movs	r4, r1
 8000efe:	2501      	movs	r5, #1
 8000f00:	1af0      	subs	r0, r6, r3
 8000f02:	e691      	b.n	8000c28 <__aeabi_fsub+0x54>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d095      	beq.n	8000e34 <__aeabi_fsub+0x260>
 8000f08:	000c      	movs	r4, r1
 8000f0a:	464f      	mov	r7, r9
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	e6ac      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f10:	464b      	mov	r3, r9
 8000f12:	000d      	movs	r5, r1
 8000f14:	e744      	b.n	8000da0 <__aeabi_fsub+0x1cc>
 8000f16:	464f      	mov	r7, r9
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x96>
 8000f1c:	fbffffff 	.word	0xfbffffff
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x356>
 8000f28:	e736      	b.n	8000d98 <__aeabi_fsub+0x1c4>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e69c      	b.n	8000c6a <__aeabi_fsub+0x96>

08000f30 <__aeabi_fcmpun>:
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	024a      	lsls	r2, r1, #9
 8000f34:	0040      	lsls	r0, r0, #1
 8000f36:	0049      	lsls	r1, r1, #1
 8000f38:	0a5b      	lsrs	r3, r3, #9
 8000f3a:	0a52      	lsrs	r2, r2, #9
 8000f3c:	0e09      	lsrs	r1, r1, #24
 8000f3e:	0e00      	lsrs	r0, r0, #24
 8000f40:	28ff      	cmp	r0, #255	; 0xff
 8000f42:	d006      	beq.n	8000f52 <__aeabi_fcmpun+0x22>
 8000f44:	2000      	movs	r0, #0
 8000f46:	29ff      	cmp	r1, #255	; 0xff
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	1e53      	subs	r3, r2, #1
 8000f4c:	419a      	sbcs	r2, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	4770      	bx	lr
 8000f52:	38fe      	subs	r0, #254	; 0xfe
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1fb      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f58:	e7f4      	b.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <__aeabi_f2iz>:
 8000f5c:	0241      	lsls	r1, r0, #9
 8000f5e:	0042      	lsls	r2, r0, #1
 8000f60:	0fc3      	lsrs	r3, r0, #31
 8000f62:	0a49      	lsrs	r1, r1, #9
 8000f64:	2000      	movs	r0, #0
 8000f66:	0e12      	lsrs	r2, r2, #24
 8000f68:	2a7e      	cmp	r2, #126	; 0x7e
 8000f6a:	dd03      	ble.n	8000f74 <__aeabi_f2iz+0x18>
 8000f6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f6e:	dd02      	ble.n	8000f76 <__aeabi_f2iz+0x1a>
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <__aeabi_f2iz+0x3c>)
 8000f72:	1898      	adds	r0, r3, r2
 8000f74:	4770      	bx	lr
 8000f76:	2080      	movs	r0, #128	; 0x80
 8000f78:	0400      	lsls	r0, r0, #16
 8000f7a:	4301      	orrs	r1, r0
 8000f7c:	2a95      	cmp	r2, #149	; 0x95
 8000f7e:	dc07      	bgt.n	8000f90 <__aeabi_f2iz+0x34>
 8000f80:	2096      	movs	r0, #150	; 0x96
 8000f82:	1a82      	subs	r2, r0, r2
 8000f84:	40d1      	lsrs	r1, r2
 8000f86:	4248      	negs	r0, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f3      	bne.n	8000f74 <__aeabi_f2iz+0x18>
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	e7f1      	b.n	8000f74 <__aeabi_f2iz+0x18>
 8000f90:	3a96      	subs	r2, #150	; 0x96
 8000f92:	4091      	lsls	r1, r2
 8000f94:	e7f7      	b.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	7fffffff 	.word	0x7fffffff

08000f9c <__aeabi_i2f>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d013      	beq.n	8000fca <__aeabi_i2f+0x2e>
 8000fa2:	17c3      	asrs	r3, r0, #31
 8000fa4:	18c6      	adds	r6, r0, r3
 8000fa6:	405e      	eors	r6, r3
 8000fa8:	0fc4      	lsrs	r4, r0, #31
 8000faa:	0030      	movs	r0, r6
 8000fac:	f000 f886 	bl	80010bc <__clzsi2>
 8000fb0:	239e      	movs	r3, #158	; 0x9e
 8000fb2:	0005      	movs	r5, r0
 8000fb4:	1a1b      	subs	r3, r3, r0
 8000fb6:	2b96      	cmp	r3, #150	; 0x96
 8000fb8:	dc0f      	bgt.n	8000fda <__aeabi_i2f+0x3e>
 8000fba:	2808      	cmp	r0, #8
 8000fbc:	dd01      	ble.n	8000fc2 <__aeabi_i2f+0x26>
 8000fbe:	3d08      	subs	r5, #8
 8000fc0:	40ae      	lsls	r6, r5
 8000fc2:	0276      	lsls	r6, r6, #9
 8000fc4:	0a76      	lsrs	r6, r6, #9
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	e002      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8000fca:	2400      	movs	r4, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	2600      	movs	r6, #0
 8000fd0:	05c0      	lsls	r0, r0, #23
 8000fd2:	4330      	orrs	r0, r6
 8000fd4:	07e4      	lsls	r4, r4, #31
 8000fd6:	4320      	orrs	r0, r4
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fda:	2b99      	cmp	r3, #153	; 0x99
 8000fdc:	dd0c      	ble.n	8000ff8 <__aeabi_i2f+0x5c>
 8000fde:	2205      	movs	r2, #5
 8000fe0:	0031      	movs	r1, r6
 8000fe2:	1a12      	subs	r2, r2, r0
 8000fe4:	40d1      	lsrs	r1, r2
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	0001      	movs	r1, r0
 8000fea:	0030      	movs	r0, r6
 8000fec:	311b      	adds	r1, #27
 8000fee:	4088      	lsls	r0, r1
 8000ff0:	1e41      	subs	r1, r0, #1
 8000ff2:	4188      	sbcs	r0, r1
 8000ff4:	4302      	orrs	r2, r0
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	2d05      	cmp	r5, #5
 8000ffa:	dc12      	bgt.n	8001022 <__aeabi_i2f+0x86>
 8000ffc:	0031      	movs	r1, r6
 8000ffe:	4f0d      	ldr	r7, [pc, #52]	; (8001034 <__aeabi_i2f+0x98>)
 8001000:	4039      	ands	r1, r7
 8001002:	0772      	lsls	r2, r6, #29
 8001004:	d009      	beq.n	800101a <__aeabi_i2f+0x7e>
 8001006:	200f      	movs	r0, #15
 8001008:	4030      	ands	r0, r6
 800100a:	2804      	cmp	r0, #4
 800100c:	d005      	beq.n	800101a <__aeabi_i2f+0x7e>
 800100e:	3104      	adds	r1, #4
 8001010:	014a      	lsls	r2, r1, #5
 8001012:	d502      	bpl.n	800101a <__aeabi_i2f+0x7e>
 8001014:	239f      	movs	r3, #159	; 0x9f
 8001016:	4039      	ands	r1, r7
 8001018:	1b5b      	subs	r3, r3, r5
 800101a:	0189      	lsls	r1, r1, #6
 800101c:	0a4e      	lsrs	r6, r1, #9
 800101e:	b2d8      	uxtb	r0, r3
 8001020:	e7d6      	b.n	8000fd0 <__aeabi_i2f+0x34>
 8001022:	1f6a      	subs	r2, r5, #5
 8001024:	4096      	lsls	r6, r2
 8001026:	0031      	movs	r1, r6
 8001028:	4f02      	ldr	r7, [pc, #8]	; (8001034 <__aeabi_i2f+0x98>)
 800102a:	4039      	ands	r1, r7
 800102c:	0772      	lsls	r2, r6, #29
 800102e:	d0f4      	beq.n	800101a <__aeabi_i2f+0x7e>
 8001030:	e7e9      	b.n	8001006 <__aeabi_i2f+0x6a>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	fbffffff 	.word	0xfbffffff

08001038 <__aeabi_ui2f>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	1e05      	subs	r5, r0, #0
 800103c:	d00e      	beq.n	800105c <__aeabi_ui2f+0x24>
 800103e:	f000 f83d 	bl	80010bc <__clzsi2>
 8001042:	239e      	movs	r3, #158	; 0x9e
 8001044:	0004      	movs	r4, r0
 8001046:	1a1b      	subs	r3, r3, r0
 8001048:	2b96      	cmp	r3, #150	; 0x96
 800104a:	dc0c      	bgt.n	8001066 <__aeabi_ui2f+0x2e>
 800104c:	2808      	cmp	r0, #8
 800104e:	dd01      	ble.n	8001054 <__aeabi_ui2f+0x1c>
 8001050:	3c08      	subs	r4, #8
 8001052:	40a5      	lsls	r5, r4
 8001054:	026d      	lsls	r5, r5, #9
 8001056:	0a6d      	lsrs	r5, r5, #9
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	e001      	b.n	8001060 <__aeabi_ui2f+0x28>
 800105c:	2000      	movs	r0, #0
 800105e:	2500      	movs	r5, #0
 8001060:	05c0      	lsls	r0, r0, #23
 8001062:	4328      	orrs	r0, r5
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	2b99      	cmp	r3, #153	; 0x99
 8001068:	dd09      	ble.n	800107e <__aeabi_ui2f+0x46>
 800106a:	0002      	movs	r2, r0
 800106c:	0029      	movs	r1, r5
 800106e:	321b      	adds	r2, #27
 8001070:	4091      	lsls	r1, r2
 8001072:	1e4a      	subs	r2, r1, #1
 8001074:	4191      	sbcs	r1, r2
 8001076:	2205      	movs	r2, #5
 8001078:	1a12      	subs	r2, r2, r0
 800107a:	40d5      	lsrs	r5, r2
 800107c:	430d      	orrs	r5, r1
 800107e:	2c05      	cmp	r4, #5
 8001080:	dc12      	bgt.n	80010a8 <__aeabi_ui2f+0x70>
 8001082:	0029      	movs	r1, r5
 8001084:	4e0c      	ldr	r6, [pc, #48]	; (80010b8 <__aeabi_ui2f+0x80>)
 8001086:	4031      	ands	r1, r6
 8001088:	076a      	lsls	r2, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 800108c:	200f      	movs	r0, #15
 800108e:	4028      	ands	r0, r5
 8001090:	2804      	cmp	r0, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 8001094:	3104      	adds	r1, #4
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_ui2f+0x68>
 800109a:	239f      	movs	r3, #159	; 0x9f
 800109c:	4031      	ands	r1, r6
 800109e:	1b1b      	subs	r3, r3, r4
 80010a0:	0189      	lsls	r1, r1, #6
 80010a2:	0a4d      	lsrs	r5, r1, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7db      	b.n	8001060 <__aeabi_ui2f+0x28>
 80010a8:	1f62      	subs	r2, r4, #5
 80010aa:	4095      	lsls	r5, r2
 80010ac:	0029      	movs	r1, r5
 80010ae:	4e02      	ldr	r6, [pc, #8]	; (80010b8 <__aeabi_ui2f+0x80>)
 80010b0:	4031      	ands	r1, r6
 80010b2:	076a      	lsls	r2, r5, #29
 80010b4:	d0f4      	beq.n	80010a0 <__aeabi_ui2f+0x68>
 80010b6:	e7e9      	b.n	800108c <__aeabi_ui2f+0x54>
 80010b8:	fbffffff 	.word	0xfbffffff

080010bc <__clzsi2>:
 80010bc:	211c      	movs	r1, #28
 80010be:	2301      	movs	r3, #1
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d301      	bcc.n	80010ca <__clzsi2+0xe>
 80010c6:	0c00      	lsrs	r0, r0, #16
 80010c8:	3910      	subs	r1, #16
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	4298      	cmp	r0, r3
 80010ce:	d301      	bcc.n	80010d4 <__clzsi2+0x18>
 80010d0:	0a00      	lsrs	r0, r0, #8
 80010d2:	3908      	subs	r1, #8
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d301      	bcc.n	80010de <__clzsi2+0x22>
 80010da:	0900      	lsrs	r0, r0, #4
 80010dc:	3904      	subs	r1, #4
 80010de:	a202      	add	r2, pc, #8	; (adr r2, 80010e8 <__clzsi2+0x2c>)
 80010e0:	5c10      	ldrb	r0, [r2, r0]
 80010e2:	1840      	adds	r0, r0, r1
 80010e4:	4770      	bx	lr
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	02020304 	.word	0x02020304
 80010ec:	01010101 	.word	0x01010101
	...

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fb05 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f847 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 f93d 	bl	8001384 <MX_GPIO_Init>
  MX_ADC1_Init();
 800110a:	f000 f897 	bl	800123c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sel = 0;
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
  //HAL_ADC_Start(&hadc1);
  // for (uint8_t i = 0; i < NUM_SENSORS; i++) {
  //   HAL_ADC_Start_IT(&hadc1);
  //   //sensor_val[i] = ADC_ReadChannel(&hadc1, sensor_channel[i]);
  // }
  HAL_ADC_Start_IT(&hadc1);
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0x88>)
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fea2 	bl	8001e60 <HAL_ADC_Start_IT>
  Sensor_SaveProfile();
 800111c:	f000 f9d0 	bl	80014c0 <Sensor_SaveProfile>
    //HAL_ADC_Start(&hadc1);
    // for (uint8_t i = 0; i < NUM_SENSORS; i++) {
    //   HAL_ADC_Start_IT(&hadc1);
    //   //sensor_val[i] = ADC_ReadChannel(&hadc1, sensor_channel[i]);
    // }
    HAL_ADC_Start_IT(&hadc1);
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <main+0x88>)
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fe9c 	bl	8001e60 <HAL_ADC_Start_IT>
    //sensor_val[sel] = ADC_ReadChannel(&hadc1, sensor_channel[sel]);

    if (Get_SensorDist(sensor_val, (uint32_t *)sensor_sav) > tolerance) {
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <main+0x8c>)
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <main+0x90>)
 800112c:	0011      	movs	r1, r2
 800112e:	0018      	movs	r0, r3
 8001130:	f000 f97a 	bl	8001428 <Get_SensorDist>
 8001134:	0002      	movs	r2, r0
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <main+0x94>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d907      	bls.n	800114e <main+0x56>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <main+0x98>)
 8001144:	2201      	movs	r2, #1
 8001146:	0019      	movs	r1, r3
 8001148:	f001 fd0a 	bl	8002b60 <HAL_GPIO_WritePin>
 800114c:	e006      	b.n	800115c <main+0x64>
    }
    else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <main+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	0019      	movs	r1, r3
 8001158:	f001 fd02 	bl	8002b60 <HAL_GPIO_WritePin>

    if (sel < NUM_SENSORS - 1) sel++;
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d805      	bhi.n	8001170 <main+0x78>
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	3201      	adds	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e002      	b.n	8001176 <main+0x7e>
    else sel = 0;
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]

    HAL_Delay(5);
 8001176:	2005      	movs	r0, #5
 8001178:	f000 fb4e 	bl	8001818 <HAL_Delay>
    HAL_ADC_Start_IT(&hadc1);
 800117c:	e7d0      	b.n	8001120 <main+0x28>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000090 	.word	0x20000090
 8001184:	200000f4 	.word	0x200000f4
 8001188:	20000108 	.word	0x20000108
 800118c:	20000000 	.word	0x20000000
 8001190:	50000800 	.word	0x50000800

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b093      	sub	sp, #76	; 0x4c
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	2414      	movs	r4, #20
 800119c:	193b      	adds	r3, r7, r4
 800119e:	0018      	movs	r0, r3
 80011a0:	2334      	movs	r3, #52	; 0x34
 80011a2:	001a      	movs	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	f002 fb31 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	0018      	movs	r0, r3
 80011ae:	2310      	movs	r3, #16
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f002 fb2a 	bl	800380c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	0018      	movs	r0, r3
 80011be:	f001 fced 	bl	8002b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	0252      	lsls	r2, r2, #9
 80011ce:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	0021      	movs	r1, r4
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2202      	movs	r2, #2
 80011d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2203      	movs	r2, #3
 80011dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2210      	movs	r2, #16
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	0292      	lsls	r2, r2, #10
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0592      	lsls	r2, r2, #22
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 fd0d 	bl	8002c1c <HAL_RCC_OscConfig>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001206:	f000 f97f 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2202      	movs	r2, #2
 8001214:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2102      	movs	r1, #2
 8001226:	0018      	movs	r0, r3
 8001228:	f002 f808 	bl	800323c <HAL_RCC_ClockConfig>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001230:	f000 f96a 	bl	8001508 <Error_Handler>
  }
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b013      	add	sp, #76	; 0x4c
 800123a:	bd90      	pop	{r4, r7, pc}

0800123c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	0018      	movs	r0, r3
 8001246:	230c      	movs	r3, #12
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f002 fade 	bl	800380c <memset>
  
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001252:	4a46      	ldr	r2, [pc, #280]	; (800136c <MX_ADC1_Init+0x130>)
 8001254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001256:	4b44      	ldr	r3, [pc, #272]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	0352      	lsls	r2, r2, #13
 800125c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <MX_ADC1_Init+0x12c>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0612      	lsls	r2, r2, #24
 8001270:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001274:	2204      	movs	r2, #4
 8001276:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001278:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <MX_ADC1_Init+0x12c>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001280:	2200      	movs	r2, #0
 8001282:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001286:	2200      	movs	r2, #0
 8001288:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <MX_ADC1_Init+0x12c>)
 800128c:	2201      	movs	r2, #1
 800128e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <MX_ADC1_Init+0x12c>)
 800129e:	222c      	movs	r2, #44	; 0x2c
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012b2:	223c      	movs	r2, #60	; 0x3c
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f000 fc25 	bl	8001b10 <HAL_ADC_Init>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ca:	f000 f91d 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2201      	movs	r2, #1
 80012d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	1d3a      	adds	r2, r7, #4
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 ff71 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012ea:	f000 f90d 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <MX_ADC1_Init+0x134>)
 80012f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	1d3a      	adds	r2, r7, #4
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_ADC1_Init+0x12c>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 ff64 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001304:	f000 f900 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <MX_ADC1_Init+0x138>)
 800130c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	1d3a      	adds	r2, r7, #4
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f000 ff57 	bl	80021c8 <HAL_ADC_ConfigChannel>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800131e:	f000 f8f3 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <MX_ADC1_Init+0x13c>)
 8001326:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	1d3a      	adds	r2, r7, #4
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_ADC1_Init+0x12c>)
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f000 ff4a 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001338:	f000 f8e6 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_ADC1_Init+0x140>)
 8001340:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	1d3a      	adds	r2, r7, #4
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_ADC1_Init+0x12c>)
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f000 ff3d 	bl	80021c8 <HAL_ADC_ConfigChannel>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001352:	f000 f8d9 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  gConfig = sConfig;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_ADC1_Init+0x144>)
 8001358:	1d3a      	adds	r2, r7, #4
 800135a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800135c:	c313      	stmia	r3!, {r0, r1, r4}
  /* USER CODE END ADC1_Init 2 */

}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b005      	add	sp, #20
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000090 	.word	0x20000090
 800136c:	40012400 	.word	0x40012400
 8001370:	04000002 	.word	0x04000002
 8001374:	08000004 	.word	0x08000004
 8001378:	0c000008 	.word	0x0c000008
 800137c:	10000010 	.word	0x10000010
 8001380:	2000011c 	.word	0x2000011c

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	240c      	movs	r4, #12
 800138c:	193b      	adds	r3, r7, r4
 800138e:	0018      	movs	r0, r3
 8001390:	2314      	movs	r3, #20
 8001392:	001a      	movs	r2, r3
 8001394:	2100      	movs	r1, #0
 8001396:	f002 fa39 	bl	800380c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_GPIO_Init+0x9c>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013a0:	2104      	movs	r1, #4
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	2204      	movs	r2, #4
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013b8:	2120      	movs	r1, #32
 80013ba:	430a      	orrs	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c2:	2220      	movs	r2, #32
 80013c4:	4013      	ands	r3, r2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_GPIO_Init+0x9c>)
 80013d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013da:	2201      	movs	r2, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <MX_GPIO_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	0019      	movs	r1, r3
 80013ec:	f001 fbb8 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0052      	lsls	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2201      	movs	r2, #1
 80013fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	193b      	adds	r3, r7, r4
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <MX_GPIO_Init+0xa0>)
 800140e:	0019      	movs	r1, r3
 8001410:	0010      	movs	r0, r2
 8001412:	f001 fa41 	bl	8002898 <HAL_GPIO_Init>

}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b009      	add	sp, #36	; 0x24
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40021000 	.word	0x40021000
 8001424:	50000800 	.word	0x50000800

08001428 <Get_SensorDist>:
  }

  return 0;
}

uint32_t Get_SensorDist(volatile uint32_t values[NUM_SENSORS], uint32_t save[NUM_SENSORS]) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  float dist = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001436:	230b      	movs	r3, #11
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e02c      	b.n	800149a <Get_SensorDist+0x72>
    dist += powf((float)values[i] - (float)save[i], 2);
 8001440:	250b      	movs	r5, #11
 8001442:	197b      	adds	r3, r7, r5
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	18d3      	adds	r3, r2, r3
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff fdf2 	bl	8001038 <__aeabi_ui2f>
 8001454:	1c04      	adds	r4, r0, #0
 8001456:	197b      	adds	r3, r7, r5
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	18d3      	adds	r3, r2, r3
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fde8 	bl	8001038 <__aeabi_ui2f>
 8001468:	1c03      	adds	r3, r0, #0
 800146a:	1c19      	adds	r1, r3, #0
 800146c:	1c20      	adds	r0, r4, #0
 800146e:	f7ff fbb1 	bl	8000bd4 <__aeabi_fsub>
 8001472:	1c03      	adds	r3, r0, #0
 8001474:	1c1a      	adds	r2, r3, #0
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	1c19      	adds	r1, r3, #0
 800147c:	1c10      	adds	r0, r2, #0
 800147e:	f002 f9cd 	bl	800381c <powf>
 8001482:	1c03      	adds	r3, r0, #0
 8001484:	1c19      	adds	r1, r3, #0
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7fe ff18 	bl	80002bc <__aeabi_fadd>
 800148c:	1c03      	adds	r3, r0, #0
 800148e:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 8001490:	197b      	adds	r3, r7, r5
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	197b      	adds	r3, r7, r5
 8001496:	3201      	adds	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	230b      	movs	r3, #11
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d9cd      	bls.n	8001440 <Get_SensorDist+0x18>
  }

  return (uint32_t)sqrtf(dist);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1c18      	adds	r0, r3, #0
 80014a8:	f002 fa0c 	bl	80038c4 <sqrtf>
 80014ac:	1c03      	adds	r3, r0, #0
 80014ae:	1c18      	adds	r0, r3, #0
 80014b0:	f7fe feec 	bl	800028c <__aeabi_f2uiz>
 80014b4:	0003      	movs	r3, r0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014c0 <Sensor_SaveProfile>:

void Sensor_SaveProfile() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e00e      	b.n	80014ec <Sensor_SaveProfile+0x2c>
    sensor_sav[i] = sensor_val[i];
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	7819      	ldrb	r1, [r3, #0]
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Sensor_SaveProfile+0x40>)
 80014d8:	0089      	lsls	r1, r1, #2
 80014da:	58c9      	ldr	r1, [r1, r3]
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <Sensor_SaveProfile+0x44>)
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	50d1      	str	r1, [r2, r3]
  for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	3201      	adds	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d9ec      	bls.n	80014ce <Sensor_SaveProfile+0xe>
  }
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	20000108 	.word	0x20000108
 8001504:	200000f4 	.word	0x200000f4

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_MspInit+0x4c>)
 800151c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_MspInit+0x4c>)
 8001520:	2101      	movs	r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_MspInit+0x4c>)
 8001534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_MspInit+0x4c>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0549      	lsls	r1, r1, #21
 800153c:	430a      	orrs	r2, r1
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_MspInit+0x4c>)
 8001542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	055b      	lsls	r3, r3, #21
 8001548:	4013      	ands	r3, r2
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f984 	bl	8001860 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b091      	sub	sp, #68	; 0x44
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	232c      	movs	r3, #44	; 0x2c
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	0018      	movs	r0, r3
 8001572:	2314      	movs	r3, #20
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f002 f948 	bl	800380c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	2410      	movs	r4, #16
 800157e:	193b      	adds	r3, r7, r4
 8001580:	0018      	movs	r0, r3
 8001582:	231c      	movs	r3, #28
 8001584:	001a      	movs	r2, r3
 8001586:	2100      	movs	r1, #0
 8001588:	f002 f940 	bl	800380c <memset>
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_ADC_MspInit+0xc0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d141      	bne.n	800161a <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	01d2      	lsls	r2, r2, #7
 800159c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 ffd2 	bl	8003550 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015b0:	f7ff ffaa 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0349      	lsls	r1, r1, #13
 80015be:	430a      	orrs	r2, r1
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	035b      	lsls	r3, r3, #13
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0xc4>)
 80015de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	221f      	movs	r2, #31
 80015ee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2203      	movs	r2, #3
 80015f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	187a      	adds	r2, r7, r1
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f001 f947 	bl	8002898 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	200c      	movs	r0, #12
 8001610:	f001 f904 	bl	800281c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001614:	200c      	movs	r0, #12
 8001616:	f001 f916 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b011      	add	sp, #68	; 0x44
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40012400 	.word	0x40012400
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f8c6 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001654:	f001 f914 	bl	8002880 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  sensor_val[sel++] = HAL_ADC_GetValue(&hadc1);
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <ADC1_IRQHandler+0x40>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	b2d1      	uxtb	r1, r2
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <ADC1_IRQHandler+0x40>)
 800166e:	7011      	strb	r1, [r2, #0]
 8001670:	001c      	movs	r4, r3
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <ADC1_IRQHandler+0x44>)
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fc6b 	bl	8001f50 <HAL_ADC_GetValue>
 800167a:	0001      	movs	r1, r0
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <ADC1_IRQHandler+0x48>)
 800167e:	00a2      	lsls	r2, r4, #2
 8001680:	50d1      	str	r1, [r2, r3]
  if (sel == NUM_SENSORS) sel = 0;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <ADC1_IRQHandler+0x40>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d102      	bne.n	8001690 <ADC1_IRQHandler+0x30>
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <ADC1_IRQHandler+0x40>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <ADC1_IRQHandler+0x44>)
 8001692:	0018      	movs	r0, r3
 8001694:	f000 fc68 	bl	8001f68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000128 	.word	0x20000128
 80016a4:	20000090 	.word	0x20000090
 80016a8:	20000108 	.word	0x20000108

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <Reset_Handler>:
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopForever+0x2>)
 80016ba:	4685      	mov	sp, r0
 80016bc:	f7ff fff6 	bl	80016ac <SystemInit>
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <LoopForever+0x6>)
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <LoopForever+0xa>)
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <LoopForever+0xe>)
 80016c6:	2300      	movs	r3, #0
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:
 80016ca:	58d4      	ldr	r4, [r2, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:
 80016d0:	18c4      	adds	r4, r0, r3
 80016d2:	428c      	cmp	r4, r1
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <LoopForever+0x12>)
 80016d8:	4c0a      	ldr	r4, [pc, #40]	; (8001704 <LoopForever+0x16>)
 80016da:	2300      	movs	r3, #0
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:
 80016e2:	42a2      	cmp	r2, r4
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>
 80016e6:	f002 f86d 	bl	80037c4 <__libc_init_array>
 80016ea:	f7ff fd05 	bl	80010f8 <main>

080016ee <LoopForever>:
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
 80016f0:	20009000 	.word	0x20009000
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000074 	.word	0x20000074
 80016fc:	080042c0 	.word	0x080042c0
 8001700:	20000074 	.word	0x20000074
 8001704:	20000130 	.word	0x20000130

08001708 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 8001708:	e7fe      	b.n	8001708 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

0800170c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_Init+0x3c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Init+0x3c>)
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	0049      	lsls	r1, r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f810 	bl	800174c <HAL_InitTick>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d003      	beq.n	8001738 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	e001      	b.n	800173c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff feec 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	230f      	movs	r3, #15
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_InitTick+0x88>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02b      	beq.n	80017bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_InitTick+0x8c>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_InitTick+0x88>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	0019      	movs	r1, r3
 800176e:	23fa      	movs	r3, #250	; 0xfa
 8001770:	0098      	lsls	r0, r3, #2
 8001772:	f7fe fcc5 	bl	8000100 <__udivsi3>
 8001776:	0003      	movs	r3, r0
 8001778:	0019      	movs	r1, r3
 800177a:	0020      	movs	r0, r4
 800177c:	f7fe fcc0 	bl	8000100 <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	0018      	movs	r0, r3
 8001784:	f001 f86f 	bl	8002866 <HAL_SYSTICK_Config>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d112      	bne.n	80017b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d80a      	bhi.n	80017a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	2301      	movs	r3, #1
 8001796:	425b      	negs	r3, r3
 8001798:	2200      	movs	r2, #0
 800179a:	0018      	movs	r0, r3
 800179c:	f001 f83e 	bl	800281c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_InitTick+0x90>)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00d      	b.n	80017c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017a8:	230f      	movs	r3, #15
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e008      	b.n	80017c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b2:	230f      	movs	r3, #15
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e003      	b.n	80017c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017bc:	230f      	movs	r3, #15
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017c4:	230f      	movs	r3, #15
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b005      	add	sp, #20
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x1c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	001a      	movs	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_IncTick+0x20>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	18d2      	adds	r2, r2, r3
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_IncTick+0x20>)
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	2000012c 	.word	0x2000012c

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_GetTick+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	2000012c 	.word	0x2000012c

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fff0 	bl	8001804 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	001a      	movs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	189b      	adds	r3, r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	f7ff ffe0 	bl	8001804 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	2000000c 	.word	0x2000000c

08001860 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40010000 	.word	0x40010000
 8001888:	fffff9ff 	.word	0xfffff9ff

0800188c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800189c:	401a      	ands	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	fe3fffff 	.word	0xfe3fffff

080018b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	23e0      	movs	r3, #224	; 0xe0
 80018c2:	045b      	lsls	r3, r3, #17
 80018c4:	4013      	ands	r3, r2
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}

080018ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	2104      	movs	r1, #4
 80018e2:	400a      	ands	r2, r1
 80018e4:	2107      	movs	r1, #7
 80018e6:	4091      	lsls	r1, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	43d2      	mvns	r2, r2
 80018ec:	401a      	ands	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2104      	movs	r1, #4
 80018f2:	400b      	ands	r3, r1
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4099      	lsls	r1, r3
 80018f8:	000b      	movs	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}

08001908 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	2104      	movs	r1, #4
 800191a:	400a      	ands	r2, r1
 800191c:	2107      	movs	r1, #7
 800191e:	4091      	lsls	r1, r2
 8001920:	000a      	movs	r2, r1
 8001922:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2104      	movs	r1, #4
 8001928:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800192a:	40da      	lsrs	r2, r3
 800192c:	0013      	movs	r3, r2
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}

08001936 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	23c0      	movs	r3, #192	; 0xc0
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4013      	ands	r3, r2
 8001948:	d101      	bne.n	800194e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	211f      	movs	r1, #31
 800196c:	400a      	ands	r2, r1
 800196e:	210f      	movs	r1, #15
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	43d2      	mvns	r2, r2
 8001976:	401a      	ands	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0e9b      	lsrs	r3, r3, #26
 800197c:	210f      	movs	r1, #15
 800197e:	4019      	ands	r1, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	201f      	movs	r0, #31
 8001984:	4003      	ands	r3, r0
 8001986:	4099      	lsls	r1, r3
 8001988:	000b      	movs	r3, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	035b      	lsls	r3, r3, #13
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}

080019ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	0352      	lsls	r2, r2, #13
 80019cc:	0b52      	lsrs	r2, r2, #13
 80019ce:	43d2      	mvns	r2, r2
 80019d0:	401a      	ands	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}

080019de <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2203      	movs	r2, #3
 80019ec:	4013      	ands	r3, r2
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	0212      	lsls	r2, r2, #8
 8001a0c:	43d2      	mvns	r2, r2
 8001a0e:	401a      	ands	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	400b      	ands	r3, r1
 8001a18:	4904      	ldr	r1, [pc, #16]	; (8001a2c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	07ffff00 	.word	0x07ffff00

08001a30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	0552      	lsls	r2, r2, #21
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	6fffffe8 	.word	0x6fffffe8

08001a58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	055b      	lsls	r3, r3, #21
 8001a68:	401a      	ands	r2, r3
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	055b      	lsls	r3, r3, #21
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <LL_ADC_Enable+0x20>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2201      	movs	r2, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	7fffffe8 	.word	0x7fffffe8

08001aa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_IsEnabled+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_IsEnabled+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <LL_ADC_REG_StartConversion+0x20>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2204      	movs	r2, #4
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	7fffffe8 	.word	0x7fffffe8

08001aec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d101      	bne.n	8001b04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	231f      	movs	r3, #31
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e17f      	b.n	8001e36 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10a      	bne.n	8001b54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fd0f 	bl	8001564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2254      	movs	r2, #84	; 0x54
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ff7d 	bl	8001a58 <LL_ADC_IsInternalRegulatorEnabled>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff ff62 	bl	8001a30 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b6c:	4bb4      	ldr	r3, [pc, #720]	; (8001e40 <HAL_ADC_Init+0x330>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	49b4      	ldr	r1, [pc, #720]	; (8001e44 <HAL_ADC_Init+0x334>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7fe fac4 	bl	8000100 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff ff60 	bl	8001a58 <LL_ADC_IsInternalRegulatorEnabled>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d10f      	bne.n	8001bbc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2201      	movs	r2, #1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bb4:	231f      	movs	r3, #31
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ff93 	bl	8001aec <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	2210      	movs	r2, #16
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d000      	beq.n	8001bd6 <HAL_ADC_Init+0xc6>
 8001bd4:	e122      	b.n	8001e1c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d000      	beq.n	8001bde <HAL_ADC_Init+0xce>
 8001bdc:	e11e      	b.n	8001e1c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a99      	ldr	r2, [pc, #612]	; (8001e48 <HAL_ADC_Init+0x338>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	2202      	movs	r2, #2
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7ff ff56 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d000      	beq.n	8001bfe <HAL_ADC_Init+0xee>
 8001bfc:	e0ad      	b.n	8001d5a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7e1b      	ldrb	r3, [r3, #24]
 8001c06:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c08:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7e5b      	ldrb	r3, [r3, #25]
 8001c0e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c10:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e9b      	ldrb	r3, [r3, #26]
 8001c16:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c18:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_ADC_Init+0x118>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	e000      	b.n	8001c2a <HAL_ADC_Init+0x11a>
 8001c28:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c2a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c30:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da04      	bge.n	8001c44 <HAL_ADC_Init+0x134>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Init+0x138>
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001c48:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	5c5b      	ldrb	r3, [r3, r1]
 8001c50:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c52:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d115      	bne.n	8001c90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e9b      	ldrb	r3, [r3, #26]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0252      	lsls	r2, r2, #9
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e00b      	b.n	8001c90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9c:	23e0      	movs	r3, #224	; 0xe0
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_ADC_Init+0x33c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	0f9b      	lsrs	r3, r3, #30
 8001cca:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	223c      	movs	r2, #60	; 0x3c
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0f9b      	lsrs	r3, r3, #30
 8001ce8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001cf4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001cfa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	2201      	movs	r2, #1
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_ADC_Init+0x340>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d018      	beq.n	8001d5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	05db      	lsls	r3, r3, #23
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d012      	beq.n	8001d5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d00c      	beq.n	8001d5a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_ADC_Init+0x344>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <HAL_ADC_Init+0x348>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	23f0      	movs	r3, #240	; 0xf0
 8001d50:	039b      	lsls	r3, r3, #14
 8001d52:	401a      	ands	r2, r3
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_ADC_Init+0x344>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	001a      	movs	r2, r3
 8001d64:	2100      	movs	r1, #0
 8001d66:	f7ff fdb2 	bl	80018ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	493a      	ldr	r1, [pc, #232]	; (8001e5c <HAL_ADC_Init+0x34c>)
 8001d74:	001a      	movs	r2, r3
 8001d76:	f7ff fdaa 	bl	80018ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4249      	negs	r1, r1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
 8001d94:	e018      	b.n	8001dc8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	039b      	lsls	r3, r3, #14
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d112      	bne.n	8001dc8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	221c      	movs	r2, #28
 8001db2:	4013      	ands	r3, r2
 8001db4:	2210      	movs	r2, #16
 8001db6:	4252      	negs	r2, r2
 8001db8:	409a      	lsls	r2, r3
 8001dba:	0011      	movs	r1, r2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff fd9a 	bl	8001908 <LL_ADC_GetSamplingTimeCommonChannels>
 8001dd4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d10b      	bne.n	8001df6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	2203      	movs	r2, #3
 8001dea:	4393      	bics	r3, r2
 8001dec:	2201      	movs	r2, #1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001df4:	e01c      	b.n	8001e30 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	2212      	movs	r2, #18
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	2210      	movs	r2, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e12:	231f      	movs	r3, #31
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e1a:	e009      	b.n	8001e30 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	2210      	movs	r2, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e28:	231f      	movs	r3, #31
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e30:	231f      	movs	r3, #31
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b008      	add	sp, #32
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	20000004 	.word	0x20000004
 8001e44:	00030d40 	.word	0x00030d40
 8001e48:	fffffefd 	.word	0xfffffefd
 8001e4c:	fffe0201 	.word	0xfffe0201
 8001e50:	1ffffc02 	.word	0x1ffffc02
 8001e54:	40012708 	.word	0x40012708
 8001e58:	ffc3ffff 	.word	0xffc3ffff
 8001e5c:	07ffff04 	.word	0x07ffff04

08001e60 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fe3d 	bl	8001aec <LL_ADC_REG_IsConversionOngoing>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d15f      	bne.n	8001f36 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2254      	movs	r2, #84	; 0x54
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_Start_IT+0x24>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e05f      	b.n	8001f44 <HAL_ADC_Start_IT+0xe4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2254      	movs	r2, #84	; 0x54
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e8c:	250f      	movs	r5, #15
 8001e8e:	197c      	adds	r4, r7, r5
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 fb70 	bl	8002578 <ADC_Enable>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e9c:	197b      	adds	r3, r7, r5
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d143      	bne.n	8001f2c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <HAL_ADC_Start_IT+0xec>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	0052      	lsls	r2, r2, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	221c      	movs	r2, #28
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2254      	movs	r2, #84	; 0x54
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	211c      	movs	r1, #28
 8001ed8:	438a      	bics	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d108      	bne.n	8001ef6 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2108      	movs	r1, #8
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
          break;
 8001ef4:	e008      	b.n	8001f08 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2104      	movs	r1, #4
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
          break;
 8001f06:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff fdcf 	bl	8001ac8 <LL_ADC_REG_StartConversion>
 8001f2a:	e008      	b.n	8001f3e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2254      	movs	r2, #84	; 0x54
 8001f30:	2100      	movs	r1, #0
 8001f32:	5499      	strb	r1, [r3, r2]
 8001f34:	e003      	b.n	8001f3e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f3e:	230f      	movs	r3, #15
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b004      	add	sp, #16
 8001f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4c:	fffff0fe 	.word	0xfffff0fe

08001f50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b002      	add	sp, #8
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d017      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x54>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	2210      	movs	r2, #16
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d106      	bne.n	8001fac <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fb78 	bl	80026a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x64>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fd2:	d04d      	beq.n	8002070 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d049      	beq.n	8002070 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d106      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff fc9c 	bl	8001936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d02e      	beq.n	8002060 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7e9b      	ldrb	r3, [r3, #26]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d12a      	bne.n	8002060 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2208      	movs	r2, #8
 8002012:	4013      	ands	r3, r2
 8002014:	2b08      	cmp	r3, #8
 8002016:	d123      	bne.n	8002060 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fd65 	bl	8001aec <LL_ADC_REG_IsConversionOngoing>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d110      	bne.n	8002048 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	210c      	movs	r1, #12
 8002032:	438a      	bics	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_ADC_IRQHandler+0x22c>)
 800203c:	4013      	ands	r3, r2
 800203e:	2201      	movs	r2, #1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	; 0x58
 8002046:	e00b      	b.n	8002060 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	2220      	movs	r2, #32
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2201      	movs	r2, #1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f898 	bl	8002198 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	220c      	movs	r2, #12
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	4013      	ands	r3, r2
 8002076:	d012      	beq.n	800209e <HAL_ADC_IRQHandler+0x136>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	4013      	ands	r3, r2
 800207e:	d00e      	beq.n	800209e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0252      	lsls	r2, r2, #9
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f889 	bl	80021a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d014      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x16a>
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0292      	lsls	r2, r2, #10
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fade 	bl	8002684 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0052      	lsls	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	d014      	beq.n	8002106 <HAL_ADC_IRQHandler+0x19e>
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d00f      	beq.n	8002106 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	02d2      	lsls	r2, r2, #11
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 facc 	bl	8002694 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2210      	movs	r2, #16
 800210a:	4013      	ands	r3, r2
 800210c:	d02b      	beq.n	8002166 <HAL_ADC_IRQHandler+0x1fe>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e008      	b.n	8002136 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fc58 	bl	80019de <LL_ADC_REG_GetDMATransfer>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002132:	2301      	movs	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d110      	bne.n	800215e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	00d2      	lsls	r2, r2, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2202      	movs	r2, #2
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f82d 	bl	80021b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2210      	movs	r2, #16
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	019b      	lsls	r3, r3, #6
 800216c:	4013      	ands	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_ADC_IRQHandler+0x224>
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	4013      	ands	r3, r2
 8002178:	d008      	beq.n	800218c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fa99 	bl	80026b4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	0192      	lsls	r2, r2, #6
 800218a:	601a      	str	r2, [r3, #0]
  }
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b006      	add	sp, #24
 8002192:	bd80      	pop	{r7, pc}
 8002194:	fffffefe 	.word	0xfffffefe

08002198 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2317      	movs	r3, #23
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2254      	movs	r2, #84	; 0x54
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x24>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e1c0      	b.n	800256e <HAL_ADC_ConfigChannel+0x3a6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2254      	movs	r2, #84	; 0x54
 80021f0:	2101      	movs	r1, #1
 80021f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff fc77 	bl	8001aec <LL_ADC_REG_IsConversionOngoing>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d000      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x3c>
 8002202:	e1a3      	b.n	800254c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d100      	bne.n	800220e <HAL_ADC_ConfigChannel+0x46>
 800220c:	e143      	b.n	8002496 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	429a      	cmp	r2, r3
 8002218:	d004      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800221e:	4ac1      	ldr	r2, [pc, #772]	; (8002524 <HAL_ADC_ConfigChannel+0x35c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0019      	movs	r1, r3
 800222e:	0010      	movs	r0, r2
 8002230:	f7ff fbb2 	bl	8001998 <LL_ADC_REG_SetSequencerChAdd>
 8002234:	e0c9      	b.n	80023ca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	211f      	movs	r1, #31
 8002240:	400b      	ands	r3, r1
 8002242:	210f      	movs	r1, #15
 8002244:	4099      	lsls	r1, r3
 8002246:	000b      	movs	r3, r1
 8002248:	43db      	mvns	r3, r3
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	035b      	lsls	r3, r3, #13
 8002254:	0b5b      	lsrs	r3, r3, #13
 8002256:	d105      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x9c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	221f      	movs	r2, #31
 8002260:	4013      	ands	r3, r2
 8002262:	e098      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d000      	beq.n	8002270 <HAL_ADC_ConfigChannel+0xa8>
 800226e:	e091      	b.n	8002394 <HAL_ADC_ConfigChannel+0x1cc>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d000      	beq.n	800227c <HAL_ADC_ConfigChannel+0xb4>
 800227a:	e089      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1c8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2204      	movs	r2, #4
 8002282:	4013      	ands	r3, r2
 8002284:	d000      	beq.n	8002288 <HAL_ADC_ConfigChannel+0xc0>
 8002286:	e081      	b.n	800238c <HAL_ADC_ConfigChannel+0x1c4>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2208      	movs	r2, #8
 800228e:	4013      	ands	r3, r2
 8002290:	d000      	beq.n	8002294 <HAL_ADC_ConfigChannel+0xcc>
 8002292:	e079      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1c0>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	4013      	ands	r3, r2
 800229c:	d000      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0xd8>
 800229e:	e071      	b.n	8002384 <HAL_ADC_ConfigChannel+0x1bc>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2220      	movs	r2, #32
 80022a6:	4013      	ands	r3, r2
 80022a8:	d000      	beq.n	80022ac <HAL_ADC_ConfigChannel+0xe4>
 80022aa:	e069      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1b8>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	4013      	ands	r3, r2
 80022b4:	d000      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0xf0>
 80022b6:	e061      	b.n	800237c <HAL_ADC_ConfigChannel+0x1b4>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	4013      	ands	r3, r2
 80022c0:	d000      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0xfc>
 80022c2:	e059      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1b0>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d151      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1ac>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4013      	ands	r3, r2
 80022da:	d149      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1a8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	d141      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1a4>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4013      	ands	r3, r2
 80022f2:	d139      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1a0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	015b      	lsls	r3, r3, #5
 80022fc:	4013      	ands	r3, r2
 80022fe:	d131      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x19c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	019b      	lsls	r3, r3, #6
 8002308:	4013      	ands	r3, r2
 800230a:	d129      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x198>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4013      	ands	r3, r2
 8002316:	d121      	bne.n	800235c <HAL_ADC_ConfigChannel+0x194>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	4013      	ands	r3, r2
 8002322:	d119      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x190>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	025b      	lsls	r3, r3, #9
 800232c:	4013      	ands	r3, r2
 800232e:	d111      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x18c>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d109      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x188>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	02db      	lsls	r3, r3, #11
 8002344:	4013      	ands	r3, r2
 8002346:	d001      	beq.n	800234c <HAL_ADC_ConfigChannel+0x184>
 8002348:	2312      	movs	r3, #18
 800234a:	e024      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 800234c:	2300      	movs	r3, #0
 800234e:	e022      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002350:	2311      	movs	r3, #17
 8002352:	e020      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002354:	2310      	movs	r3, #16
 8002356:	e01e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002358:	230f      	movs	r3, #15
 800235a:	e01c      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 800235c:	230e      	movs	r3, #14
 800235e:	e01a      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002360:	230d      	movs	r3, #13
 8002362:	e018      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002364:	230c      	movs	r3, #12
 8002366:	e016      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002368:	230b      	movs	r3, #11
 800236a:	e014      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 800236c:	230a      	movs	r3, #10
 800236e:	e012      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002370:	2309      	movs	r3, #9
 8002372:	e010      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002374:	2308      	movs	r3, #8
 8002376:	e00e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002378:	2307      	movs	r3, #7
 800237a:	e00c      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 800237c:	2306      	movs	r3, #6
 800237e:	e00a      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002380:	2305      	movs	r3, #5
 8002382:	e008      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002384:	2304      	movs	r3, #4
 8002386:	e006      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002388:	2303      	movs	r3, #3
 800238a:	e004      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1ce>
 8002394:	2300      	movs	r3, #0
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	201f      	movs	r0, #31
 800239c:	4002      	ands	r2, r0
 800239e:	4093      	lsls	r3, r2
 80023a0:	000a      	movs	r2, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d808      	bhi.n	80023ca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	f7ff fac7 	bl	8001958 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	001a      	movs	r2, r3
 80023d8:	f7ff fb0e 	bl	80019f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db00      	blt.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
 80023e4:	e0bc      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e6:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff fa63 	bl	80018b4 <LL_ADC_GetCommonPathInternalCh>
 80023ee:	0003      	movs	r3, r0
 80023f0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a4d      	ldr	r2, [pc, #308]	; (800252c <HAL_ADC_ConfigChannel+0x364>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d122      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002404:	d11d      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	0412      	lsls	r2, r2, #16
 800240c:	4313      	orrs	r3, r2
 800240e:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 8002410:	0019      	movs	r1, r3
 8002412:	0010      	movs	r0, r2
 8002414:	f7ff fa3a 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_ADC_ConfigChannel+0x368>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4945      	ldr	r1, [pc, #276]	; (8002534 <HAL_ADC_ConfigChannel+0x36c>)
 800241e:	0018      	movs	r0, r3
 8002420:	f7fd fe6e 	bl	8000100 <__udivsi3>
 8002424:	0003      	movs	r3, r0
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	0013      	movs	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	189b      	adds	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002432:	e002      	b.n	800243a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3b01      	subs	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002440:	e08e      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <HAL_ADC_ConfigChannel+0x370>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10e      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2a2>
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	045b      	lsls	r3, r3, #17
 8002452:	4013      	ands	r3, r2
 8002454:	d109      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	0452      	lsls	r2, r2, #17
 800245c:	4313      	orrs	r3, r2
 800245e:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 8002460:	0019      	movs	r1, r3
 8002462:	0010      	movs	r0, r2
 8002464:	f7ff fa12 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
 8002468:	e07a      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a33      	ldr	r2, [pc, #204]	; (800253c <HAL_ADC_ConfigChannel+0x374>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d000      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x2ae>
 8002474:	e074      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	03db      	lsls	r3, r3, #15
 800247c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800247e:	d000      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x2ba>
 8002480:	e06e      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	03d2      	lsls	r2, r2, #15
 8002488:	4313      	orrs	r3, r2
 800248a:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 800248c:	0019      	movs	r1, r3
 800248e:	0010      	movs	r0, r2
 8002490:	f7ff f9fc 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
 8002494:	e064      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	429a      	cmp	r2, r3
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_ADC_ConfigChannel+0x35c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d107      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0019      	movs	r1, r3
 80024b6:	0010      	movs	r0, r2
 80024b8:	f7ff fa7f 	bl	80019ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da4d      	bge.n	8002560 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff f9f4 	bl	80018b4 <LL_ADC_GetCommonPathInternalCh>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_ADC_ConfigChannel+0x364>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_ADC_ConfigChannel+0x378>)
 80024de:	4013      	ands	r3, r2
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 80024e2:	0019      	movs	r1, r3
 80024e4:	0010      	movs	r0, r2
 80024e6:	f7ff f9d1 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
 80024ea:	e039      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_ADC_ConfigChannel+0x370>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_ADC_ConfigChannel+0x37c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 80024fe:	0019      	movs	r1, r3
 8002500:	0010      	movs	r0, r2
 8002502:	f7ff f9c3 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
 8002506:	e02b      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_ADC_ConfigChannel+0x374>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d126      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_ADC_ConfigChannel+0x380>)
 8002516:	4013      	ands	r3, r2
 8002518:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_ADC_ConfigChannel+0x360>)
 800251a:	0019      	movs	r1, r3
 800251c:	0010      	movs	r0, r2
 800251e:	f7ff f9b5 	bl	800188c <LL_ADC_SetCommonPathInternalCh>
 8002522:	e01d      	b.n	8002560 <HAL_ADC_ConfigChannel+0x398>
 8002524:	80000004 	.word	0x80000004
 8002528:	40012708 	.word	0x40012708
 800252c:	b0001000 	.word	0xb0001000
 8002530:	20000004 	.word	0x20000004
 8002534:	00030d40 	.word	0x00030d40
 8002538:	b8004000 	.word	0xb8004000
 800253c:	b4002000 	.word	0xb4002000
 8002540:	ff7fffff 	.word	0xff7fffff
 8002544:	feffffff 	.word	0xfeffffff
 8002548:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	2220      	movs	r2, #32
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2254      	movs	r2, #84	; 0x54
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002568:	2317      	movs	r3, #23
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b006      	add	sp, #24
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)

08002578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff fa8b 	bl	8001aa4 <LL_ADC_IsEnabled>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d000      	beq.n	8002594 <ADC_Enable+0x1c>
 8002592:	e069      	b.n	8002668 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a36      	ldr	r2, [pc, #216]	; (8002674 <ADC_Enable+0xfc>)
 800259c:	4013      	ands	r3, r2
 800259e:	d00d      	beq.n	80025bc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	2210      	movs	r2, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	2201      	movs	r2, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e056      	b.n	800266a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff fa5d 	bl	8001a80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <ADC_Enable+0x100>)
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff f973 	bl	80018b4 <LL_ADC_GetCommonPathInternalCh>
 80025ce:	0002      	movs	r2, r0
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	4013      	ands	r3, r2
 80025d6:	d00f      	beq.n	80025f8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <ADC_Enable+0x104>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4928      	ldr	r1, [pc, #160]	; (8002680 <ADC_Enable+0x108>)
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fd fd8e 	bl	8000100 <__udivsi3>
 80025e4:	0003      	movs	r3, r0
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025ea:	e002      	b.n	80025f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e5b      	ldrb	r3, [r3, #25]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d033      	beq.n	8002668 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002600:	f7ff f900 	bl	8001804 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002608:	e027      	b.n	800265a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff fa48 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d104      	bne.n	8002622 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff fa2f 	bl	8001a80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002622:	f7ff f8ef 	bl	8001804 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d914      	bls.n	800265a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	2b01      	cmp	r3, #1
 800263c:	d00d      	beq.n	800265a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	2210      	movs	r2, #16
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2201      	movs	r2, #1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e007      	b.n	800266a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	2b01      	cmp	r3, #1
 8002666:	d1d0      	bne.n	800260a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	80000017 	.word	0x80000017
 8002678:	40012708 	.word	0x40012708
 800267c:	20000004 	.word	0x20000004
 8002680:	00030d40 	.word	0x00030d40

08002684 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b7f      	cmp	r3, #127	; 0x7f
 80026d6:	d809      	bhi.n	80026ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	001a      	movs	r2, r3
 80026de:	231f      	movs	r3, #31
 80026e0:	401a      	ands	r2, r3
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__NVIC_EnableIRQ+0x30>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	4091      	lsls	r1, r2
 80026e8:	000a      	movs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	e000e100 	.word	0xe000e100

080026f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	0002      	movs	r2, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b7f      	cmp	r3, #127	; 0x7f
 800270c:	d828      	bhi.n	8002760 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270e:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <__NVIC_SetPriority+0xd4>)
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b25b      	sxtb	r3, r3
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	33c0      	adds	r3, #192	; 0xc0
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	589b      	ldr	r3, [r3, r2]
 800271e:	1dfa      	adds	r2, r7, #7
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	0011      	movs	r1, r2
 8002724:	2203      	movs	r2, #3
 8002726:	400a      	ands	r2, r1
 8002728:	00d2      	lsls	r2, r2, #3
 800272a:	21ff      	movs	r1, #255	; 0xff
 800272c:	4091      	lsls	r1, r2
 800272e:	000a      	movs	r2, r1
 8002730:	43d2      	mvns	r2, r2
 8002732:	401a      	ands	r2, r3
 8002734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	22ff      	movs	r2, #255	; 0xff
 800273c:	401a      	ands	r2, r3
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	0018      	movs	r0, r3
 8002744:	2303      	movs	r3, #3
 8002746:	4003      	ands	r3, r0
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800274c:	481f      	ldr	r0, [pc, #124]	; (80027cc <__NVIC_SetPriority+0xd4>)
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b25b      	sxtb	r3, r3
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	430a      	orrs	r2, r1
 8002758:	33c0      	adds	r3, #192	; 0xc0
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800275e:	e031      	b.n	80027c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <__NVIC_SetPriority+0xd8>)
 8002762:	1dfb      	adds	r3, r7, #7
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	0019      	movs	r1, r3
 8002768:	230f      	movs	r3, #15
 800276a:	400b      	ands	r3, r1
 800276c:	3b08      	subs	r3, #8
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3306      	adds	r3, #6
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	3304      	adds	r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1dfa      	adds	r2, r7, #7
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	0011      	movs	r1, r2
 8002780:	2203      	movs	r2, #3
 8002782:	400a      	ands	r2, r1
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	21ff      	movs	r1, #255	; 0xff
 8002788:	4091      	lsls	r1, r2
 800278a:	000a      	movs	r2, r1
 800278c:	43d2      	mvns	r2, r2
 800278e:	401a      	ands	r2, r3
 8002790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	019b      	lsls	r3, r3, #6
 8002796:	22ff      	movs	r2, #255	; 0xff
 8002798:	401a      	ands	r2, r3
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	0018      	movs	r0, r3
 80027a0:	2303      	movs	r3, #3
 80027a2:	4003      	ands	r3, r0
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027a8:	4809      	ldr	r0, [pc, #36]	; (80027d0 <__NVIC_SetPriority+0xd8>)
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	001c      	movs	r4, r3
 80027b0:	230f      	movs	r3, #15
 80027b2:	4023      	ands	r3, r4
 80027b4:	3b08      	subs	r3, #8
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	430a      	orrs	r2, r1
 80027ba:	3306      	adds	r3, #6
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	18c3      	adds	r3, r0, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	601a      	str	r2, [r3, #0]
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b003      	add	sp, #12
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	1e5a      	subs	r2, r3, #1
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	045b      	lsls	r3, r3, #17
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d301      	bcc.n	80027ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e8:	2301      	movs	r3, #1
 80027ea:	e010      	b.n	800280e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <SysTick_Config+0x44>)
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	3a01      	subs	r2, #1
 80027f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f4:	2301      	movs	r3, #1
 80027f6:	425b      	negs	r3, r3
 80027f8:	2103      	movs	r1, #3
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7ff ff7c 	bl	80026f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x44>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x44>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b002      	add	sp, #8
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	210f      	movs	r1, #15
 8002828:	187b      	adds	r3, r7, r1
 800282a:	1c02      	adds	r2, r0, #0
 800282c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	187b      	adds	r3, r7, r1
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b25b      	sxtb	r3, r3
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff ff5d 	bl	80026f8 <__NVIC_SetPriority>
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	0002      	movs	r2, r0
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b25b      	sxtb	r3, r3
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ff33 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff ffaf 	bl	80027d4 <SysTick_Config>
 8002876:	0003      	movs	r3, r0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002884:	f000 f803 	bl	800288e <HAL_SYSTICK_Callback>
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e147      	b.n	8002b38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4091      	lsls	r1, r2
 80028b2:	000a      	movs	r2, r1
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d100      	bne.n	80028c0 <HAL_GPIO_Init+0x28>
 80028be:	e138      	b.n	8002b32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d005      	beq.n	80028d8 <HAL_GPIO_Init+0x40>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2203      	movs	r2, #3
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d130      	bne.n	800293a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	409a      	lsls	r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	43da      	mvns	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	0013      	movs	r3, r2
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290e:	2201      	movs	r2, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
 8002914:	0013      	movs	r3, r2
 8002916:	43da      	mvns	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	2201      	movs	r2, #1
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	2b03      	cmp	r3, #3
 8002944:	d017      	beq.n	8002976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	0013      	movs	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	4013      	ands	r3, r2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d123      	bne.n	80029ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	58d3      	ldr	r3, [r2, r3]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2107      	movs	r1, #7
 80029ae:	400b      	ands	r3, r1
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	409a      	lsls	r2, r3
 80029b4:	0013      	movs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	6939      	ldr	r1, [r7, #16]
 80029c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	43da      	mvns	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2203      	movs	r2, #3
 80029e8:	401a      	ands	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	23c0      	movs	r3, #192	; 0xc0
 8002a04:	029b      	lsls	r3, r3, #10
 8002a06:	4013      	ands	r3, r2
 8002a08:	d100      	bne.n	8002a0c <HAL_GPIO_Init+0x174>
 8002a0a:	e092      	b.n	8002b32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a0c:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3318      	adds	r3, #24
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	589b      	ldr	r3, [r3, r2]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	220f      	movs	r2, #15
 8002a24:	409a      	lsls	r2, r3
 8002a26:	0013      	movs	r3, r2
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	23a0      	movs	r3, #160	; 0xa0
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x1ca>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a45      	ldr	r2, [pc, #276]	; (8002b54 <HAL_GPIO_Init+0x2bc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x1c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a44      	ldr	r2, [pc, #272]	; (8002b58 <HAL_GPIO_Init+0x2c0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x1c2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a43      	ldr	r2, [pc, #268]	; (8002b5c <HAL_GPIO_Init+0x2c4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x1be>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x1cc>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x1cc>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x1cc>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x1cc>
 8002a62:	2300      	movs	r3, #0
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	2103      	movs	r1, #3
 8002a68:	400a      	ands	r2, r1
 8002a6a:	00d2      	lsls	r2, r2, #3
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a74:	4936      	ldr	r1, [pc, #216]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	035b      	lsls	r3, r3, #13
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	039b      	lsls	r3, r3, #14
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002ad8:	2384      	movs	r3, #132	; 0x84
 8002ada:	58d3      	ldr	r3, [r2, r3]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002afc:	4914      	ldr	r1, [pc, #80]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002afe:	2284      	movs	r2, #132	; 0x84
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	58d3      	ldr	r3, [r2, r3]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	025b      	lsls	r3, r3, #9
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b2a:	4909      	ldr	r1, [pc, #36]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	40da      	lsrs	r2, r3
 8002b40:	1e13      	subs	r3, r2, #0
 8002b42:	d000      	beq.n	8002b46 <HAL_GPIO_Init+0x2ae>
 8002b44:	e6b0      	b.n	80028a8 <HAL_GPIO_Init+0x10>
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021800 	.word	0x40021800
 8002b54:	50000400 	.word	0x50000400
 8002b58:	50000800 	.word	0x50000800
 8002b5c:	50000c00 	.word	0x50000c00

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	0008      	movs	r0, r1
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	1cbb      	adds	r3, r7, #2
 8002b6e:	1c02      	adds	r2, r0, #0
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	1c7b      	adds	r3, r7, #1
 8002b74:	1c0a      	adds	r2, r1, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	1c7b      	adds	r3, r7, #1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b80:	1cbb      	adds	r3, r7, #2
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8a:	1cbb      	adds	r3, r7, #2
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11f      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	189b      	adds	r3, r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd fa96 	bl	8000100 <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	e008      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e001      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e009      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0ed      	beq.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	fffff9ff 	.word	0xfffff9ff
 8002c14:	20000004 	.word	0x20000004
 8002c18:	000f4240 	.word	0x000f4240

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e2f3      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d100      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1e>
 8002c38:	e07c      	b.n	8002d34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2238      	movs	r2, #56	; 0x38
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c44:	4bc0      	ldr	r3, [pc, #768]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3e>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	4bb9      	ldr	r3, [pc, #740]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d062      	beq.n	8002d32 <HAL_RCC_OscConfig+0x116>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d15e      	bne.n	8002d32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e2ce      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x78>
 8002c84:	4bb0      	ldr	r3, [pc, #704]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4baf      	ldr	r3, [pc, #700]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0249      	lsls	r1, r1, #9
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e020      	b.n	8002cd6 <HAL_RCC_OscConfig+0xba>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	23a0      	movs	r3, #160	; 0xa0
 8002c9a:	02db      	lsls	r3, r3, #11
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d10e      	bne.n	8002cbe <HAL_RCC_OscConfig+0xa2>
 8002ca0:	4ba9      	ldr	r3, [pc, #676]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4ba8      	ldr	r3, [pc, #672]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	02c9      	lsls	r1, r1, #11
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4ba6      	ldr	r3, [pc, #664]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4ba5      	ldr	r3, [pc, #660]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0249      	lsls	r1, r1, #9
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0xba>
 8002cbe:	4ba2      	ldr	r3, [pc, #648]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4ba1      	ldr	r3, [pc, #644]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	49a1      	ldr	r1, [pc, #644]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4b9f      	ldr	r3, [pc, #636]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b9e      	ldr	r3, [pc, #632]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	499f      	ldr	r1, [pc, #636]	; (8002f50 <HAL_RCC_OscConfig+0x334>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d014      	beq.n	8002d08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fd91 	bl	8001804 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fd8c 	bl	8001804 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e28d      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	029b      	lsls	r3, r3, #10
 8002d02:	4013      	ands	r3, r2
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xcc>
 8002d06:	e015      	b.n	8002d34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fd7c 	bl	8001804 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d12:	f7fe fd77 	bl	8001804 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e278      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0xf6>
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCC_OscConfig+0x124>
 8002d3e:	e099      	b.n	8002e74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2238      	movs	r2, #56	; 0x38
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4013      	ands	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0x144>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d002      	beq.n	8002d66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d135      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d66:	4b78      	ldr	r3, [pc, #480]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x162>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e24b      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a74      	ldr	r2, [pc, #464]	; (8002f54 <HAL_RCC_OscConfig+0x338>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	021a      	lsls	r2, r3, #8
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d112      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d9a:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x33c>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dae:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0adb      	lsrs	r3, r3, #11
 8002db4:	2207      	movs	r2, #7
 8002db6:	4013      	ands	r3, r2
 8002db8:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x340>)
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x344>)
 8002dbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x348>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fe fcc1 	bl	800174c <HAL_InitTick>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d051      	beq.n	8002e72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e221      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d030      	beq.n	8002e3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5e      	ldr	r2, [pc, #376]	; (8002f58 <HAL_RCC_OscConfig+0x33c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0049      	lsls	r1, r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fd02 	bl	8001804 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fcfd 	bl	8001804 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1fe      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4013      	ands	r3, r2
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_RCC_OscConfig+0x338>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	e01b      	b.n	8002e74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	4949      	ldr	r1, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x34c>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fcdc 	bl	8001804 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fcd7 	bl	8001804 <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1d8      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e64:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x236>
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d047      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2238      	movs	r2, #56	; 0x38
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b18      	cmp	r3, #24
 8002e88:	d10a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	2202      	movs	r2, #2
 8002e90:	4013      	ands	r3, r2
 8002e92:	d03c      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d138      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e1ba      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d019      	beq.n	8002edc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002eaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fca6 	bl	8001804 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fca1 	bl	8001804 <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1a2      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d0f1      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2a2>
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fc8c 	bl	8001804 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fc87 	bl	8001804 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e188      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x2fe>
 8002f18:	e0c6      	b.n	80030a8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	231f      	movs	r3, #31
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2238      	movs	r2, #56	; 0x38
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d11e      	bne.n	8002f6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x32c>)
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x31e>
 8002f38:	e0b6      	b.n	80030a8 <HAL_RCC_OscConfig+0x48c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d000      	beq.n	8002f44 <HAL_RCC_OscConfig+0x328>
 8002f42:	e0b1      	b.n	80030a8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e166      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	fffeffff 	.word	0xfffeffff
 8002f50:	fffbffff 	.word	0xfffbffff
 8002f54:	ffff80ff 	.word	0xffff80ff
 8002f58:	ffffc7ff 	.word	0xffffc7ff
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	20000004 	.word	0x20000004
 8002f64:	20000008 	.word	0x20000008
 8002f68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6c:	4bac      	ldr	r3, [pc, #688]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	055b      	lsls	r3, r3, #21
 8002f74:	4013      	ands	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x360>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x362>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d011      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4ba7      	ldr	r3, [pc, #668]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f86:	4ba6      	ldr	r3, [pc, #664]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	0549      	lsls	r1, r1, #21
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f90:	4ba3      	ldr	r3, [pc, #652]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f9e:	231f      	movs	r3, #31
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4b9f      	ldr	r3, [pc, #636]	; (8003224 <HAL_RCC_OscConfig+0x608>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d11a      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb2:	4b9c      	ldr	r3, [pc, #624]	; (8003224 <HAL_RCC_OscConfig+0x608>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b9b      	ldr	r3, [pc, #620]	; (8003224 <HAL_RCC_OscConfig+0x608>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0049      	lsls	r1, r1, #1
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fc20 	bl	8001804 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe fc1b 	bl	8001804 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e11c      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b91      	ldr	r3, [pc, #580]	; (8003224 <HAL_RCC_OscConfig+0x608>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3e2>
 8002ff0:	4b8b      	ldr	r3, [pc, #556]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff4:	4b8a      	ldr	r3, [pc, #552]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ffc:	e01c      	b.n	8003038 <HAL_RCC_OscConfig+0x41c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x404>
 8003006:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300a:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800300c:	2104      	movs	r1, #4
 800300e:	430a      	orrs	r2, r1
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c
 8003012:	4b83      	ldr	r3, [pc, #524]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003018:	2101      	movs	r1, #1
 800301a:	430a      	orrs	r2, r1
 800301c:	65da      	str	r2, [r3, #92]	; 0x5c
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0x41c>
 8003020:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003024:	4b7e      	ldr	r3, [pc, #504]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003026:	2101      	movs	r1, #1
 8003028:	438a      	bics	r2, r1
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
 800302c:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800302e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003032:	2104      	movs	r1, #4
 8003034:	438a      	bics	r2, r1
 8003036:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d014      	beq.n	800306a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fbe0 	bl	8001804 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003048:	e009      	b.n	800305e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fbdb 	bl	8001804 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4a74      	ldr	r2, [pc, #464]	; (8003228 <HAL_RCC_OscConfig+0x60c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0db      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	2202      	movs	r2, #2
 8003064:	4013      	ands	r3, r2
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x42e>
 8003068:	e013      	b.n	8003092 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe fbcb 	bl	8001804 <HAL_GetTick>
 800306e:	0003      	movs	r3, r0
 8003070:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003072:	e009      	b.n	8003088 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe fbc6 	bl	8001804 <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_RCC_OscConfig+0x60c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0c6      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003088:	4b65      	ldr	r3, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2202      	movs	r2, #2
 800308e:	4013      	ands	r3, r2
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003092:	231f      	movs	r3, #31
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b60      	ldr	r3, [pc, #384]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800309e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a0:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030a2:	4962      	ldr	r1, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x610>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <HAL_RCC_OscConfig+0x496>
 80030b0:	e0b0      	b.n	8003214 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b2:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2238      	movs	r2, #56	; 0x38
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d100      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4a4>
 80030be:	e078      	b.n	80031b2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d153      	bne.n	8003170 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b54      	ldr	r3, [pc, #336]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030ce:	4958      	ldr	r1, [pc, #352]	; (8003230 <HAL_RCC_OscConfig+0x614>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fb96 	bl	8001804 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fb91 	bl	8001804 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e092      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b4b      	ldr	r3, [pc, #300]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	049b      	lsls	r3, r3, #18
 80030f8:	4013      	ands	r3, r2
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fc:	4b48      	ldr	r3, [pc, #288]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_RCC_OscConfig+0x618>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	431a      	orrs	r2, r3
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003126:	430a      	orrs	r2, r1
 8003128:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b3c      	ldr	r3, [pc, #240]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	0449      	lsls	r1, r1, #17
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0549      	lsls	r1, r1, #21
 8003142:	430a      	orrs	r2, r1
 8003144:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fb5d 	bl	8001804 <HAL_GetTick>
 800314a:	0003      	movs	r3, r0
 800314c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe fb58 	bl	8001804 <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e059      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	049b      	lsls	r3, r3, #18
 800316a:	4013      	ands	r3, r2
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x534>
 800316e:	e051      	b.n	8003214 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 8003176:	492e      	ldr	r1, [pc, #184]	; (8003230 <HAL_RCC_OscConfig+0x614>)
 8003178:	400a      	ands	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fb42 	bl	8001804 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe fb3d 	bl	8001804 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03e      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	049b      	lsls	r3, r3, #18
 80031a0:	4013      	ands	r3, r2
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80031aa:	4923      	ldr	r1, [pc, #140]	; (8003238 <HAL_RCC_OscConfig+0x61c>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e030      	b.n	8003214 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e02b      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_OscConfig+0x604>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2203      	movs	r2, #3
 80031c8:	401a      	ands	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11e      	bne.n	8003210 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2270      	movs	r2, #112	; 0x70
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d117      	bne.n	8003210 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	23fe      	movs	r3, #254	; 0xfe
 80031e4:	01db      	lsls	r3, r3, #7
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d10e      	bne.n	8003210 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	23f8      	movs	r3, #248	; 0xf8
 80031f6:	039b      	lsls	r3, r3, #14
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	0f5b      	lsrs	r3, r3, #29
 8003206:	075a      	lsls	r2, r3, #29
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b008      	add	sp, #32
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
 8003228:	00001388 	.word	0x00001388
 800322c:	efffffff 	.word	0xefffffff
 8003230:	feffffff 	.word	0xfeffffff
 8003234:	1fc1808c 	.word	0x1fc1808c
 8003238:	effefffc 	.word	0xeffefffc

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0e9      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2207      	movs	r2, #7
 8003256:	4013      	ands	r3, r2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d91e      	bls.n	800329c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2207      	movs	r2, #7
 8003264:	4393      	bics	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	4b70      	ldr	r3, [pc, #448]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003270:	f7fe fac8 	bl	8001804 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003278:	e009      	b.n	800328e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327a:	f7fe fac3 	bl	8001804 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a6a      	ldr	r2, [pc, #424]	; (8003430 <HAL_RCC_ClockConfig+0x1f4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0ca      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2207      	movs	r2, #7
 8003294:	4013      	ands	r3, r2
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d015      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	d006      	beq.n	80032be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032b0:	4b60      	ldr	r3, [pc, #384]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032b6:	21e0      	movs	r1, #224	; 0xe0
 80032b8:	01c9      	lsls	r1, r1, #7
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032be:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <HAL_RCC_ClockConfig+0x1fc>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d057      	beq.n	800338c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	029b      	lsls	r3, r3, #10
 80032ec:	4013      	ands	r3, r2
 80032ee:	d12b      	bne.n	8003348 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e097      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d107      	bne.n	800330c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fc:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	049b      	lsls	r3, r3, #18
 8003304:	4013      	ands	r3, r2
 8003306:	d11f      	bne.n	8003348 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e08b      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003314:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4013      	ands	r3, r2
 800331e:	d113      	bne.n	8003348 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e07f      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d106      	bne.n	800333a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d108      	bne.n	8003348 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e074      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2202      	movs	r2, #2
 8003340:	4013      	ands	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e06d      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003348:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2207      	movs	r2, #7
 800334e:	4393      	bics	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fe fa52 	bl	8001804 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003364:	e009      	b.n	800337a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003366:	f7fe fa4d 	bl	8001804 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <HAL_RCC_ClockConfig+0x1f4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e054      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2238      	movs	r2, #56	; 0x38
 8003380:	401a      	ands	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	429a      	cmp	r2, r3
 800338a:	d1ec      	bne.n	8003366 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800338c:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2207      	movs	r2, #7
 8003392:	4013      	ands	r3, r2
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d21e      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2207      	movs	r2, #7
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033ac:	f7fe fa2a 	bl	8001804 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fe fa25 	bl	8001804 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_RCC_ClockConfig+0x1f4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e02c      	b.n	8003424 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2207      	movs	r2, #7
 80033d0:	4013      	ands	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2204      	movs	r2, #4
 80033de:	4013      	ands	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_RCC_ClockConfig+0x200>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80033f6:	f000 f829 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033fa:	0001      	movs	r1, r0
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	220f      	movs	r2, #15
 8003404:	401a      	ands	r2, r3
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x204>)
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	58d3      	ldr	r3, [r2, r3]
 800340c:	221f      	movs	r2, #31
 800340e:	4013      	ands	r3, r2
 8003410:	000a      	movs	r2, r1
 8003412:	40da      	lsrs	r2, r3
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x208>)
 8003416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x20c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0018      	movs	r0, r3
 800341e:	f7fe f995 	bl	800174c <HAL_InitTick>
 8003422:	0003      	movs	r3, r0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40022000 	.word	0x40022000
 8003430:	00001388 	.word	0x00001388
 8003434:	40021000 	.word	0x40021000
 8003438:	fffff0ff 	.word	0xfffff0ff
 800343c:	ffff8fff 	.word	0xffff8fff
 8003440:	08004260 	.word	0x08004260
 8003444:	20000004 	.word	0x20000004
 8003448:	20000008 	.word	0x20000008

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2238      	movs	r2, #56	; 0x38
 8003458:	4013      	ands	r3, r2
 800345a:	d10f      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0adb      	lsrs	r3, r3, #11
 8003462:	2207      	movs	r2, #7
 8003464:	4013      	ands	r3, r2
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	4835      	ldr	r0, [pc, #212]	; (8003548 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003472:	f7fc fe45 	bl	8000100 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e05d      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2238      	movs	r2, #56	; 0x38
 8003482:	4013      	ands	r3, r2
 8003484:	2b08      	cmp	r3, #8
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_RCC_GetSysClockFreq+0x100>)
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e054      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2238      	movs	r2, #56	; 0x38
 8003494:	4013      	ands	r3, r2
 8003496:	2b10      	cmp	r3, #16
 8003498:	d138      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2203      	movs	r2, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	2207      	movs	r2, #7
 80034ac:	4013      	ands	r3, r2
 80034ae:	3301      	adds	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	4824      	ldr	r0, [pc, #144]	; (800354c <HAL_RCC_GetSysClockFreq+0x100>)
 80034bc:	f7fc fe20 	bl	8000100 <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	0019      	movs	r1, r3
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	227f      	movs	r2, #127	; 0x7f
 80034cc:	4013      	ands	r3, r2
 80034ce:	434b      	muls	r3, r1
 80034d0:	617b      	str	r3, [r7, #20]
        break;
 80034d2:	e00d      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	481c      	ldr	r0, [pc, #112]	; (8003548 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034d8:	f7fc fe12 	bl	8000100 <__udivsi3>
 80034dc:	0003      	movs	r3, r0
 80034de:	0019      	movs	r1, r3
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	227f      	movs	r2, #127	; 0x7f
 80034e8:	4013      	ands	r3, r2
 80034ea:	434b      	muls	r3, r1
 80034ec:	617b      	str	r3, [r7, #20]
        break;
 80034ee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0f5b      	lsrs	r3, r3, #29
 80034f6:	2207      	movs	r2, #7
 80034f8:	4013      	ands	r3, r2
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6978      	ldr	r0, [r7, #20]
 8003502:	f7fc fdfd 	bl	8000100 <__udivsi3>
 8003506:	0003      	movs	r3, r0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e015      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2238      	movs	r2, #56	; 0x38
 8003512:	4013      	ands	r3, r2
 8003514:	2b20      	cmp	r3, #32
 8003516:	d103      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2238      	movs	r2, #56	; 0x38
 8003526:	4013      	ands	r3, r2
 8003528:	2b18      	cmp	r3, #24
 800352a:	d103      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800352c:	23fa      	movs	r3, #250	; 0xfa
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e001      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003538:	693b      	ldr	r3, [r7, #16]
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b006      	add	sp, #24
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	40021000 	.word	0x40021000
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003558:	2313      	movs	r3, #19
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2312      	movs	r3, #18
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	4013      	ands	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003574:	e0a3      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2011      	movs	r0, #17
 8003578:	183b      	adds	r3, r7, r0
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	055b      	lsls	r3, r3, #21
 8003586:	4013      	ands	r3, r2
 8003588:	d110      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b83      	ldr	r3, [pc, #524]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	4b82      	ldr	r3, [pc, #520]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0549      	lsls	r1, r1, #21
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
 8003598:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ac:	4b7b      	ldr	r3, [pc, #492]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0049      	lsls	r1, r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ba:	f7fe f923 	bl	8001804 <HAL_GetTick>
 80035be:	0003      	movs	r3, r0
 80035c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c2:	e00b      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe f91e 	bl	8001804 <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d904      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80035d2:	2313      	movs	r3, #19
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2203      	movs	r2, #3
 80035d8:	701a      	strb	r2, [r3, #0]
        break;
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	d0ed      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80035e8:	2313      	movs	r3, #19
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d154      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035f2:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4013      	ands	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d019      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	d014      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360e:	4b62      	ldr	r3, [pc, #392]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003614:	4013      	ands	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800361a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800361c:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	0249      	lsls	r1, r1, #9
 8003622:	430a      	orrs	r2, r1
 8003624:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800362c:	495d      	ldr	r1, [pc, #372]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800362e:	400a      	ands	r2, r1
 8003630:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d016      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f8e0 	bl	8001804 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003648:	e00c      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe f8db 	bl	8001804 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	4a54      	ldr	r2, [pc, #336]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d904      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800365a:	2313      	movs	r3, #19
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2203      	movs	r2, #3
 8003660:	701a      	strb	r2, [r3, #0]
            break;
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003664:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	2202      	movs	r2, #2
 800366a:	4013      	ands	r3, r2
 800366c:	d0ed      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800366e:	2313      	movs	r3, #19
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	4a48      	ldr	r2, [pc, #288]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800367e:	4013      	ands	r3, r2
 8003680:	0019      	movs	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003688:	430a      	orrs	r2, r1
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
 800368c:	e00c      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800368e:	2312      	movs	r3, #18
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2213      	movs	r2, #19
 8003694:	18ba      	adds	r2, r7, r2
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e005      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	2312      	movs	r3, #18
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2213      	movs	r2, #19
 80036a2:	18ba      	adds	r2, r7, r2
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a8:	2311      	movs	r3, #17
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036b8:	493c      	ldr	r1, [pc, #240]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c8:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	2203      	movs	r2, #3
 80036ce:	4393      	bics	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036d8:	430a      	orrs	r2, r1
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2202      	movs	r2, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	220c      	movs	r2, #12
 80036ec:	4393      	bics	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036f6:	430a      	orrs	r2, r1
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	4013      	ands	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003714:	430a      	orrs	r2, r1
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	01db      	lsls	r3, r3, #7
 8003720:	4013      	ands	r3, r2
 8003722:	d015      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	0899      	lsrs	r1, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003732:	430a      	orrs	r2, r1
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	05db      	lsls	r3, r3, #23
 800373e:	429a      	cmp	r2, r3
 8003740:	d106      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0249      	lsls	r1, r1, #9
 800374c:	430a      	orrs	r2, r1
 800374e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	4013      	ands	r3, r2
 800375a:	d016      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800376c:	430a      	orrs	r2, r1
 800376e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	429a      	cmp	r2, r3
 800377a:	d106      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0249      	lsls	r1, r1, #9
 8003786:	430a      	orrs	r2, r1
 8003788:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800378a:	2312      	movs	r3, #18
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	fffffcff 	.word	0xfffffcff
 80037a4:	fffeffff 	.word	0xfffeffff
 80037a8:	00001388 	.word	0x00001388
 80037ac:	efffffff 	.word	0xefffffff
 80037b0:	ffffcfff 	.word	0xffffcfff
 80037b4:	ffff3fff 	.word	0xffff3fff

080037b8 <__errno>:
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <__errno+0x8>)
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	4770      	bx	lr
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	20000010 	.word	0x20000010

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	2600      	movs	r6, #0
 80037d6:	f000 fcd7 	bl	8004188 <_init>
 80037da:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	00b3      	lsls	r3, r6, #2
 80037ea:	58eb      	ldr	r3, [r5, r3]
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	00b3      	lsls	r3, r6, #2
 80037f4:	58eb      	ldr	r3, [r5, r3]
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	080042b8 	.word	0x080042b8
 8003800:	080042b8 	.word	0x080042b8
 8003804:	080042b8 	.word	0x080042b8
 8003808:	080042bc 	.word	0x080042bc

0800380c <memset>:
 800380c:	0003      	movs	r3, r0
 800380e:	1882      	adds	r2, r0, r2
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	7019      	strb	r1, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <powf>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	1c0c      	adds	r4, r1, #0
 8003820:	1c06      	adds	r6, r0, #0
 8003822:	f000 f86b 	bl	80038fc <__ieee754_powf>
 8003826:	1c21      	adds	r1, r4, #0
 8003828:	1c05      	adds	r5, r0, #0
 800382a:	1c20      	adds	r0, r4, #0
 800382c:	f7fd fb80 	bl	8000f30 <__aeabi_fcmpun>
 8003830:	2800      	cmp	r0, #0
 8003832:	d133      	bne.n	800389c <powf+0x80>
 8003834:	2100      	movs	r1, #0
 8003836:	1c30      	adds	r0, r6, #0
 8003838:	f7fc fcfa 	bl	8000230 <__aeabi_fcmpeq>
 800383c:	2800      	cmp	r0, #0
 800383e:	d014      	beq.n	800386a <powf+0x4e>
 8003840:	2100      	movs	r1, #0
 8003842:	1c20      	adds	r0, r4, #0
 8003844:	f7fc fcf4 	bl	8000230 <__aeabi_fcmpeq>
 8003848:	2800      	cmp	r0, #0
 800384a:	d138      	bne.n	80038be <powf+0xa2>
 800384c:	1c20      	adds	r0, r4, #0
 800384e:	f000 fc37 	bl	80040c0 <finitef>
 8003852:	2800      	cmp	r0, #0
 8003854:	d022      	beq.n	800389c <powf+0x80>
 8003856:	2100      	movs	r1, #0
 8003858:	1c20      	adds	r0, r4, #0
 800385a:	f7fc fcef 	bl	800023c <__aeabi_fcmplt>
 800385e:	2800      	cmp	r0, #0
 8003860:	d01c      	beq.n	800389c <powf+0x80>
 8003862:	f7ff ffa9 	bl	80037b8 <__errno>
 8003866:	2322      	movs	r3, #34	; 0x22
 8003868:	e017      	b.n	800389a <powf+0x7e>
 800386a:	1c28      	adds	r0, r5, #0
 800386c:	f000 fc28 	bl	80040c0 <finitef>
 8003870:	2800      	cmp	r0, #0
 8003872:	d115      	bne.n	80038a0 <powf+0x84>
 8003874:	1c30      	adds	r0, r6, #0
 8003876:	f000 fc23 	bl	80040c0 <finitef>
 800387a:	2800      	cmp	r0, #0
 800387c:	d010      	beq.n	80038a0 <powf+0x84>
 800387e:	1c20      	adds	r0, r4, #0
 8003880:	f000 fc1e 	bl	80040c0 <finitef>
 8003884:	2800      	cmp	r0, #0
 8003886:	d00b      	beq.n	80038a0 <powf+0x84>
 8003888:	1c29      	adds	r1, r5, #0
 800388a:	1c28      	adds	r0, r5, #0
 800388c:	f7fd fb50 	bl	8000f30 <__aeabi_fcmpun>
 8003890:	2800      	cmp	r0, #0
 8003892:	d0e6      	beq.n	8003862 <powf+0x46>
 8003894:	f7ff ff90 	bl	80037b8 <__errno>
 8003898:	2321      	movs	r3, #33	; 0x21
 800389a:	6003      	str	r3, [r0, #0]
 800389c:	1c28      	adds	r0, r5, #0
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	2100      	movs	r1, #0
 80038a2:	1c28      	adds	r0, r5, #0
 80038a4:	f7fc fcc4 	bl	8000230 <__aeabi_fcmpeq>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0f7      	beq.n	800389c <powf+0x80>
 80038ac:	1c30      	adds	r0, r6, #0
 80038ae:	f000 fc07 	bl	80040c0 <finitef>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d0f2      	beq.n	800389c <powf+0x80>
 80038b6:	1c20      	adds	r0, r4, #0
 80038b8:	f000 fc02 	bl	80040c0 <finitef>
 80038bc:	e7cf      	b.n	800385e <powf+0x42>
 80038be:	25fe      	movs	r5, #254	; 0xfe
 80038c0:	05ad      	lsls	r5, r5, #22
 80038c2:	e7eb      	b.n	800389c <powf+0x80>

080038c4 <sqrtf>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	1c05      	adds	r5, r0, #0
 80038c8:	f000 fb7e 	bl	8003fc8 <__ieee754_sqrtf>
 80038cc:	1c29      	adds	r1, r5, #0
 80038ce:	1c04      	adds	r4, r0, #0
 80038d0:	1c28      	adds	r0, r5, #0
 80038d2:	f7fd fb2d 	bl	8000f30 <__aeabi_fcmpun>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d10e      	bne.n	80038f8 <sqrtf+0x34>
 80038da:	2100      	movs	r1, #0
 80038dc:	1c28      	adds	r0, r5, #0
 80038de:	f7fc fcad 	bl	800023c <__aeabi_fcmplt>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d008      	beq.n	80038f8 <sqrtf+0x34>
 80038e6:	f7ff ff67 	bl	80037b8 <__errno>
 80038ea:	2321      	movs	r3, #33	; 0x21
 80038ec:	2100      	movs	r1, #0
 80038ee:	6003      	str	r3, [r0, #0]
 80038f0:	1c08      	adds	r0, r1, #0
 80038f2:	f7fc fe81 	bl	80005f8 <__aeabi_fdiv>
 80038f6:	1c04      	adds	r4, r0, #0
 80038f8:	1c20      	adds	r0, r4, #0
 80038fa:	bd70      	pop	{r4, r5, r6, pc}

080038fc <__ieee754_powf>:
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b08b      	sub	sp, #44	; 0x2c
 8003900:	9101      	str	r1, [sp, #4]
 8003902:	9f01      	ldr	r7, [sp, #4]
 8003904:	1c05      	adds	r5, r0, #0
 8003906:	007b      	lsls	r3, r7, #1
 8003908:	9003      	str	r0, [sp, #12]
 800390a:	085e      	lsrs	r6, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <__ieee754_powf+0x30>
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	03db      	lsls	r3, r3, #15
 8003914:	4043      	eors	r3, r0
 8003916:	4a96      	ldr	r2, [pc, #600]	; (8003b70 <__ieee754_powf+0x274>)
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4293      	cmp	r3, r2
 800391c:	d800      	bhi.n	8003920 <__ieee754_powf+0x24>
 800391e:	e319      	b.n	8003f54 <__ieee754_powf+0x658>
 8003920:	9901      	ldr	r1, [sp, #4]
 8003922:	1c28      	adds	r0, r5, #0
 8003924:	f7fc fcca 	bl	80002bc <__aeabi_fadd>
 8003928:	b00b      	add	sp, #44	; 0x2c
 800392a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	0044      	lsls	r4, r0, #1
 8003930:	0864      	lsrs	r4, r4, #1
 8003932:	05d2      	lsls	r2, r2, #23
 8003934:	4294      	cmp	r4, r2
 8003936:	dcf3      	bgt.n	8003920 <__ieee754_powf+0x24>
 8003938:	23fe      	movs	r3, #254	; 0xfe
 800393a:	059b      	lsls	r3, r3, #22
 800393c:	4296      	cmp	r6, r2
 800393e:	dd06      	ble.n	800394e <__ieee754_powf+0x52>
 8003940:	4298      	cmp	r0, r3
 8003942:	d1ed      	bne.n	8003920 <__ieee754_powf+0x24>
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	9a01      	ldr	r2, [sp, #4]
 8003948:	03db      	lsls	r3, r3, #15
 800394a:	4053      	eors	r3, r2
 800394c:	e7e3      	b.n	8003916 <__ieee754_powf+0x1a>
 800394e:	2100      	movs	r1, #0
 8003950:	9102      	str	r1, [sp, #8]
 8003952:	2800      	cmp	r0, #0
 8003954:	da22      	bge.n	800399c <__ieee754_powf+0xa0>
 8003956:	2197      	movs	r1, #151	; 0x97
 8003958:	05c9      	lsls	r1, r1, #23
 800395a:	428e      	cmp	r6, r1
 800395c:	da1c      	bge.n	8003998 <__ieee754_powf+0x9c>
 800395e:	429e      	cmp	r6, r3
 8003960:	db0d      	blt.n	800397e <__ieee754_powf+0x82>
 8003962:	2396      	movs	r3, #150	; 0x96
 8003964:	15f2      	asrs	r2, r6, #23
 8003966:	1a9a      	subs	r2, r3, r2
 8003968:	0033      	movs	r3, r6
 800396a:	4113      	asrs	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	4091      	lsls	r1, r2
 8003970:	42b1      	cmp	r1, r6
 8003972:	d104      	bne.n	800397e <__ieee754_powf+0x82>
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	1892      	adds	r2, r2, r2
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	23fe      	movs	r3, #254	; 0xfe
 8003980:	059b      	lsls	r3, r3, #22
 8003982:	429e      	cmp	r6, r3
 8003984:	d11e      	bne.n	80039c4 <__ieee754_powf+0xc8>
 8003986:	1c28      	adds	r0, r5, #0
 8003988:	2f00      	cmp	r7, #0
 800398a:	dacd      	bge.n	8003928 <__ieee754_powf+0x2c>
 800398c:	20fe      	movs	r0, #254	; 0xfe
 800398e:	1c29      	adds	r1, r5, #0
 8003990:	0580      	lsls	r0, r0, #22
 8003992:	f7fc fe31 	bl	80005f8 <__aeabi_fdiv>
 8003996:	e7c7      	b.n	8003928 <__ieee754_powf+0x2c>
 8003998:	2102      	movs	r1, #2
 800399a:	9102      	str	r1, [sp, #8]
 800399c:	4296      	cmp	r6, r2
 800399e:	d1ee      	bne.n	800397e <__ieee754_powf+0x82>
 80039a0:	429c      	cmp	r4, r3
 80039a2:	d100      	bne.n	80039a6 <__ieee754_powf+0xaa>
 80039a4:	e2d6      	b.n	8003f54 <__ieee754_powf+0x658>
 80039a6:	dd04      	ble.n	80039b2 <__ieee754_powf+0xb6>
 80039a8:	9801      	ldr	r0, [sp, #4]
 80039aa:	2f00      	cmp	r7, #0
 80039ac:	dabc      	bge.n	8003928 <__ieee754_powf+0x2c>
 80039ae:	2000      	movs	r0, #0
 80039b0:	e7ba      	b.n	8003928 <__ieee754_powf+0x2c>
 80039b2:	2f00      	cmp	r7, #0
 80039b4:	dafb      	bge.n	80039ae <__ieee754_powf+0xb2>
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	0612      	lsls	r2, r2, #24
 80039ba:	4694      	mov	ip, r2
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	4463      	add	r3, ip
 80039c0:	0018      	movs	r0, r3
 80039c2:	e7b1      	b.n	8003928 <__ieee754_powf+0x2c>
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	05db      	lsls	r3, r3, #23
 80039c8:	429f      	cmp	r7, r3
 80039ca:	d104      	bne.n	80039d6 <__ieee754_powf+0xda>
 80039cc:	1c29      	adds	r1, r5, #0
 80039ce:	1c28      	adds	r0, r5, #0
 80039d0:	f7fc ffda 	bl	8000988 <__aeabi_fmul>
 80039d4:	e7a8      	b.n	8003928 <__ieee754_powf+0x2c>
 80039d6:	23fc      	movs	r3, #252	; 0xfc
 80039d8:	1c28      	adds	r0, r5, #0
 80039da:	059b      	lsls	r3, r3, #22
 80039dc:	429f      	cmp	r7, r3
 80039de:	d104      	bne.n	80039ea <__ieee754_powf+0xee>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	db02      	blt.n	80039ea <__ieee754_powf+0xee>
 80039e4:	f000 faf0 	bl	8003fc8 <__ieee754_sqrtf>
 80039e8:	e79e      	b.n	8003928 <__ieee754_powf+0x2c>
 80039ea:	f000 fb66 	bl	80040ba <fabsf>
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d005      	beq.n	80039fe <__ieee754_powf+0x102>
 80039f2:	22fe      	movs	r2, #254	; 0xfe
 80039f4:	00ab      	lsls	r3, r5, #2
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	0592      	lsls	r2, r2, #22
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d11c      	bne.n	8003a38 <__ieee754_powf+0x13c>
 80039fe:	2f00      	cmp	r7, #0
 8003a00:	da04      	bge.n	8003a0c <__ieee754_powf+0x110>
 8003a02:	1c01      	adds	r1, r0, #0
 8003a04:	20fe      	movs	r0, #254	; 0xfe
 8003a06:	0580      	lsls	r0, r0, #22
 8003a08:	f7fc fdf6 	bl	80005f8 <__aeabi_fdiv>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db00      	blt.n	8003a14 <__ieee754_powf+0x118>
 8003a12:	e789      	b.n	8003928 <__ieee754_powf+0x2c>
 8003a14:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <__ieee754_powf+0x278>)
 8003a16:	18e4      	adds	r4, r4, r3
 8003a18:	9b02      	ldr	r3, [sp, #8]
 8003a1a:	431c      	orrs	r4, r3
 8003a1c:	d104      	bne.n	8003a28 <__ieee754_powf+0x12c>
 8003a1e:	1c01      	adds	r1, r0, #0
 8003a20:	f7fd f8d8 	bl	8000bd4 <__aeabi_fsub>
 8003a24:	1c01      	adds	r1, r0, #0
 8003a26:	e7b4      	b.n	8003992 <__ieee754_powf+0x96>
 8003a28:	9b02      	ldr	r3, [sp, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d000      	beq.n	8003a30 <__ieee754_powf+0x134>
 8003a2e:	e77b      	b.n	8003928 <__ieee754_powf+0x2c>
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	18c0      	adds	r0, r0, r3
 8003a36:	e777      	b.n	8003928 <__ieee754_powf+0x2c>
 8003a38:	0feb      	lsrs	r3, r5, #31
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	9306      	str	r3, [sp, #24]
 8003a3e:	9a06      	ldr	r2, [sp, #24]
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d102      	bne.n	8003a4c <__ieee754_powf+0x150>
 8003a46:	1c29      	adds	r1, r5, #0
 8003a48:	1c28      	adds	r0, r5, #0
 8003a4a:	e7e9      	b.n	8003a20 <__ieee754_powf+0x124>
 8003a4c:	239a      	movs	r3, #154	; 0x9a
 8003a4e:	05db      	lsls	r3, r3, #23
 8003a50:	429e      	cmp	r6, r3
 8003a52:	dc00      	bgt.n	8003a56 <__ieee754_powf+0x15a>
 8003a54:	e09e      	b.n	8003b94 <__ieee754_powf+0x298>
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <__ieee754_powf+0x27c>)
 8003a58:	429c      	cmp	r4, r3
 8003a5a:	dc05      	bgt.n	8003a68 <__ieee754_powf+0x16c>
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	da08      	bge.n	8003a72 <__ieee754_powf+0x176>
 8003a60:	2000      	movs	r0, #0
 8003a62:	f000 fb24 	bl	80040ae <__math_oflowf>
 8003a66:	e75f      	b.n	8003928 <__ieee754_powf+0x2c>
 8003a68:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <__ieee754_powf+0x280>)
 8003a6a:	429c      	cmp	r4, r3
 8003a6c:	dd05      	ble.n	8003a7a <__ieee754_powf+0x17e>
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	dcf6      	bgt.n	8003a60 <__ieee754_powf+0x164>
 8003a72:	2000      	movs	r0, #0
 8003a74:	f000 fb15 	bl	80040a2 <__math_uflowf>
 8003a78:	e756      	b.n	8003928 <__ieee754_powf+0x2c>
 8003a7a:	21fe      	movs	r1, #254	; 0xfe
 8003a7c:	0589      	lsls	r1, r1, #22
 8003a7e:	f7fd f8a9 	bl	8000bd4 <__aeabi_fsub>
 8003a82:	493f      	ldr	r1, [pc, #252]	; (8003b80 <__ieee754_powf+0x284>)
 8003a84:	1c04      	adds	r4, r0, #0
 8003a86:	f7fc ff7f 	bl	8000988 <__aeabi_fmul>
 8003a8a:	493e      	ldr	r1, [pc, #248]	; (8003b84 <__ieee754_powf+0x288>)
 8003a8c:	1c05      	adds	r5, r0, #0
 8003a8e:	1c20      	adds	r0, r4, #0
 8003a90:	f7fc ff7a 	bl	8000988 <__aeabi_fmul>
 8003a94:	21fa      	movs	r1, #250	; 0xfa
 8003a96:	1c06      	adds	r6, r0, #0
 8003a98:	0589      	lsls	r1, r1, #22
 8003a9a:	1c20      	adds	r0, r4, #0
 8003a9c:	f7fc ff74 	bl	8000988 <__aeabi_fmul>
 8003aa0:	1c01      	adds	r1, r0, #0
 8003aa2:	4839      	ldr	r0, [pc, #228]	; (8003b88 <__ieee754_powf+0x28c>)
 8003aa4:	f7fd f896 	bl	8000bd4 <__aeabi_fsub>
 8003aa8:	1c21      	adds	r1, r4, #0
 8003aaa:	f7fc ff6d 	bl	8000988 <__aeabi_fmul>
 8003aae:	1c01      	adds	r1, r0, #0
 8003ab0:	20fc      	movs	r0, #252	; 0xfc
 8003ab2:	0580      	lsls	r0, r0, #22
 8003ab4:	f7fd f88e 	bl	8000bd4 <__aeabi_fsub>
 8003ab8:	1c21      	adds	r1, r4, #0
 8003aba:	1c07      	adds	r7, r0, #0
 8003abc:	1c20      	adds	r0, r4, #0
 8003abe:	f7fc ff63 	bl	8000988 <__aeabi_fmul>
 8003ac2:	1c01      	adds	r1, r0, #0
 8003ac4:	1c38      	adds	r0, r7, #0
 8003ac6:	f7fc ff5f 	bl	8000988 <__aeabi_fmul>
 8003aca:	4930      	ldr	r1, [pc, #192]	; (8003b8c <__ieee754_powf+0x290>)
 8003acc:	f7fc ff5c 	bl	8000988 <__aeabi_fmul>
 8003ad0:	1c01      	adds	r1, r0, #0
 8003ad2:	1c30      	adds	r0, r6, #0
 8003ad4:	f7fd f87e 	bl	8000bd4 <__aeabi_fsub>
 8003ad8:	1c01      	adds	r1, r0, #0
 8003ada:	1c06      	adds	r6, r0, #0
 8003adc:	1c28      	adds	r0, r5, #0
 8003ade:	f7fc fbed 	bl	80002bc <__aeabi_fadd>
 8003ae2:	0b04      	lsrs	r4, r0, #12
 8003ae4:	0324      	lsls	r4, r4, #12
 8003ae6:	1c29      	adds	r1, r5, #0
 8003ae8:	1c20      	adds	r0, r4, #0
 8003aea:	f7fd f873 	bl	8000bd4 <__aeabi_fsub>
 8003aee:	1c01      	adds	r1, r0, #0
 8003af0:	1c30      	adds	r0, r6, #0
 8003af2:	f7fd f86f 	bl	8000bd4 <__aeabi_fsub>
 8003af6:	9b02      	ldr	r3, [sp, #8]
 8003af8:	9a06      	ldr	r2, [sp, #24]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	1c06      	adds	r6, r0, #0
 8003afe:	4313      	orrs	r3, r2
 8003b00:	d000      	beq.n	8003b04 <__ieee754_powf+0x208>
 8003b02:	e154      	b.n	8003dae <__ieee754_powf+0x4b2>
 8003b04:	4f22      	ldr	r7, [pc, #136]	; (8003b90 <__ieee754_powf+0x294>)
 8003b06:	9b01      	ldr	r3, [sp, #4]
 8003b08:	9801      	ldr	r0, [sp, #4]
 8003b0a:	0b1d      	lsrs	r5, r3, #12
 8003b0c:	032d      	lsls	r5, r5, #12
 8003b0e:	1c29      	adds	r1, r5, #0
 8003b10:	f7fd f860 	bl	8000bd4 <__aeabi_fsub>
 8003b14:	1c21      	adds	r1, r4, #0
 8003b16:	f7fc ff37 	bl	8000988 <__aeabi_fmul>
 8003b1a:	9901      	ldr	r1, [sp, #4]
 8003b1c:	9002      	str	r0, [sp, #8]
 8003b1e:	1c30      	adds	r0, r6, #0
 8003b20:	f7fc ff32 	bl	8000988 <__aeabi_fmul>
 8003b24:	1c01      	adds	r1, r0, #0
 8003b26:	9802      	ldr	r0, [sp, #8]
 8003b28:	f7fc fbc8 	bl	80002bc <__aeabi_fadd>
 8003b2c:	1c29      	adds	r1, r5, #0
 8003b2e:	1c06      	adds	r6, r0, #0
 8003b30:	1c20      	adds	r0, r4, #0
 8003b32:	f7fc ff29 	bl	8000988 <__aeabi_fmul>
 8003b36:	9003      	str	r0, [sp, #12]
 8003b38:	1c01      	adds	r1, r0, #0
 8003b3a:	1c05      	adds	r5, r0, #0
 8003b3c:	1c30      	adds	r0, r6, #0
 8003b3e:	f7fc fbbd 	bl	80002bc <__aeabi_fadd>
 8003b42:	9002      	str	r0, [sp, #8]
 8003b44:	9b02      	ldr	r3, [sp, #8]
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	9b04      	ldr	r3, [sp, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dc00      	bgt.n	8003b56 <__ieee754_powf+0x25a>
 8003b54:	e160      	b.n	8003e18 <__ieee754_powf+0x51c>
 8003b56:	2386      	movs	r3, #134	; 0x86
 8003b58:	9a01      	ldr	r2, [sp, #4]
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dc00      	bgt.n	8003b62 <__ieee754_powf+0x266>
 8003b60:	e128      	b.n	8003db4 <__ieee754_powf+0x4b8>
 8003b62:	2100      	movs	r1, #0
 8003b64:	1c38      	adds	r0, r7, #0
 8003b66:	f7fc fb69 	bl	800023c <__aeabi_fcmplt>
 8003b6a:	1e43      	subs	r3, r0, #1
 8003b6c:	4198      	sbcs	r0, r3
 8003b6e:	e778      	b.n	8003a62 <__ieee754_powf+0x166>
 8003b70:	ff800000 	.word	0xff800000
 8003b74:	c0800000 	.word	0xc0800000
 8003b78:	3f7ffff3 	.word	0x3f7ffff3
 8003b7c:	3f800007 	.word	0x3f800007
 8003b80:	3fb8aa00 	.word	0x3fb8aa00
 8003b84:	36eca570 	.word	0x36eca570
 8003b88:	3eaaaaab 	.word	0x3eaaaaab
 8003b8c:	3fb8aa3b 	.word	0x3fb8aa3b
 8003b90:	bf800000 	.word	0xbf800000
 8003b94:	23ff      	movs	r3, #255	; 0xff
 8003b96:	05db      	lsls	r3, r3, #23
 8003b98:	2200      	movs	r2, #0
 8003b9a:	422b      	tst	r3, r5
 8003b9c:	d106      	bne.n	8003bac <__ieee754_powf+0x2b0>
 8003b9e:	2197      	movs	r1, #151	; 0x97
 8003ba0:	05c9      	lsls	r1, r1, #23
 8003ba2:	f7fc fef1 	bl	8000988 <__aeabi_fmul>
 8003ba6:	2218      	movs	r2, #24
 8003ba8:	0004      	movs	r4, r0
 8003baa:	4252      	negs	r2, r2
 8003bac:	25fe      	movs	r5, #254	; 0xfe
 8003bae:	15e3      	asrs	r3, r4, #23
 8003bb0:	3b7f      	subs	r3, #127	; 0x7f
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	9305      	str	r3, [sp, #20]
 8003bb6:	0264      	lsls	r4, r4, #9
 8003bb8:	4be8      	ldr	r3, [pc, #928]	; (8003f5c <__ieee754_powf+0x660>)
 8003bba:	0a64      	lsrs	r4, r4, #9
 8003bbc:	05ad      	lsls	r5, r5, #22
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	4325      	orrs	r5, r4
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	dd09      	ble.n	8003bda <__ieee754_powf+0x2de>
 8003bc6:	4be6      	ldr	r3, [pc, #920]	; (8003f60 <__ieee754_powf+0x664>)
 8003bc8:	3601      	adds	r6, #1
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	dd05      	ble.n	8003bda <__ieee754_powf+0x2de>
 8003bce:	9b05      	ldr	r3, [sp, #20]
 8003bd0:	199b      	adds	r3, r3, r6
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	4be3      	ldr	r3, [pc, #908]	; (8003f64 <__ieee754_powf+0x668>)
 8003bd8:	18ed      	adds	r5, r5, r3
 8003bda:	00b3      	lsls	r3, r6, #2
 8003bdc:	9307      	str	r3, [sp, #28]
 8003bde:	4be2      	ldr	r3, [pc, #904]	; (8003f68 <__ieee754_powf+0x66c>)
 8003be0:	00b2      	lsls	r2, r6, #2
 8003be2:	58d3      	ldr	r3, [r2, r3]
 8003be4:	1c28      	adds	r0, r5, #0
 8003be6:	1c19      	adds	r1, r3, #0
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	9509      	str	r5, [sp, #36]	; 0x24
 8003bec:	f7fc fff2 	bl	8000bd4 <__aeabi_fsub>
 8003bf0:	1c29      	adds	r1, r5, #0
 8003bf2:	1c04      	adds	r4, r0, #0
 8003bf4:	9804      	ldr	r0, [sp, #16]
 8003bf6:	f7fc fb61 	bl	80002bc <__aeabi_fadd>
 8003bfa:	1c01      	adds	r1, r0, #0
 8003bfc:	20fe      	movs	r0, #254	; 0xfe
 8003bfe:	0580      	lsls	r0, r0, #22
 8003c00:	f7fc fcfa 	bl	80005f8 <__aeabi_fdiv>
 8003c04:	1c01      	adds	r1, r0, #0
 8003c06:	9008      	str	r0, [sp, #32]
 8003c08:	1c20      	adds	r0, r4, #0
 8003c0a:	f7fc febd 	bl	8000988 <__aeabi_fmul>
 8003c0e:	9003      	str	r0, [sp, #12]
 8003c10:	9b03      	ldr	r3, [sp, #12]
 8003c12:	106d      	asrs	r5, r5, #1
 8003c14:	0b1f      	lsrs	r7, r3, #12
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	059b      	lsls	r3, r3, #22
 8003c1a:	431d      	orrs	r5, r3
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	02db      	lsls	r3, r3, #11
 8003c20:	18ed      	adds	r5, r5, r3
 8003c22:	0576      	lsls	r6, r6, #21
 8003c24:	033f      	lsls	r7, r7, #12
 8003c26:	19ae      	adds	r6, r5, r6
 8003c28:	1c31      	adds	r1, r6, #0
 8003c2a:	1c38      	adds	r0, r7, #0
 8003c2c:	f7fc feac 	bl	8000988 <__aeabi_fmul>
 8003c30:	1c01      	adds	r1, r0, #0
 8003c32:	1c20      	adds	r0, r4, #0
 8003c34:	f7fc ffce 	bl	8000bd4 <__aeabi_fsub>
 8003c38:	9904      	ldr	r1, [sp, #16]
 8003c3a:	1c04      	adds	r4, r0, #0
 8003c3c:	1c30      	adds	r0, r6, #0
 8003c3e:	f7fc ffc9 	bl	8000bd4 <__aeabi_fsub>
 8003c42:	1c01      	adds	r1, r0, #0
 8003c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c46:	f7fc ffc5 	bl	8000bd4 <__aeabi_fsub>
 8003c4a:	1c39      	adds	r1, r7, #0
 8003c4c:	f7fc fe9c 	bl	8000988 <__aeabi_fmul>
 8003c50:	1c01      	adds	r1, r0, #0
 8003c52:	1c20      	adds	r0, r4, #0
 8003c54:	f7fc ffbe 	bl	8000bd4 <__aeabi_fsub>
 8003c58:	9908      	ldr	r1, [sp, #32]
 8003c5a:	f7fc fe95 	bl	8000988 <__aeabi_fmul>
 8003c5e:	9903      	ldr	r1, [sp, #12]
 8003c60:	9004      	str	r0, [sp, #16]
 8003c62:	1c08      	adds	r0, r1, #0
 8003c64:	f7fc fe90 	bl	8000988 <__aeabi_fmul>
 8003c68:	49c0      	ldr	r1, [pc, #768]	; (8003f6c <__ieee754_powf+0x670>)
 8003c6a:	1c04      	adds	r4, r0, #0
 8003c6c:	f7fc fe8c 	bl	8000988 <__aeabi_fmul>
 8003c70:	49bf      	ldr	r1, [pc, #764]	; (8003f70 <__ieee754_powf+0x674>)
 8003c72:	f7fc fb23 	bl	80002bc <__aeabi_fadd>
 8003c76:	1c21      	adds	r1, r4, #0
 8003c78:	f7fc fe86 	bl	8000988 <__aeabi_fmul>
 8003c7c:	49bd      	ldr	r1, [pc, #756]	; (8003f74 <__ieee754_powf+0x678>)
 8003c7e:	f7fc fb1d 	bl	80002bc <__aeabi_fadd>
 8003c82:	1c21      	adds	r1, r4, #0
 8003c84:	f7fc fe80 	bl	8000988 <__aeabi_fmul>
 8003c88:	49bb      	ldr	r1, [pc, #748]	; (8003f78 <__ieee754_powf+0x67c>)
 8003c8a:	f7fc fb17 	bl	80002bc <__aeabi_fadd>
 8003c8e:	1c21      	adds	r1, r4, #0
 8003c90:	f7fc fe7a 	bl	8000988 <__aeabi_fmul>
 8003c94:	49b9      	ldr	r1, [pc, #740]	; (8003f7c <__ieee754_powf+0x680>)
 8003c96:	f7fc fb11 	bl	80002bc <__aeabi_fadd>
 8003c9a:	1c21      	adds	r1, r4, #0
 8003c9c:	f7fc fe74 	bl	8000988 <__aeabi_fmul>
 8003ca0:	49b7      	ldr	r1, [pc, #732]	; (8003f80 <__ieee754_powf+0x684>)
 8003ca2:	f7fc fb0b 	bl	80002bc <__aeabi_fadd>
 8003ca6:	1c21      	adds	r1, r4, #0
 8003ca8:	1c05      	adds	r5, r0, #0
 8003caa:	1c20      	adds	r0, r4, #0
 8003cac:	f7fc fe6c 	bl	8000988 <__aeabi_fmul>
 8003cb0:	1c01      	adds	r1, r0, #0
 8003cb2:	1c28      	adds	r0, r5, #0
 8003cb4:	f7fc fe68 	bl	8000988 <__aeabi_fmul>
 8003cb8:	1c39      	adds	r1, r7, #0
 8003cba:	1c04      	adds	r4, r0, #0
 8003cbc:	9803      	ldr	r0, [sp, #12]
 8003cbe:	f7fc fafd 	bl	80002bc <__aeabi_fadd>
 8003cc2:	9904      	ldr	r1, [sp, #16]
 8003cc4:	f7fc fe60 	bl	8000988 <__aeabi_fmul>
 8003cc8:	1c21      	adds	r1, r4, #0
 8003cca:	f7fc faf7 	bl	80002bc <__aeabi_fadd>
 8003cce:	1c39      	adds	r1, r7, #0
 8003cd0:	1c06      	adds	r6, r0, #0
 8003cd2:	1c38      	adds	r0, r7, #0
 8003cd4:	f7fc fe58 	bl	8000988 <__aeabi_fmul>
 8003cd8:	49aa      	ldr	r1, [pc, #680]	; (8003f84 <__ieee754_powf+0x688>)
 8003cda:	9008      	str	r0, [sp, #32]
 8003cdc:	f7fc faee 	bl	80002bc <__aeabi_fadd>
 8003ce0:	1c31      	adds	r1, r6, #0
 8003ce2:	f7fc faeb 	bl	80002bc <__aeabi_fadd>
 8003ce6:	0b04      	lsrs	r4, r0, #12
 8003ce8:	0324      	lsls	r4, r4, #12
 8003cea:	1c21      	adds	r1, r4, #0
 8003cec:	1c38      	adds	r0, r7, #0
 8003cee:	f7fc fe4b 	bl	8000988 <__aeabi_fmul>
 8003cf2:	49a4      	ldr	r1, [pc, #656]	; (8003f84 <__ieee754_powf+0x688>)
 8003cf4:	1c05      	adds	r5, r0, #0
 8003cf6:	1c20      	adds	r0, r4, #0
 8003cf8:	f7fc ff6c 	bl	8000bd4 <__aeabi_fsub>
 8003cfc:	9908      	ldr	r1, [sp, #32]
 8003cfe:	f7fc ff69 	bl	8000bd4 <__aeabi_fsub>
 8003d02:	1c01      	adds	r1, r0, #0
 8003d04:	1c30      	adds	r0, r6, #0
 8003d06:	f7fc ff65 	bl	8000bd4 <__aeabi_fsub>
 8003d0a:	9903      	ldr	r1, [sp, #12]
 8003d0c:	f7fc fe3c 	bl	8000988 <__aeabi_fmul>
 8003d10:	1c21      	adds	r1, r4, #0
 8003d12:	1c06      	adds	r6, r0, #0
 8003d14:	9804      	ldr	r0, [sp, #16]
 8003d16:	f7fc fe37 	bl	8000988 <__aeabi_fmul>
 8003d1a:	1c01      	adds	r1, r0, #0
 8003d1c:	1c30      	adds	r0, r6, #0
 8003d1e:	f7fc facd 	bl	80002bc <__aeabi_fadd>
 8003d22:	1c06      	adds	r6, r0, #0
 8003d24:	1c01      	adds	r1, r0, #0
 8003d26:	1c28      	adds	r0, r5, #0
 8003d28:	f7fc fac8 	bl	80002bc <__aeabi_fadd>
 8003d2c:	0b04      	lsrs	r4, r0, #12
 8003d2e:	0324      	lsls	r4, r4, #12
 8003d30:	4995      	ldr	r1, [pc, #596]	; (8003f88 <__ieee754_powf+0x68c>)
 8003d32:	1c20      	adds	r0, r4, #0
 8003d34:	f7fc fe28 	bl	8000988 <__aeabi_fmul>
 8003d38:	1c29      	adds	r1, r5, #0
 8003d3a:	9003      	str	r0, [sp, #12]
 8003d3c:	1c20      	adds	r0, r4, #0
 8003d3e:	f7fc ff49 	bl	8000bd4 <__aeabi_fsub>
 8003d42:	1c01      	adds	r1, r0, #0
 8003d44:	1c30      	adds	r0, r6, #0
 8003d46:	f7fc ff45 	bl	8000bd4 <__aeabi_fsub>
 8003d4a:	4990      	ldr	r1, [pc, #576]	; (8003f8c <__ieee754_powf+0x690>)
 8003d4c:	f7fc fe1c 	bl	8000988 <__aeabi_fmul>
 8003d50:	498f      	ldr	r1, [pc, #572]	; (8003f90 <__ieee754_powf+0x694>)
 8003d52:	1c05      	adds	r5, r0, #0
 8003d54:	1c20      	adds	r0, r4, #0
 8003d56:	f7fc fe17 	bl	8000988 <__aeabi_fmul>
 8003d5a:	1c01      	adds	r1, r0, #0
 8003d5c:	1c28      	adds	r0, r5, #0
 8003d5e:	f7fc faad 	bl	80002bc <__aeabi_fadd>
 8003d62:	4b8c      	ldr	r3, [pc, #560]	; (8003f94 <__ieee754_powf+0x698>)
 8003d64:	9a07      	ldr	r2, [sp, #28]
 8003d66:	58d1      	ldr	r1, [r2, r3]
 8003d68:	f7fc faa8 	bl	80002bc <__aeabi_fadd>
 8003d6c:	1c05      	adds	r5, r0, #0
 8003d6e:	9805      	ldr	r0, [sp, #20]
 8003d70:	f7fd f914 	bl	8000f9c <__aeabi_i2f>
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <__ieee754_powf+0x69c>)
 8003d76:	9a07      	ldr	r2, [sp, #28]
 8003d78:	1c06      	adds	r6, r0, #0
 8003d7a:	58d7      	ldr	r7, [r2, r3]
 8003d7c:	1c29      	adds	r1, r5, #0
 8003d7e:	9803      	ldr	r0, [sp, #12]
 8003d80:	f7fc fa9c 	bl	80002bc <__aeabi_fadd>
 8003d84:	1c39      	adds	r1, r7, #0
 8003d86:	f7fc fa99 	bl	80002bc <__aeabi_fadd>
 8003d8a:	1c31      	adds	r1, r6, #0
 8003d8c:	f7fc fa96 	bl	80002bc <__aeabi_fadd>
 8003d90:	0b04      	lsrs	r4, r0, #12
 8003d92:	0324      	lsls	r4, r4, #12
 8003d94:	1c31      	adds	r1, r6, #0
 8003d96:	1c20      	adds	r0, r4, #0
 8003d98:	f7fc ff1c 	bl	8000bd4 <__aeabi_fsub>
 8003d9c:	1c39      	adds	r1, r7, #0
 8003d9e:	f7fc ff19 	bl	8000bd4 <__aeabi_fsub>
 8003da2:	9903      	ldr	r1, [sp, #12]
 8003da4:	f7fc ff16 	bl	8000bd4 <__aeabi_fsub>
 8003da8:	1c01      	adds	r1, r0, #0
 8003daa:	1c28      	adds	r0, r5, #0
 8003dac:	e6a1      	b.n	8003af2 <__ieee754_powf+0x1f6>
 8003dae:	27fe      	movs	r7, #254	; 0xfe
 8003db0:	05bf      	lsls	r7, r7, #22
 8003db2:	e6a8      	b.n	8003b06 <__ieee754_powf+0x20a>
 8003db4:	9a01      	ldr	r2, [sp, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d146      	bne.n	8003e48 <__ieee754_powf+0x54c>
 8003dba:	4978      	ldr	r1, [pc, #480]	; (8003f9c <__ieee754_powf+0x6a0>)
 8003dbc:	1c30      	adds	r0, r6, #0
 8003dbe:	f7fc fa7d 	bl	80002bc <__aeabi_fadd>
 8003dc2:	1c29      	adds	r1, r5, #0
 8003dc4:	1c04      	adds	r4, r0, #0
 8003dc6:	9802      	ldr	r0, [sp, #8]
 8003dc8:	f7fc ff04 	bl	8000bd4 <__aeabi_fsub>
 8003dcc:	1c01      	adds	r1, r0, #0
 8003dce:	1c20      	adds	r0, r4, #0
 8003dd0:	f7fc fa48 	bl	8000264 <__aeabi_fcmpgt>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d000      	beq.n	8003dda <__ieee754_powf+0x4de>
 8003dd8:	e6c3      	b.n	8003b62 <__ieee754_powf+0x266>
 8003dda:	2480      	movs	r4, #128	; 0x80
 8003ddc:	0424      	lsls	r4, r4, #16
 8003dde:	0020      	movs	r0, r4
 8003de0:	9b01      	ldr	r3, [sp, #4]
 8003de2:	4a6f      	ldr	r2, [pc, #444]	; (8003fa0 <__ieee754_powf+0x6a4>)
 8003de4:	15db      	asrs	r3, r3, #23
 8003de6:	3b7e      	subs	r3, #126	; 0x7e
 8003de8:	4118      	asrs	r0, r3
 8003dea:	9b02      	ldr	r3, [sp, #8]
 8003dec:	18c0      	adds	r0, r0, r3
 8003dee:	15c3      	asrs	r3, r0, #23
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	3b7f      	subs	r3, #127	; 0x7f
 8003df4:	411a      	asrs	r2, r3
 8003df6:	0001      	movs	r1, r0
 8003df8:	4391      	bics	r1, r2
 8003dfa:	2217      	movs	r2, #23
 8003dfc:	0240      	lsls	r0, r0, #9
 8003dfe:	0a40      	lsrs	r0, r0, #9
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	4304      	orrs	r4, r0
 8003e04:	411c      	asrs	r4, r3
 8003e06:	9b04      	ldr	r3, [sp, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da00      	bge.n	8003e0e <__ieee754_powf+0x512>
 8003e0c:	4264      	negs	r4, r4
 8003e0e:	1c28      	adds	r0, r5, #0
 8003e10:	f7fc fee0 	bl	8000bd4 <__aeabi_fsub>
 8003e14:	9003      	str	r0, [sp, #12]
 8003e16:	e01d      	b.n	8003e54 <__ieee754_powf+0x558>
 8003e18:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <__ieee754_powf+0x6a8>)
 8003e1a:	9a01      	ldr	r2, [sp, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dd06      	ble.n	8003e2e <__ieee754_powf+0x532>
 8003e20:	2100      	movs	r1, #0
 8003e22:	1c38      	adds	r0, r7, #0
 8003e24:	f7fc fa0a 	bl	800023c <__aeabi_fcmplt>
 8003e28:	1e43      	subs	r3, r0, #1
 8003e2a:	4198      	sbcs	r0, r3
 8003e2c:	e622      	b.n	8003a74 <__ieee754_powf+0x178>
 8003e2e:	9a01      	ldr	r2, [sp, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d109      	bne.n	8003e48 <__ieee754_powf+0x54c>
 8003e34:	1c29      	adds	r1, r5, #0
 8003e36:	9802      	ldr	r0, [sp, #8]
 8003e38:	f7fc fecc 	bl	8000bd4 <__aeabi_fsub>
 8003e3c:	1c31      	adds	r1, r6, #0
 8003e3e:	f7fc fa1b 	bl	8000278 <__aeabi_fcmpge>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d0c9      	beq.n	8003dda <__ieee754_powf+0x4de>
 8003e46:	e7eb      	b.n	8003e20 <__ieee754_powf+0x524>
 8003e48:	23fc      	movs	r3, #252	; 0xfc
 8003e4a:	9a01      	ldr	r2, [sp, #4]
 8003e4c:	2400      	movs	r4, #0
 8003e4e:	059b      	lsls	r3, r3, #22
 8003e50:	429a      	cmp	r2, r3
 8003e52:	dcc2      	bgt.n	8003dda <__ieee754_powf+0x4de>
 8003e54:	1c31      	adds	r1, r6, #0
 8003e56:	9803      	ldr	r0, [sp, #12]
 8003e58:	f7fc fa30 	bl	80002bc <__aeabi_fadd>
 8003e5c:	0b05      	lsrs	r5, r0, #12
 8003e5e:	032d      	lsls	r5, r5, #12
 8003e60:	4951      	ldr	r1, [pc, #324]	; (8003fa8 <__ieee754_powf+0x6ac>)
 8003e62:	1c28      	adds	r0, r5, #0
 8003e64:	f7fc fd90 	bl	8000988 <__aeabi_fmul>
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	9001      	str	r0, [sp, #4]
 8003e6c:	1c28      	adds	r0, r5, #0
 8003e6e:	f7fc feb1 	bl	8000bd4 <__aeabi_fsub>
 8003e72:	1c01      	adds	r1, r0, #0
 8003e74:	1c30      	adds	r0, r6, #0
 8003e76:	f7fc fead 	bl	8000bd4 <__aeabi_fsub>
 8003e7a:	494c      	ldr	r1, [pc, #304]	; (8003fac <__ieee754_powf+0x6b0>)
 8003e7c:	f7fc fd84 	bl	8000988 <__aeabi_fmul>
 8003e80:	494b      	ldr	r1, [pc, #300]	; (8003fb0 <__ieee754_powf+0x6b4>)
 8003e82:	1c06      	adds	r6, r0, #0
 8003e84:	1c28      	adds	r0, r5, #0
 8003e86:	f7fc fd7f 	bl	8000988 <__aeabi_fmul>
 8003e8a:	1c01      	adds	r1, r0, #0
 8003e8c:	1c30      	adds	r0, r6, #0
 8003e8e:	f7fc fa15 	bl	80002bc <__aeabi_fadd>
 8003e92:	1c06      	adds	r6, r0, #0
 8003e94:	1c01      	adds	r1, r0, #0
 8003e96:	9801      	ldr	r0, [sp, #4]
 8003e98:	f7fc fa10 	bl	80002bc <__aeabi_fadd>
 8003e9c:	9901      	ldr	r1, [sp, #4]
 8003e9e:	1c05      	adds	r5, r0, #0
 8003ea0:	f7fc fe98 	bl	8000bd4 <__aeabi_fsub>
 8003ea4:	1c01      	adds	r1, r0, #0
 8003ea6:	1c30      	adds	r0, r6, #0
 8003ea8:	f7fc fe94 	bl	8000bd4 <__aeabi_fsub>
 8003eac:	1c29      	adds	r1, r5, #0
 8003eae:	9001      	str	r0, [sp, #4]
 8003eb0:	1c28      	adds	r0, r5, #0
 8003eb2:	f7fc fd69 	bl	8000988 <__aeabi_fmul>
 8003eb6:	493f      	ldr	r1, [pc, #252]	; (8003fb4 <__ieee754_powf+0x6b8>)
 8003eb8:	1c06      	adds	r6, r0, #0
 8003eba:	f7fc fd65 	bl	8000988 <__aeabi_fmul>
 8003ebe:	493e      	ldr	r1, [pc, #248]	; (8003fb8 <__ieee754_powf+0x6bc>)
 8003ec0:	f7fc fe88 	bl	8000bd4 <__aeabi_fsub>
 8003ec4:	1c31      	adds	r1, r6, #0
 8003ec6:	f7fc fd5f 	bl	8000988 <__aeabi_fmul>
 8003eca:	493c      	ldr	r1, [pc, #240]	; (8003fbc <__ieee754_powf+0x6c0>)
 8003ecc:	f7fc f9f6 	bl	80002bc <__aeabi_fadd>
 8003ed0:	1c31      	adds	r1, r6, #0
 8003ed2:	f7fc fd59 	bl	8000988 <__aeabi_fmul>
 8003ed6:	493a      	ldr	r1, [pc, #232]	; (8003fc0 <__ieee754_powf+0x6c4>)
 8003ed8:	f7fc fe7c 	bl	8000bd4 <__aeabi_fsub>
 8003edc:	1c31      	adds	r1, r6, #0
 8003ede:	f7fc fd53 	bl	8000988 <__aeabi_fmul>
 8003ee2:	4938      	ldr	r1, [pc, #224]	; (8003fc4 <__ieee754_powf+0x6c8>)
 8003ee4:	f7fc f9ea 	bl	80002bc <__aeabi_fadd>
 8003ee8:	1c31      	adds	r1, r6, #0
 8003eea:	f7fc fd4d 	bl	8000988 <__aeabi_fmul>
 8003eee:	1c01      	adds	r1, r0, #0
 8003ef0:	1c28      	adds	r0, r5, #0
 8003ef2:	f7fc fe6f 	bl	8000bd4 <__aeabi_fsub>
 8003ef6:	1c06      	adds	r6, r0, #0
 8003ef8:	1c01      	adds	r1, r0, #0
 8003efa:	1c28      	adds	r0, r5, #0
 8003efc:	f7fc fd44 	bl	8000988 <__aeabi_fmul>
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	9002      	str	r0, [sp, #8]
 8003f04:	05c9      	lsls	r1, r1, #23
 8003f06:	1c30      	adds	r0, r6, #0
 8003f08:	f7fc fe64 	bl	8000bd4 <__aeabi_fsub>
 8003f0c:	1c01      	adds	r1, r0, #0
 8003f0e:	9802      	ldr	r0, [sp, #8]
 8003f10:	f7fc fb72 	bl	80005f8 <__aeabi_fdiv>
 8003f14:	9901      	ldr	r1, [sp, #4]
 8003f16:	1c06      	adds	r6, r0, #0
 8003f18:	1c28      	adds	r0, r5, #0
 8003f1a:	f7fc fd35 	bl	8000988 <__aeabi_fmul>
 8003f1e:	9901      	ldr	r1, [sp, #4]
 8003f20:	f7fc f9cc 	bl	80002bc <__aeabi_fadd>
 8003f24:	1c01      	adds	r1, r0, #0
 8003f26:	1c30      	adds	r0, r6, #0
 8003f28:	f7fc fe54 	bl	8000bd4 <__aeabi_fsub>
 8003f2c:	1c29      	adds	r1, r5, #0
 8003f2e:	f7fc fe51 	bl	8000bd4 <__aeabi_fsub>
 8003f32:	1c01      	adds	r1, r0, #0
 8003f34:	20fe      	movs	r0, #254	; 0xfe
 8003f36:	0580      	lsls	r0, r0, #22
 8003f38:	f7fc fe4c 	bl	8000bd4 <__aeabi_fsub>
 8003f3c:	05e3      	lsls	r3, r4, #23
 8003f3e:	181b      	adds	r3, r3, r0
 8003f40:	15da      	asrs	r2, r3, #23
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	dc04      	bgt.n	8003f50 <__ieee754_powf+0x654>
 8003f46:	0021      	movs	r1, r4
 8003f48:	f000 f8c4 	bl	80040d4 <scalbnf>
 8003f4c:	1c39      	adds	r1, r7, #0
 8003f4e:	e53f      	b.n	80039d0 <__ieee754_powf+0xd4>
 8003f50:	1c18      	adds	r0, r3, #0
 8003f52:	e7fb      	b.n	8003f4c <__ieee754_powf+0x650>
 8003f54:	20fe      	movs	r0, #254	; 0xfe
 8003f56:	0580      	lsls	r0, r0, #22
 8003f58:	e4e6      	b.n	8003928 <__ieee754_powf+0x2c>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	001cc471 	.word	0x001cc471
 8003f60:	005db3d6 	.word	0x005db3d6
 8003f64:	ff800000 	.word	0xff800000
 8003f68:	080042a0 	.word	0x080042a0
 8003f6c:	3e53f142 	.word	0x3e53f142
 8003f70:	3e6c3255 	.word	0x3e6c3255
 8003f74:	3e8ba305 	.word	0x3e8ba305
 8003f78:	3eaaaaab 	.word	0x3eaaaaab
 8003f7c:	3edb6db7 	.word	0x3edb6db7
 8003f80:	3f19999a 	.word	0x3f19999a
 8003f84:	40400000 	.word	0x40400000
 8003f88:	3f763800 	.word	0x3f763800
 8003f8c:	3f76384f 	.word	0x3f76384f
 8003f90:	369dc3a0 	.word	0x369dc3a0
 8003f94:	080042b0 	.word	0x080042b0
 8003f98:	080042a8 	.word	0x080042a8
 8003f9c:	3338aa3c 	.word	0x3338aa3c
 8003fa0:	007fffff 	.word	0x007fffff
 8003fa4:	43160000 	.word	0x43160000
 8003fa8:	3f317200 	.word	0x3f317200
 8003fac:	3f317218 	.word	0x3f317218
 8003fb0:	35bfbe8c 	.word	0x35bfbe8c
 8003fb4:	3331bb4c 	.word	0x3331bb4c
 8003fb8:	35ddea0e 	.word	0x35ddea0e
 8003fbc:	388ab355 	.word	0x388ab355
 8003fc0:	3b360b61 	.word	0x3b360b61
 8003fc4:	3e2aaaab 	.word	0x3e2aaaab

08003fc8 <__ieee754_sqrtf>:
 8003fc8:	0042      	lsls	r2, r0, #1
 8003fca:	0003      	movs	r3, r0
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	1c04      	adds	r4, r0, #0
 8003fd0:	20ff      	movs	r0, #255	; 0xff
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	05c0      	lsls	r0, r0, #23
 8003fd6:	4282      	cmp	r2, r0
 8003fd8:	d30a      	bcc.n	8003ff0 <__ieee754_sqrtf+0x28>
 8003fda:	1c21      	adds	r1, r4, #0
 8003fdc:	1c20      	adds	r0, r4, #0
 8003fde:	f7fc fcd3 	bl	8000988 <__aeabi_fmul>
 8003fe2:	1c01      	adds	r1, r0, #0
 8003fe4:	1c20      	adds	r0, r4, #0
 8003fe6:	f7fc f969 	bl	80002bc <__aeabi_fadd>
 8003fea:	1c04      	adds	r4, r0, #0
 8003fec:	1c20      	adds	r0, r4, #0
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d0fb      	beq.n	8003fec <__ieee754_sqrtf+0x24>
 8003ff4:	2c00      	cmp	r4, #0
 8003ff6:	da07      	bge.n	8004008 <__ieee754_sqrtf+0x40>
 8003ff8:	1c21      	adds	r1, r4, #0
 8003ffa:	1c20      	adds	r0, r4, #0
 8003ffc:	f7fc fdea 	bl	8000bd4 <__aeabi_fsub>
 8004000:	1c01      	adds	r1, r0, #0
 8004002:	f7fc faf9 	bl	80005f8 <__aeabi_fdiv>
 8004006:	e7f0      	b.n	8003fea <__ieee754_sqrtf+0x22>
 8004008:	0022      	movs	r2, r4
 800400a:	15e1      	asrs	r1, r4, #23
 800400c:	4002      	ands	r2, r0
 800400e:	4204      	tst	r4, r0
 8004010:	d02e      	beq.n	8004070 <__ieee754_sqrtf+0xa8>
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	000c      	movs	r4, r1
 8004016:	025b      	lsls	r3, r3, #9
 8004018:	0a5b      	lsrs	r3, r3, #9
 800401a:	0412      	lsls	r2, r2, #16
 800401c:	3c7f      	subs	r4, #127	; 0x7f
 800401e:	4313      	orrs	r3, r2
 8004020:	07ca      	lsls	r2, r1, #31
 8004022:	d400      	bmi.n	8004026 <__ieee754_sqrtf+0x5e>
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2200      	movs	r2, #0
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	2019      	movs	r0, #25
 800402c:	0016      	movs	r6, r2
 800402e:	1064      	asrs	r4, r4, #1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	0449      	lsls	r1, r1, #17
 8004034:	1875      	adds	r5, r6, r1
 8004036:	429d      	cmp	r5, r3
 8004038:	dc02      	bgt.n	8004040 <__ieee754_sqrtf+0x78>
 800403a:	186e      	adds	r6, r5, r1
 800403c:	1b5b      	subs	r3, r3, r5
 800403e:	1852      	adds	r2, r2, r1
 8004040:	3801      	subs	r0, #1
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	0849      	lsrs	r1, r1, #1
 8004046:	2800      	cmp	r0, #0
 8004048:	d1f4      	bne.n	8004034 <__ieee754_sqrtf+0x6c>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <__ieee754_sqrtf+0x8c>
 800404e:	2301      	movs	r3, #1
 8004050:	3201      	adds	r2, #1
 8004052:	439a      	bics	r2, r3
 8004054:	23fc      	movs	r3, #252	; 0xfc
 8004056:	1052      	asrs	r2, r2, #1
 8004058:	059b      	lsls	r3, r3, #22
 800405a:	18d2      	adds	r2, r2, r3
 800405c:	05e4      	lsls	r4, r4, #23
 800405e:	18a4      	adds	r4, r4, r2
 8004060:	e7c4      	b.n	8003fec <__ieee754_sqrtf+0x24>
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	3201      	adds	r2, #1
 8004066:	4203      	tst	r3, r0
 8004068:	d0fb      	beq.n	8004062 <__ieee754_sqrtf+0x9a>
 800406a:	3a01      	subs	r2, #1
 800406c:	1a89      	subs	r1, r1, r2
 800406e:	e7d0      	b.n	8004012 <__ieee754_sqrtf+0x4a>
 8004070:	2080      	movs	r0, #128	; 0x80
 8004072:	0400      	lsls	r0, r0, #16
 8004074:	e7f7      	b.n	8004066 <__ieee754_sqrtf+0x9e>

08004076 <with_errnof>:
 8004076:	b570      	push	{r4, r5, r6, lr}
 8004078:	000d      	movs	r5, r1
 800407a:	1c04      	adds	r4, r0, #0
 800407c:	f7ff fb9c 	bl	80037b8 <__errno>
 8004080:	6005      	str	r5, [r0, #0]
 8004082:	1c20      	adds	r0, r4, #0
 8004084:	bd70      	pop	{r4, r5, r6, pc}

08004086 <xflowf>:
 8004086:	b510      	push	{r4, lr}
 8004088:	1c0b      	adds	r3, r1, #0
 800408a:	2800      	cmp	r0, #0
 800408c:	d002      	beq.n	8004094 <xflowf+0xe>
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	18cb      	adds	r3, r1, r3
 8004094:	1c18      	adds	r0, r3, #0
 8004096:	f7fc fc77 	bl	8000988 <__aeabi_fmul>
 800409a:	2122      	movs	r1, #34	; 0x22
 800409c:	f7ff ffeb 	bl	8004076 <with_errnof>
 80040a0:	bd10      	pop	{r4, pc}

080040a2 <__math_uflowf>:
 80040a2:	2180      	movs	r1, #128	; 0x80
 80040a4:	b510      	push	{r4, lr}
 80040a6:	0549      	lsls	r1, r1, #21
 80040a8:	f7ff ffed 	bl	8004086 <xflowf>
 80040ac:	bd10      	pop	{r4, pc}

080040ae <__math_oflowf>:
 80040ae:	21e0      	movs	r1, #224	; 0xe0
 80040b0:	b510      	push	{r4, lr}
 80040b2:	05c9      	lsls	r1, r1, #23
 80040b4:	f7ff ffe7 	bl	8004086 <xflowf>
 80040b8:	bd10      	pop	{r4, pc}

080040ba <fabsf>:
 80040ba:	0040      	lsls	r0, r0, #1
 80040bc:	0840      	lsrs	r0, r0, #1
 80040be:	4770      	bx	lr

080040c0 <finitef>:
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	0043      	lsls	r3, r0, #1
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	2001      	movs	r0, #1
 80040c8:	05d2      	lsls	r2, r2, #23
 80040ca:	4293      	cmp	r3, r2
 80040cc:	db00      	blt.n	80040d0 <finitef+0x10>
 80040ce:	2000      	movs	r0, #0
 80040d0:	4770      	bx	lr
	...

080040d4 <scalbnf>:
 80040d4:	0043      	lsls	r3, r0, #1
 80040d6:	b570      	push	{r4, r5, r6, lr}
 80040d8:	0002      	movs	r2, r0
 80040da:	000c      	movs	r4, r1
 80040dc:	085d      	lsrs	r5, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <scalbnf+0x1c>
 80040e2:	21ff      	movs	r1, #255	; 0xff
 80040e4:	05c9      	lsls	r1, r1, #23
 80040e6:	428d      	cmp	r5, r1
 80040e8:	d303      	bcc.n	80040f2 <scalbnf+0x1e>
 80040ea:	1c01      	adds	r1, r0, #0
 80040ec:	f7fc f8e6 	bl	80002bc <__aeabi_fadd>
 80040f0:	bd70      	pop	{r4, r5, r6, pc}
 80040f2:	4208      	tst	r0, r1
 80040f4:	d116      	bne.n	8004124 <scalbnf+0x50>
 80040f6:	2198      	movs	r1, #152	; 0x98
 80040f8:	05c9      	lsls	r1, r1, #23
 80040fa:	f7fc fc45 	bl	8000988 <__aeabi_fmul>
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <scalbnf+0x98>)
 8004100:	429c      	cmp	r4, r3
 8004102:	db29      	blt.n	8004158 <scalbnf+0x84>
 8004104:	0002      	movs	r2, r0
 8004106:	15c3      	asrs	r3, r0, #23
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3b19      	subs	r3, #25
 800410c:	191b      	adds	r3, r3, r4
 800410e:	2bfe      	cmp	r3, #254	; 0xfe
 8004110:	dd0a      	ble.n	8004128 <scalbnf+0x54>
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <scalbnf+0x9c>)
 8004114:	2800      	cmp	r0, #0
 8004116:	da00      	bge.n	800411a <scalbnf+0x46>
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <scalbnf+0xa0>)
 800411a:	4915      	ldr	r1, [pc, #84]	; (8004170 <scalbnf+0x9c>)
 800411c:	1c18      	adds	r0, r3, #0
 800411e:	f7fc fc33 	bl	8000988 <__aeabi_fmul>
 8004122:	e7e5      	b.n	80040f0 <scalbnf+0x1c>
 8004124:	0e1b      	lsrs	r3, r3, #24
 8004126:	e7f1      	b.n	800410c <scalbnf+0x38>
 8004128:	2b00      	cmp	r3, #0
 800412a:	dd04      	ble.n	8004136 <scalbnf+0x62>
 800412c:	4812      	ldr	r0, [pc, #72]	; (8004178 <scalbnf+0xa4>)
 800412e:	4002      	ands	r2, r0
 8004130:	05d8      	lsls	r0, r3, #23
 8004132:	4310      	orrs	r0, r2
 8004134:	e7dc      	b.n	80040f0 <scalbnf+0x1c>
 8004136:	0019      	movs	r1, r3
 8004138:	3116      	adds	r1, #22
 800413a:	da0f      	bge.n	800415c <scalbnf+0x88>
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <scalbnf+0xa8>)
 800413e:	0fc3      	lsrs	r3, r0, #31
 8004140:	4294      	cmp	r4, r2
 8004142:	dd05      	ble.n	8004150 <scalbnf+0x7c>
 8004144:	480a      	ldr	r0, [pc, #40]	; (8004170 <scalbnf+0x9c>)
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <scalbnf+0x78>
 800414a:	480a      	ldr	r0, [pc, #40]	; (8004174 <scalbnf+0xa0>)
 800414c:	4908      	ldr	r1, [pc, #32]	; (8004170 <scalbnf+0x9c>)
 800414e:	e7e6      	b.n	800411e <scalbnf+0x4a>
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <scalbnf+0xac>)
 8004152:	2b00      	cmp	r3, #0
 8004154:	d000      	beq.n	8004158 <scalbnf+0x84>
 8004156:	480b      	ldr	r0, [pc, #44]	; (8004184 <scalbnf+0xb0>)
 8004158:	4909      	ldr	r1, [pc, #36]	; (8004180 <scalbnf+0xac>)
 800415a:	e7e0      	b.n	800411e <scalbnf+0x4a>
 800415c:	21cc      	movs	r1, #204	; 0xcc
 800415e:	3319      	adds	r3, #25
 8004160:	05d8      	lsls	r0, r3, #23
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <scalbnf+0xa4>)
 8004164:	0589      	lsls	r1, r1, #22
 8004166:	401a      	ands	r2, r3
 8004168:	4310      	orrs	r0, r2
 800416a:	e7d8      	b.n	800411e <scalbnf+0x4a>
 800416c:	ffff3cb0 	.word	0xffff3cb0
 8004170:	7149f2ca 	.word	0x7149f2ca
 8004174:	f149f2ca 	.word	0xf149f2ca
 8004178:	807fffff 	.word	0x807fffff
 800417c:	0000c350 	.word	0x0000c350
 8004180:	0da24260 	.word	0x0da24260
 8004184:	8da24260 	.word	0x8da24260

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
